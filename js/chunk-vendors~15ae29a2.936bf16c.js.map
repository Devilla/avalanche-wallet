{"version":3,"sources":["webpack:///./node_modules/avalanche/dist/apis/avm/utxos.js","webpack:///./node_modules/asn1.js/lib/asn1/constants/index.js","webpack:///./node_modules/avalanche/dist/apis/evm/importtx.js","webpack:///./node_modules/avalanche/dist/apis/avm/operationtx.js","webpack:///./node_modules/avalanche/dist/apis/evm/api.js","webpack:///./node_modules/asn1.js/lib/asn1/decoders/index.js","webpack:///./node_modules/avalanche/dist/apis/avm/tx.js","webpack:///./node_modules/avalanche/dist/apis/evm/tx.js","webpack:///./node_modules/avalanche/dist/apis/avm/credentials.js","webpack:///./node_modules/asn1.js/lib/asn1/encoders/index.js","webpack:///./node_modules/avalanche/dist/apis/avm/api.js","webpack:///./node_modules/asn1.js/lib/asn1/encoders/der.js","webpack:///./node_modules/asn1.js/lib/asn1/base/index.js","webpack:///./node_modules/avalanche/dist/apis/evm/inputs.js","webpack:///./node_modules/avalanche/dist/apis/avm/inputs.js","webpack:///./node_modules/avalanche/dist/apis/avm/importtx.js","webpack:///./node_modules/avalanche/dist/apis/avm/ops.js","webpack:///./node_modules/avalanche/dist/apis/evm/credentials.js","webpack:///./node_modules/avalanche/dist/apis/avm/createassettx.js","webpack:///./node_modules/asn1.js/lib/asn1/base/buffer.js","webpack:///./node_modules/avalanche/dist/apis/avm/initialstates.js","webpack:///./node_modules/asn1.js/lib/asn1.js","webpack:///./node_modules/asn1.js/lib/asn1/base/node.js","webpack:///./node_modules/asn1.js/lib/asn1/encoders/pem.js","webpack:///./node_modules/asn1.js/lib/asn1/constants/der.js","webpack:///./node_modules/avalanche/dist/apis/avm/keychain.js","webpack:///./node_modules/asn1.js/lib/asn1/decoders/pem.js","webpack:///./node_modules/avalanche/dist/apis/avm/constants.js","webpack:///./node_modules/avalanche/dist/apis/evm/keychain.js","webpack:///./node_modules/avalanche/dist/apis/auth/api.js","webpack:///./node_modules/avalanche/dist/apis/auth/index.js","webpack:///./node_modules/avalanche/dist/apis/avm/outputs.js","webpack:///./node_modules/avalanche/dist/apis/evm/constants.js","webpack:///./node_modules/avalanche/dist/apis/evm/exporttx.js","webpack:///./node_modules/avalanche/dist/apis/avm/minterset.js","webpack:///./node_modules/asn1.js/node_modules/bn.js/lib/bn.js","webpack:///./node_modules/avalanche/dist/apis/evm/basetx.js","webpack:///./node_modules/asn1.js/lib/asn1/decoders/der.js","webpack:///./node_modules/asn1.js/lib/asn1/base/reporter.js","webpack:///./node_modules/avalanche/dist/apis/avm/exporttx.js","webpack:///./node_modules/avalanche/dist/apis/evm/outputs.js","webpack:///./node_modules/asn1.js/lib/asn1/api.js","webpack:///./node_modules/avalanche/dist/apis/avm/index.js","webpack:///./node_modules/avalanche/dist/apis/admin/index.js","webpack:///./node_modules/avalanche/dist/apis/avm/basetx.js","webpack:///./node_modules/assert/assert.js","webpack:///./node_modules/avalanche/dist/apis/evm/index.js","webpack:///./node_modules/avalanche/dist/apis/admin/api.js","webpack:///./node_modules/avalanche/dist/apis/evm/utxos.js"],"names":["__importDefault","this","mod","__esModule","Object","defineProperty","exports","value","UTXOSet","AssetAmountDestination","UTXO","buffer_1","bintools_1","bn_js_1","outputs_1","constants_1","tx_1","inputs_1","ops_1","helperfunctions_1","initialstates_1","utxos_1","createassettx_1","operationtx_1","basetx_1","exporttx_1","importtx_1","constants_2","assetamount_1","serialization_1","bintools","default","getInstance","serializer","Serialization","StandardUTXO","super","arguments","_typeName","_typeID","undefined","fields","encoding","deserialize","output","SelectOutputClass","bytes","offset","codecid","copyFrom","txid","outputidx","assetid","outputid","readUInt32BE","fromBuffer","serialized","cb58Decode","cb58Encode","toBuffer","utxo","codecID","AVMConstants","LATESTCODEC","StandardAssetAmountDestination","StandardUTXOSet","getMinimumSpendable","aad","asOf","UnixNow","locktime","threshold","utxoArray","getAllUTXOs","outids","i","length","canComplete","u","assetKey","getAssetID","toString","fromAddresses","getSenders","getOutput","AmountOutput","assetExists","meetsThreshold","am","getAssetAmount","isFinished","uout","getOutputID","amount","getAmount","spendAmount","getTxID","getOutputIdx","input","SECPTransferInput","xferin","TransferableInput","spenders","getSpenders","j","idx","getAddressIdx","Error","getInput","addSignatureIdx","addInput","amounts","getAmounts","zero","getAssetIDString","gt","spendout","getDestinations","xferout","TransferableOutput","addOutput","change","getChange","changeout","getChangeAddresses","chgxferout","addChange","buildBaseTx","networkid","blockchainid","assetID","toAddresses","changeAddresses","fee","feeAssetID","memo","eq","addAssetAmount","_feeCheck","ins","outs","success","getInputs","getAllOutputs","baseTx","BaseTx","UnsignedTx","buildCreateAssetTx","initialState","name","symbol","denomination","mintOutputs","SECPMintOutput","CAtx","CreateAssetTx","buildSECPMintTx","mintOwner","transferOwner","mintUTXOID","ops","mintOp","SECPMintOperation","getUTXO","SECPMINTOUTPUTID","out","transferableOperation","TransferableOperation","push","operationTx","OperationTx","buildCreateNFTAssetTx","minterSets","InitialStates","nftMintOutput","NFTMintOutput","getMinters","getThreshold","NFTFXID","buildCreateNFTMintTx","owners","utxoids","groupID","payload","nftMintOperation","NFTMintOperation","buildNFTTransferTx","outbound","NFTTransferOutput","getGroupID","getPayload","op","NFTTransferOperation","xferop","OpTx","buildImportTx","atomics","sourceChain","clone","importIns","feepaid","feeAssetStr","amt","infeeamount","assetStr","lt","add","sub","from","getAddresses","feeRemaining","importTx","ImportTx","buildExportTx","avaxAssetID","destinationChain","exportouts","PlatformChainID","getChangeOutputs","getOutputs","exportTx","ExportTx","utxos","utxoid","utxoidCleaned","decoder","addressUTXOs","address","addressCleaned","utxobalance","utxovar","args","newset","create","allUTXOs","addArray","Buffer","constants","_reverse","map","res","keys","forEach","key","der","credentials_1","credentials_2","EVMBaseTx","DefaultNetworkID","alloc","sourceChainid","EVMConstants","IMPORTTX","numIns","numOuts","getTxType","getSourceChain","Array","isArray","importIn","EVMOutput","serialize","assign","encoder","ii","writeUInt32BE","anIn","anOut","barr","bsize","sort","comparator","concat","newImportTx","msg","kc","sigs","sign","cred","SelectCredentialClass","getCredentialID","sigidxs","getSigIdxs","sigidx","keypair","getKey","getSource","signval","sig","Signature","addSignature","OPERATIONTX","numOps","o","getOperation","newbase","__awaiter","thisArg","_arguments","P","generator","adopt","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","EVMAPI","jrpcapi_1","keychain_1","JRPCAPI","core","baseurl","blockchainID","keychain","KeyChain","blockchainAlias","AVAXAssetID","txFee","getBlockchainAlias","netID","getNetworkID","Defaults","network","alias","setBlockchainAlias","getBlockchainID","refreshBlockchainID","C","parseAddress","addr","ADDRESSLENGTH","addressFromBuffer","chainID","addressToString","getHRP","getAssetDescription","asset","params","tmpBaseURL","getBaseURL","setBaseURL","response","callMethod","data","parseInt","getAVAXAssetID","refresh","PrimaryAssetAlias","setAVAXAssetID","getDefaultTxFee","getTxFee","export","username","password","to","txID","exportAVAX","getUTXOs","addresses","limit","startIndex","import","importAVAX","importKey","privateKey","issueTx","tx","Transaction","txobj","Tx","exportKey","utxoset","toAddress","ownerAddresses","_cleanAddressArray","a","stringToAddress","srcChain","utxoResponse","atomicUTXOs","join","builtUnsignedTx","fromAddressHex","fromAddressBech","nonce","prefixes","split","assetDescription","evmInputs","evmInput","EVMInput","evmAVAXInput","evmANTInput","exportedOuts","secpTransferOutput","SECPTransferOutput","transferableOutput","unsignedTx","keyChain","caller","addrs","chainid","decoders","pem","SelectTxClass","create_hash_1","txtype","BASETX","CREATEASSETTX","EXPORTTX","StandardUnsignedTx","transaction","readUInt16BE","txbuff","update","digest","StandardTx","credentials","numcreds","credid","evmtx_1","txTypeID","EVMStandardUnsignedTx","EVMStandardTx","NFTCredential","SECPCredential","SECPCREDENTIAL","NFTCREDENTIAL","Credential","id","newbasetx","encoders","AVMAPI","payload_1","output_1","creationTxFee","netid","X","setTxFee","getDefaultCreationTxFee","getCreationTxFee","setCreationTxFee","newKeyChain","checkGooseEgg","utx","outTotal","outputTotal","getOutputTotal","getBurn","lte","ONEAVAX","mul","getBalance","createAddress","createFixedCapAsset","initialHolders","createVariableCapAsset","mint","minters","amnt","listAddresses","getAllBalances","balances","getTx","getTxStatus","status","persistOpts","db","has","getName","selfArray","get","self","mergeByRule","getMergeRule","getAllUTXOStrings","set","getOverwrite","PayloadBase","utxoidArray","initialStates","SYMBOLMAXLEN","ASSETNAMELEN","OutputOwners","signTx","send","changeAddr","sendMultiple","sendOutputs","sOutputs","outputs","buildGenesis","genesisData","r","inherits","Node","DEREncoder","entity","enc","tree","DERNode","_init","body","parent","call","two","num","encodeTag","tag","primitive","cls","reporter","tagByName","hasOwnProperty","error","tagClassByName","module","prototype","encode","_encode","_encodeComposite","content","encodedTag","header","_createEncoderBuffer","lenOctets","_encodeStr","str","unused","buf","writeUInt16BE","charCodeAt","_isNumstr","_isPrintstr","test","_encodeObjid","values","relative","slice","JSON","stringify","splice","size","ident","objid","_encodeTime","time","date","Date","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","_encodeNull","_encodeInt","isBuffer","numArray","toArray","unshift","copy","_encodeBool","_use","obj","_getEncoder","_skipDefault","dataBuffer","state","_baseState","defaultBuffer","_encodeValue","base","Reporter","DecoderBuffer","EncoderBuffer","AmountInput","SelectInputClass","input_1","inputID","SECPINPUTID","StandardTransferableInput","ASSETIDLEN","inputid","StandardAmountInput","newout","nonceValue","sigCount","sigIdxs","addressIdx","SigIdx","b","setSource","getNonce","n","fromBNToBuffer","superbuff","bufferToB58","newEVMInput","UTXOID","Operation","SelectOperationClass","nbytes_1","opid","SECPMINTOPID","NFTMINTOPID","NFTXFEROPID","Serializable","s","sidx","sigbuff","aoutid","getOperationID","abuff","boutid","bbuff","asort","bsort","compare","operation","utxoIDs","getUTXOIDs","fromString","numutxoIDs","mintOutput","transferOutput","mintoutBuff","transferOutBuff","outputOwners","getPayloadBuffer","payloadlen","getOutputOwners","oo","payloadLen","numoutputs","outputOwner","outputownerslen","outbuff","NBytes","utxoidbuff","b58ToBuffer","validateChecksum","newbuff","getSize","credential","initialstate","getInitialStates","getSymbol","getDenomination","readUInt8","getDenominationBuffer","writeUInt8","namesize","symsize","inits","initstatebuff","namebuff","write","symbuff","options","item","isEncoderBuffer","byteLength","isDecoderBuffer","isCompatible","constructor","save","restore","isEmpty","skip","raw","fail","_reporterState","fxs","flatfxs","fxid","unflat","SECPFXID","klen","klennum","fxidbuff","statelenbuff","statelen","buff","k","Output","writeInt32BE","asn1","bignum","define","assert","tags","methods","overrided","children","reverseArgs","choice","optional","any","use","useDecoder","explicit","implicit","contains","_wrap","stateProps","cstate","prop","method","filter","child","equal","_useArgs","arg","def","val","newKey","_decode","wrapResult","prevObj","present","prevKey","enterKey","_peekTag","isError","_decodeGeneric","_decodeChoice","enterObject","_decodeTag","start","track","path","_getUse","leaveObject","exitKey","leaveKey","_decodeList","_decodeStr","_decodeObjid","_decodeTime","_decodeNull","_decodeBool","_decodeInt","match","some","node","type","_encodeChoice","_encodePrimitive","PEMEncoder","p","label","reverse","tagClass","0","1","2","3","KeyPair","secp256k1_1","SECP256k1KeyPair","hrp","getAddressString","addressFromPublicKey","pubk","getChainID","setChainID","setHRP","generateKey","newkp","getPrivateKey","SECP256k1KeyChain","makeKey","addKey","privk","pk","getAddress","newkc","DERDecoder","PEMDecoder","decode","lines","toUpperCase","re","end","base64","replace","SECPXFEROUTPUTID","NFTXFEROUTPUTID","NFTMINTOUTPUTID","BLOCKCHAINIDLEN","AuthAPI","newToken","endpoints","token","revokeToken","changePassword","oldPassword","newPassword","__createBinding","m","k2","enumerable","__exportStar","NFTOutput","StandardTransferableOutput","StandardAmountOutput","BaseNFTOutput","utxobuff","sizePayload","psize","inputs","exportedOutputs","numInputs","numExportedOutputs","getDestinationChain","getExportedOutputs","exportedOutput","eo","MinterSet","_cleanAddresses","ctor","superCtor","super_","TempCtor","BN","number","endian","isBN","negative","words","red","wordSize","parseHex","len","Math","min","c","parseBase","max","left","right","cmp","_initNumber","_initArray","_parseHex","_parseBase","strip","ceil","w","off","limbLen","limbPow","total","word","imuln","_iaddn","pow","dest","_expand","_normSign","inspect","zeros","groupSizes","groupBases","toBitArray","bitLength","bit","wbit","smallMulTo","lo","carry","ncarry","rword","maxJ","padding","groupSize","groupBase","isZero","modn","idivn","toNumber","ret","toJSON","toArrayLike","ArrayType","reqLength","littleEndian","q","andln","iushrn","clz32","_countBits","t","_zeroBits","hi","zeroBits","toTwos","width","abs","inotn","iaddn","fromTwos","testn","notn","ineg","isNeg","neg","iuor","ior","or","uor","iuand","iand","and","uand","iuxor","ixor","xor","uxor","bytesNeeded","bitsLeft","setn","iadd","isub","comb10MulTo","mid","a0","al0","ah0","a1","al1","ah1","a2","al2","ah2","a3","al3","ah3","a4","al4","ah4","a5","al5","ah5","a6","al6","ah6","a7","al7","ah7","a8","al8","ah8","a9","al9","ah9","b0","bl0","bh0","b1","bl1","bh1","b2","bl2","bh2","b3","bl3","bh3","b4","bl4","bh4","b5","bl5","bh5","b6","bl6","bh6","b7","bl7","bh7","b8","bl8","bh8","b9","bl9","bh9","imul","w0","w1","w2","w3","w4","w5","w6","w7","w8","w9","w10","w11","w12","w13","w14","w15","w16","w17","w18","bigMulTo","hncarry","jumboMulTo","fftm","FFTM","mulp","x","y","mulTo","makeRBT","N","l","revBin","rb","permute","rbt","rws","iws","rtws","itws","transform","rtwdf","cos","PI","itwdf","sin","rtwdf_","itwdf_","ie","ro","io","rx","guessLen13b","odd","conjugate","normalize13b","ws","round","convert13b","stub","ph","_","rwst","iwst","nrws","nrwst","niwst","rmws","mulf","muln","sqr","isqr","iushln","bits","carryMask","newCarry","ishln","hint","extended","h","mask","maskedWords","ishrn","shln","ushln","shrn","ushrn","imaskn","maskn","isubn","addn","subn","iabs","_ishlnsubmul","shift","_wordDiv","mode","bhi","bhiBits","diff","qj","div","divmod","positive","divn","umod","divRound","dm","half","r2","acc","egcd","A","B","D","g","isEven","yp","xp","im","isOdd","jm","gcd","_invmp","x1","x2","delta","cmpn","invm","bincn","ucmp","gtn","gten","gte","ltn","lten","eqn","Red","toRed","ctx","convertTo","_forceRed","fromRed","convertFrom","forceRed","redAdd","redIAdd","redSub","redISub","redShl","shl","redMul","_verify2","redIMul","redSqr","_verify1","redISqr","redSqrt","sqrt","redInvm","redNeg","redPow","primes","k256","p224","p192","p25519","MPrime","tmp","_tmp","K256","P224","P192","P25519","prime","_prime","Mont","imod","rinv","minv","ireduce","rlen","imulK","_strip","outLen","prev","mod3","one","nOne","lpow","z","inv","windowSize","wnd","current","currentLen","mont","EVMStandardBaseTx","networkID","newEVMBaseTx","derDecodeTag","oct","tagStr","derDecodeLen","buffer","decodedTag","_skipUntilEnd","possibleEnd","String","fromCharCode","numstr","printstr","identifiers","subident","first","second","year","mon","day","hour","sec","UTC","_getDecoder","errors","ReporterError","rethrow","pathLen","index","now","err","inherited","elem","message","stack","partial","captureStackTrace","exportOuts","getOuts","getExportOutputs","outputID","amountValue","prefix","substring","newEVMOutput","api","Entity","_createNamed","Base","Generated","_initNamed","tx_2","StandardBaseTx","newOut","newIn","numouts","numins","outcount","incount","memolen","objectAssign","global","_isBuffer","util","hasOwn","pSlice","functionsHaveNames","pToString","isView","arrbuf","ArrayBuffer","DataView","ok","regex","func","isFunction","truncate","something","rawname","getMessage","actual","operator","expected","stackStartFunction","AssertionError","_deepEqual","strict","memos","isDate","getTime","isRegExp","source","multiline","lastIndex","ignoreCase","Float32Array","Float64Array","Uint8Array","actualIndex","indexOf","objEquiv","isArguments","object","actualVisitedObjects","isPrimitive","getPrototypeOf","aIsArgs","bIsArgs","ka","objectKeys","kb","notDeepStrictEqual","expectedException","isPrototypeOf","_tryBlock","block","_throws","shouldThrow","TypeError","userProvidedMessage","isUnwantedException","isUnexpectedException","generatedMessage","fn_name","next_line","notEqual","deepEqual","deepStrictEqual","notDeepEqual","strictEqual","notStrictEqual","throws","doesNotThrow","ifError","AdminAPI","endpoint","aliasChain","chain","lockProfile","memoryProfile","startCPUProfiler","stopCPUProfiler","spender","atomic","evmOutput"],"mappings":"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","file":"js/chunk-vendors~15ae29a2.936bf16c.js","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UTXOSet = exports.AssetAmountDestination = exports.UTXO = void 0;\n/**\n * @packageDocumentation\n * @module API-AVM-UTXOs\n  */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst outputs_1 = require(\"./outputs\");\nconst constants_1 = require(\"./constants\");\nconst tx_1 = require(\"./tx\");\nconst inputs_1 = require(\"./inputs\");\nconst ops_1 = require(\"./ops\");\nconst helperfunctions_1 = require(\"../../utils/helperfunctions\");\nconst initialstates_1 = require(\"./initialstates\");\nconst utxos_1 = require(\"../../common/utxos\");\nconst createassettx_1 = require(\"./createassettx\");\nconst operationtx_1 = require(\"./operationtx\");\nconst basetx_1 = require(\"./basetx\");\nconst exporttx_1 = require(\"./exporttx\");\nconst importtx_1 = require(\"./importtx\");\nconst constants_2 = require(\"../../utils/constants\");\nconst assetamount_1 = require(\"../../common/assetamount\");\nconst serialization_1 = require(\"../../utils/serialization\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serializer = serialization_1.Serialization.getInstance();\n/**\n * Class for representing a single UTXO.\n */\nclass UTXO extends utxos_1.StandardUTXO {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"UTXO\";\n        this._typeID = undefined;\n    }\n    //serialize is inherited\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.output = outputs_1.SelectOutputClass(fields[\"output\"][\"_typeID\"]);\n        this.output.deserialize(fields[\"output\"], encoding);\n    }\n    fromBuffer(bytes, offset = 0) {\n        this.codecid = bintools.copyFrom(bytes, offset, offset + 2);\n        offset += 2;\n        this.txid = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        this.outputidx = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        this.assetid = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        const outputid = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);\n        offset += 4;\n        this.output = outputs_1.SelectOutputClass(outputid);\n        return this.output.fromBuffer(bytes, offset);\n    }\n    /**\n     * Takes a base-58 string containing a [[UTXO]], parses it, populates the class, and returns the length of the StandardUTXO in bytes.\n     *\n     * @param serialized A base-58 string containing a raw [[UTXO]]\n     *\n     * @returns The length of the raw [[UTXO]]\n     *\n     * @remarks\n     * unlike most fromStrings, it expects the string to be serialized in cb58 format\n     */\n    fromString(serialized) {\n        /* istanbul ignore next */\n        return this.fromBuffer(bintools.cb58Decode(serialized));\n    }\n    /**\n     * Returns a base-58 representation of the [[UTXO]].\n     *\n     * @remarks\n     * unlike most toStrings, this returns in cb58 serialization format\n     */\n    toString() {\n        /* istanbul ignore next */\n        return bintools.cb58Encode(this.toBuffer());\n    }\n    clone() {\n        const utxo = new UTXO();\n        utxo.fromBuffer(this.toBuffer());\n        return utxo;\n    }\n    create(codecID = constants_1.AVMConstants.LATESTCODEC, txid = undefined, outputidx = undefined, assetid = undefined, output = undefined) {\n        return new UTXO(codecID, txid, outputidx, assetid, output);\n    }\n}\nexports.UTXO = UTXO;\nclass AssetAmountDestination extends assetamount_1.StandardAssetAmountDestination {\n}\nexports.AssetAmountDestination = AssetAmountDestination;\n/**\n * Class representing a set of [[UTXO]]s.\n */\nclass UTXOSet extends utxos_1.StandardUTXOSet {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"UTXOSet\";\n        this._typeID = undefined;\n        this.getMinimumSpendable = (aad, asOf = helperfunctions_1.UnixNow(), locktime = new bn_js_1.default(0), threshold = 1) => {\n            const utxoArray = this.getAllUTXOs();\n            const outids = {};\n            for (let i = 0; i < utxoArray.length && !aad.canComplete(); i++) {\n                const u = utxoArray[i];\n                const assetKey = u.getAssetID().toString(\"hex\");\n                const fromAddresses = aad.getSenders();\n                if (u.getOutput() instanceof outputs_1.AmountOutput && aad.assetExists(assetKey) && u.getOutput().meetsThreshold(fromAddresses, asOf)) {\n                    const am = aad.getAssetAmount(assetKey);\n                    if (!am.isFinished()) {\n                        const uout = u.getOutput();\n                        outids[assetKey] = uout.getOutputID();\n                        const amount = uout.getAmount();\n                        am.spendAmount(amount);\n                        const txid = u.getTxID();\n                        const outputidx = u.getOutputIdx();\n                        const input = new inputs_1.SECPTransferInput(amount);\n                        const xferin = new inputs_1.TransferableInput(txid, outputidx, u.getAssetID(), input);\n                        const spenders = uout.getSpenders(fromAddresses, asOf);\n                        for (let j = 0; j < spenders.length; j++) {\n                            const idx = uout.getAddressIdx(spenders[j]);\n                            if (idx === -1) {\n                                /* istanbul ignore next */\n                                throw new Error('Error - UTXOSet.getMinimumSpendable: no such '\n                                    + `address in output: ${spenders[j]}`);\n                            }\n                            xferin.getInput().addSignatureIdx(idx, spenders[j]);\n                        }\n                        aad.addInput(xferin);\n                    }\n                    else if (aad.assetExists(assetKey) && !(u.getOutput() instanceof outputs_1.AmountOutput)) {\n                        /**\n                         * Leaving the below lines, not simply for posterity, but for clarification.\n                         * AssetIDs may have mixed OutputTypes.\n                         * Some of those OutputTypes may implement AmountOutput.\n                         * Others may not.\n                         * Simply continue in this condition.\n                         */\n                        /*return new Error('Error - UTXOSet.getMinimumSpendable: outputID does not '\n                          + `implement AmountOutput: ${u.getOutput().getOutputID}`);*/\n                        continue;\n                    }\n                }\n            }\n            if (!aad.canComplete()) {\n                return new Error('Error - UTXOSet.getMinimumSpendable: insufficient '\n                    + 'funds to create the transaction');\n            }\n            const amounts = aad.getAmounts();\n            const zero = new bn_js_1.default(0);\n            for (let i = 0; i < amounts.length; i++) {\n                const assetKey = amounts[i].getAssetIDString();\n                const amount = amounts[i].getAmount();\n                if (amount.gt(zero)) {\n                    const spendout = outputs_1.SelectOutputClass(outids[assetKey], amount, aad.getDestinations(), locktime, threshold);\n                    const xferout = new outputs_1.TransferableOutput(amounts[i].getAssetID(), spendout);\n                    aad.addOutput(xferout);\n                }\n                const change = amounts[i].getChange();\n                if (change.gt(zero)) {\n                    const changeout = outputs_1.SelectOutputClass(outids[assetKey], change, aad.getChangeAddresses());\n                    const chgxferout = new outputs_1.TransferableOutput(amounts[i].getAssetID(), changeout);\n                    aad.addChange(chgxferout);\n                }\n            }\n            return undefined;\n        };\n        /**\n         * Creates an [[UnsignedTx]] wrapping a [[BaseTx]]. For more granular control, you may create your own\n         * [[UnsignedTx]] wrapping a [[BaseTx]] manually (with their corresponding [[TransferableInput]]s and [[TransferableOutput]]s).\n         *\n         * @param networkid The number representing NetworkID of the node\n         * @param blockchainid The {@link https://github.com/feross/buffer|Buffer} representing the BlockchainID for the transaction\n         * @param amount The amount of the asset to be spent in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}.\n         * @param assetID {@link https://github.com/feross/buffer|Buffer} of the asset ID for the UTXO\n         * @param toAddresses The addresses to send the funds\n         * @param fromAddresses The addresses being used to send the funds from the UTXOs {@link https://github.com/feross/buffer|Buffer}\n         * @param changeAddresses Optional. The addresses that can spend the change remaining from the spent UTXOs. Default: toAddresses\n         * @param fee Optional. The amount of fees to burn in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}\n         * @param feeAssetID Optional. The assetID of the fees being burned. Default: assetID\n         * @param memo Optional. Contains arbitrary data, up to 256 bytes\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         * @param locktime Optional. The locktime field created in the resulting outputs\n         * @param threshold Optional. The number of signatures required to spend the funds in the resultant UTXO\n         *\n         * @returns An unsigned transaction created from the passed in parameters.\n         *\n         */\n        this.buildBaseTx = (networkid, blockchainid, amount, assetID, toAddresses, fromAddresses, changeAddresses = undefined, fee = undefined, feeAssetID = undefined, memo = undefined, asOf = helperfunctions_1.UnixNow(), locktime = new bn_js_1.default(0), threshold = 1) => {\n            if (threshold > toAddresses.length) {\n                /* istanbul ignore next */\n                throw new Error(`Error - UTXOSet.buildBaseTx: threshold is greater than number of addresses`);\n            }\n            if (typeof changeAddresses === \"undefined\") {\n                changeAddresses = toAddresses;\n            }\n            if (typeof feeAssetID === \"undefined\") {\n                feeAssetID = assetID;\n            }\n            const zero = new bn_js_1.default(0);\n            if (amount.eq(zero)) {\n                return undefined;\n            }\n            const aad = new AssetAmountDestination(toAddresses, fromAddresses, changeAddresses);\n            if (assetID.toString(\"hex\") === feeAssetID.toString(\"hex\")) {\n                aad.addAssetAmount(assetID, amount, fee);\n            }\n            else {\n                aad.addAssetAmount(assetID, amount, zero);\n                if (this._feeCheck(fee, feeAssetID)) {\n                    aad.addAssetAmount(feeAssetID, zero, fee);\n                }\n            }\n            let ins = [];\n            let outs = [];\n            const success = this.getMinimumSpendable(aad, asOf, locktime, threshold);\n            if (typeof success === \"undefined\") {\n                ins = aad.getInputs();\n                outs = aad.getAllOutputs();\n            }\n            else {\n                throw success;\n            }\n            const baseTx = new basetx_1.BaseTx(networkid, blockchainid, outs, ins, memo);\n            return new tx_1.UnsignedTx(baseTx);\n        };\n        /**\n         * Creates an unsigned Create Asset transaction. For more granular control, you may create your own\n         * [[CreateAssetTX]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s).\n         *\n         * @param networkid The number representing NetworkID of the node\n         * @param blockchainid The {@link https://github.com/feross/buffer|Buffer} representing the BlockchainID for the transaction\n         * @param fromAddresses The addresses being used to send the funds from the UTXOs {@link https://github.com/feross/buffer|Buffer}\n         * @param changeAddresses Optional. The addresses that can spend the change remaining from the spent UTXOs\n         * @param initialState The [[InitialStates]] that represent the intial state of a created asset\n         * @param name String for the descriptive name of the asset\n         * @param symbol String for the ticker symbol of the asset\n         * @param denomination Optional number for the denomination which is 10^D. D must be >= 0 and <= 32. Ex: $1 AVAX = 10^9 $nAVAX\n         * @param mintOutputs Optional. Array of [[SECPMintOutput]]s to be included in the transaction. These outputs can be spent to mint more tokens.\n         * @param fee Optional. The amount of fees to burn in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}\n         * @param feeAssetID Optional. The assetID of the fees being burned.\n         * @param memo Optional contains arbitrary bytes, up to 256 bytes\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         *\n         * @returns An unsigned transaction created from the passed in parameters.\n         *\n         */\n        this.buildCreateAssetTx = (networkid, blockchainid, fromAddresses, changeAddresses, initialState, name, symbol, denomination, mintOutputs = undefined, fee = undefined, feeAssetID = undefined, memo = undefined, asOf = helperfunctions_1.UnixNow()) => {\n            const zero = new bn_js_1.default(0);\n            let ins = [];\n            let outs = [];\n            if (this._feeCheck(fee, feeAssetID)) {\n                const aad = new AssetAmountDestination(fromAddresses, fromAddresses, changeAddresses);\n                aad.addAssetAmount(feeAssetID, zero, fee);\n                const success = this.getMinimumSpendable(aad, asOf);\n                if (typeof success === \"undefined\") {\n                    ins = aad.getInputs();\n                    outs = aad.getAllOutputs();\n                }\n                else {\n                    throw success;\n                }\n            }\n            if (typeof mintOutputs !== \"undefined\") {\n                for (let i = 0; i < mintOutputs.length; i++) {\n                    if (mintOutputs[i] instanceof outputs_1.SECPMintOutput) {\n                        initialState.addOutput(mintOutputs[i]);\n                    }\n                    else {\n                        throw new Error(\"Error - UTXOSet.buildCreateAssetTx: A submitted mintOutput was not of type SECPMintOutput\");\n                    }\n                }\n            }\n            let CAtx = new createassettx_1.CreateAssetTx(networkid, blockchainid, outs, ins, memo, name, symbol, denomination, initialState);\n            return new tx_1.UnsignedTx(CAtx);\n        };\n        /**\n         * Creates an unsigned Secp mint transaction. For more granular control, you may create your own\n         * [[OperationTx]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s, and [[TransferOperation]]s).\n         *\n         * @param networkid The number representing NetworkID of the node\n         * @param blockchainid The {@link https://github.com/feross/buffer|Buffer} representing the BlockchainID for the transaction\n         * @param mintOwner A [[SECPMintOutput]] which specifies the new set of minters\n         * @param transferOwner A [[SECPTransferOutput]] which specifies where the minted tokens will go\n         * @param fromAddresses The addresses being used to send the funds from the UTXOs {@link https://github.com/feross/buffer|Buffer}\n         * @param changeAddresses The addresses that can spend the change remaining from the spent UTXOs\n         * @param mintUTXOID The UTXOID for the [[SCPMintOutput]] being spent to produce more tokens\n         * @param fee Optional. The amount of fees to burn in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}\n         * @param feeAssetID Optional. The assetID of the fees being burned.\n         * @param memo Optional contains arbitrary bytes, up to 256 bytes\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         */\n        this.buildSECPMintTx = (networkid, blockchainid, mintOwner, transferOwner, fromAddresses, changeAddresses, mintUTXOID, fee = undefined, feeAssetID = undefined, memo = undefined, asOf = helperfunctions_1.UnixNow()) => {\n            const zero = new bn_js_1.default(0);\n            let ins = [];\n            let outs = [];\n            if (this._feeCheck(fee, feeAssetID)) {\n                const aad = new AssetAmountDestination(fromAddresses, fromAddresses, changeAddresses);\n                aad.addAssetAmount(feeAssetID, zero, fee);\n                const success = this.getMinimumSpendable(aad, asOf);\n                if (typeof success === \"undefined\") {\n                    ins = aad.getInputs();\n                    outs = aad.getAllOutputs();\n                }\n                else {\n                    throw success;\n                }\n            }\n            let ops = [];\n            let mintOp = new ops_1.SECPMintOperation(mintOwner, transferOwner);\n            let utxo = this.getUTXO(mintUTXOID);\n            if (typeof utxo === \"undefined\") {\n                throw new Error(\"Error - UTXOSet.buildSECPMintTx: UTXOID not found\");\n            }\n            if (utxo.getOutput().getOutputID() !== constants_1.AVMConstants.SECPMINTOUTPUTID) {\n                throw new Error(\"Error - UTXOSet.buildSECPMintTx: UTXO is not a SECPMINTOUTPUTID\");\n            }\n            let out = utxo.getOutput();\n            let spenders = out.getSpenders(fromAddresses, asOf);\n            for (let j = 0; j < spenders.length; j++) {\n                let idx = out.getAddressIdx(spenders[j]);\n                if (idx == -1) {\n                    /* istanbul ignore next */\n                    throw new Error(`Error - UTXOSet.buildSECPMintTx: no such address in output: ${spenders[j]}`);\n                }\n                mintOp.addSignatureIdx(idx, spenders[j]);\n            }\n            let transferableOperation = new ops_1.TransferableOperation(utxo.getAssetID(), [mintUTXOID], mintOp);\n            ops.push(transferableOperation);\n            let operationTx = new operationtx_1.OperationTx(networkid, blockchainid, outs, ins, memo, ops);\n            return new tx_1.UnsignedTx(operationTx);\n        };\n        /**\n        * Creates an unsigned Create Asset transaction. For more granular control, you may create your own\n        * [[CreateAssetTX]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s).\n        *\n        * @param networkid The number representing NetworkID of the node\n        * @param blockchainid The {@link https://github.com/feross/buffer|Buffer} representing the BlockchainID for the transaction\n        * @param fromAddresses The addresses being used to send the funds from the UTXOs {@link https://github.com/feross/buffer|Buffer}\n        * @param changeAddresses Optional. The addresses that can spend the change remaining from the spent UTXOs.\n        * @param minterSets The minters and thresholds required to mint this nft asset\n        * @param name String for the descriptive name of the nft asset\n        * @param symbol String for the ticker symbol of the nft asset\n        * @param fee Optional. The amount of fees to burn in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}\n        * @param feeAssetID Optional. The assetID of the fees being burned.\n        * @param memo Optional contains arbitrary bytes, up to 256 bytes\n        * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n        * @param locktime Optional. The locktime field created in the resulting mint output\n        *\n        * @returns An unsigned transaction created from the passed in parameters.\n        *\n        */\n        this.buildCreateNFTAssetTx = (networkid, blockchainid, fromAddresses, changeAddresses, minterSets, name, symbol, fee = undefined, feeAssetID = undefined, memo = undefined, asOf = helperfunctions_1.UnixNow(), locktime = undefined) => {\n            const zero = new bn_js_1.default(0);\n            let ins = [];\n            let outs = [];\n            if (this._feeCheck(fee, feeAssetID)) {\n                const aad = new AssetAmountDestination(fromAddresses, fromAddresses, changeAddresses);\n                aad.addAssetAmount(feeAssetID, zero, fee);\n                const success = this.getMinimumSpendable(aad, asOf);\n                if (typeof success === \"undefined\") {\n                    ins = aad.getInputs();\n                    outs = aad.getAllOutputs();\n                }\n                else {\n                    throw success;\n                }\n            }\n            let initialState = new initialstates_1.InitialStates();\n            for (let i = 0; i < minterSets.length; i++) {\n                let nftMintOutput = new outputs_1.NFTMintOutput(i, minterSets[i].getMinters(), locktime, minterSets[i].getThreshold());\n                initialState.addOutput(nftMintOutput, constants_1.AVMConstants.NFTFXID);\n            }\n            let denomination = 0; // NFTs are non-fungible\n            let CAtx = new createassettx_1.CreateAssetTx(networkid, blockchainid, outs, ins, memo, name, symbol, denomination, initialState);\n            return new tx_1.UnsignedTx(CAtx);\n        };\n        /**\n        * Creates an unsigned NFT mint transaction. For more granular control, you may create your own\n        * [[OperationTx]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s, and [[TransferOperation]]s).\n        *\n        * @param networkid The number representing NetworkID of the node\n        * @param blockchainid The {@link https://github.com/feross/buffer|Buffer} representing the BlockchainID for the transaction\n        * @param owners An array of [[OutputOwners]] who will be given the NFTs.\n        * @param fromAddresses The addresses being used to send the funds from the UTXOs\n        * @param changeAddresses Optional. The addresses that can spend the change remaining from the spent UTXOs.\n        * @param utxoids An array of strings for the NFTs being transferred\n        * @param groupID Optional. The group this NFT is issued to.\n        * @param payload Optional. Data for NFT Payload.\n        * @param fee Optional. The amount of fees to burn in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}\n        * @param feeAssetID Optional. The assetID of the fees being burned.\n        * @param memo Optional contains arbitrary bytes, up to 256 bytes\n        * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n        *\n        * @returns An unsigned transaction created from the passed in parameters.\n        *\n        */\n        this.buildCreateNFTMintTx = (networkid, blockchainid, owners, fromAddresses, changeAddresses, utxoids, groupID = 0, payload = undefined, fee = undefined, feeAssetID = undefined, memo = undefined, asOf = helperfunctions_1.UnixNow()) => {\n            const zero = new bn_js_1.default(0);\n            let ins = [];\n            let outs = [];\n            if (this._feeCheck(fee, feeAssetID)) {\n                const aad = new AssetAmountDestination(fromAddresses, fromAddresses, changeAddresses);\n                aad.addAssetAmount(feeAssetID, zero, fee);\n                const success = this.getMinimumSpendable(aad, asOf);\n                if (typeof success === \"undefined\") {\n                    ins = aad.getInputs();\n                    outs = aad.getAllOutputs();\n                }\n                else {\n                    throw success;\n                }\n            }\n            let ops = [];\n            let nftMintOperation = new ops_1.NFTMintOperation(groupID, payload, owners);\n            for (let i = 0; i < utxoids.length; i++) {\n                let utxo = this.getUTXO(utxoids[i]);\n                let out = utxo.getOutput();\n                let spenders = out.getSpenders(fromAddresses, asOf);\n                for (let j = 0; j < spenders.length; j++) {\n                    let idx;\n                    idx = out.getAddressIdx(spenders[j]);\n                    if (idx == -1) {\n                        /* istanbul ignore next */\n                        throw new Error(`Error - UTXOSet.buildCreateNFTMintTx: no such address in output: ${spenders[j]}`);\n                    }\n                    nftMintOperation.addSignatureIdx(idx, spenders[j]);\n                }\n                let transferableOperation = new ops_1.TransferableOperation(utxo.getAssetID(), utxoids, nftMintOperation);\n                ops.push(transferableOperation);\n            }\n            let operationTx = new operationtx_1.OperationTx(networkid, blockchainid, outs, ins, memo, ops);\n            return new tx_1.UnsignedTx(operationTx);\n        };\n        /**\n        * Creates an unsigned NFT transfer transaction. For more granular control, you may create your own\n        * [[OperationTx]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s, and [[TransferOperation]]s).\n        *\n        * @param networkid The number representing NetworkID of the node\n        * @param blockchainid The {@link https://github.com/feross/buffer|Buffer} representing the BlockchainID for the transaction\n        * @param toAddresses An array of {@link https://github.com/feross/buffer|Buffer}s which indicate who recieves the NFT\n        * @param fromAddresses An array for {@link https://github.com/feross/buffer|Buffer} who owns the NFT\n        * @param changeAddresses Optional. The addresses that can spend the change remaining from the spent UTXOs.\n        * @param utxoids An array of strings for the NFTs being transferred\n        * @param fee Optional. The amount of fees to burn in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}\n        * @param feeAssetID Optional. The assetID of the fees being burned.\n        * @param memo Optional contains arbitrary bytes, up to 256 bytes\n        * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n        * @param locktime Optional. The locktime field created in the resulting outputs\n        * @param threshold Optional. The number of signatures required to spend the funds in the resultant UTXO\n        *\n        * @returns An unsigned transaction created from the passed in parameters.\n        *\n        */\n        this.buildNFTTransferTx = (networkid, blockchainid, toAddresses, fromAddresses, changeAddresses, utxoids, fee = undefined, feeAssetID = undefined, memo = undefined, asOf = helperfunctions_1.UnixNow(), locktime = new bn_js_1.default(0), threshold = 1) => {\n            const zero = new bn_js_1.default(0);\n            let ins = [];\n            let outs = [];\n            if (this._feeCheck(fee, feeAssetID)) {\n                const aad = new AssetAmountDestination(fromAddresses, fromAddresses, changeAddresses);\n                aad.addAssetAmount(feeAssetID, zero, fee);\n                const success = this.getMinimumSpendable(aad, asOf);\n                if (typeof success === \"undefined\") {\n                    ins = aad.getInputs();\n                    outs = aad.getAllOutputs();\n                }\n                else {\n                    throw success;\n                }\n            }\n            const ops = [];\n            for (let i = 0; i < utxoids.length; i++) {\n                const utxo = this.getUTXO(utxoids[i]);\n                const out = utxo.getOutput();\n                const spenders = out.getSpenders(fromAddresses, asOf);\n                const outbound = new outputs_1.NFTTransferOutput(out.getGroupID(), out.getPayload(), toAddresses, locktime, threshold);\n                const op = new ops_1.NFTTransferOperation(outbound);\n                for (let j = 0; j < spenders.length; j++) {\n                    const idx = out.getAddressIdx(spenders[j]);\n                    if (idx === -1) {\n                        /* istanbul ignore next */\n                        throw new Error('Error - UTXOSet.buildNFTTransferTx: '\n                            + `no such address in output: ${spenders[j]}`);\n                    }\n                    op.addSignatureIdx(idx, spenders[j]);\n                }\n                const xferop = new ops_1.TransferableOperation(utxo.getAssetID(), [utxoids[i]], op);\n                ops.push(xferop);\n            }\n            const OpTx = new operationtx_1.OperationTx(networkid, blockchainid, outs, ins, memo, ops);\n            return new tx_1.UnsignedTx(OpTx);\n        };\n        /**\n          * Creates an unsigned ImportTx transaction.\n          *\n          * @param networkid The number representing NetworkID of the node\n          * @param blockchainid The {@link https://github.com/feross/buffer|Buffer} representing the BlockchainID for the transaction\n          * @param toAddresses The addresses to send the funds\n          * @param fromAddresses The addresses being used to send the funds from the UTXOs {@link https://github.com/feross/buffer|Buffer}\n          * @param changeAddresses Optional. The addresses that can spend the change remaining from the spent UTXOs.\n          * @param importIns An array of [[TransferableInput]]s being imported\n          * @param sourceChain A {@link https://github.com/feross/buffer|Buffer} for the chainid where the imports are coming from.\n          * @param fee Optional. The amount of fees to burn in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}. Fee will come from the inputs first, if they can.\n          * @param feeAssetID Optional. The assetID of the fees being burned.\n          * @param memo Optional contains arbitrary bytes, up to 256 bytes\n          * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n          * @param locktime Optional. The locktime field created in the resulting outputs\n          * @param threshold Optional. The number of signatures required to spend the funds in the resultant UTXO\n          * @returns An unsigned transaction created from the passed in parameters.\n          *\n          */\n        this.buildImportTx = (networkid, blockchainid, toAddresses, fromAddresses, changeAddresses, atomics, sourceChain = undefined, fee = undefined, feeAssetID = undefined, memo = undefined, asOf = helperfunctions_1.UnixNow(), locktime = new bn_js_1.default(0), threshold = 1) => {\n            const zero = new bn_js_1.default(0);\n            let ins = [];\n            let outs = [];\n            if (typeof fee === \"undefined\") {\n                fee = zero.clone();\n            }\n            const importIns = [];\n            let feepaid = new bn_js_1.default(0);\n            let feeAssetStr = feeAssetID.toString(\"hex\");\n            for (let i = 0; i < atomics.length; i++) {\n                const utxo = atomics[i];\n                const assetID = utxo.getAssetID();\n                const output = utxo.getOutput();\n                let amt = output.getAmount().clone();\n                let infeeamount = amt.clone();\n                let assetStr = assetID.toString(\"hex\");\n                if (typeof feeAssetID !== \"undefined\" &&\n                    fee.gt(zero) &&\n                    feepaid.lt(fee) &&\n                    assetStr === feeAssetStr) {\n                    feepaid = feepaid.add(infeeamount);\n                    if (feepaid.gt(fee)) {\n                        infeeamount = feepaid.sub(fee);\n                        feepaid = fee.clone();\n                    }\n                    else {\n                        infeeamount = zero.clone();\n                    }\n                }\n                const txid = utxo.getTxID();\n                const outputidx = utxo.getOutputIdx();\n                const input = new inputs_1.SECPTransferInput(amt);\n                const xferin = new inputs_1.TransferableInput(txid, outputidx, assetID, input);\n                const from = output.getAddresses();\n                const spenders = output.getSpenders(from, asOf);\n                for (let j = 0; j < spenders.length; j++) {\n                    const idx = output.getAddressIdx(spenders[j]);\n                    if (idx === -1) {\n                        /* istanbul ignore next */\n                        throw new Error('Error - UTXOSet.buildImportTx: no such '\n                            + `address in output: ${spenders[j]}`);\n                    }\n                    xferin.getInput().addSignatureIdx(idx, spenders[j]);\n                }\n                importIns.push(xferin);\n                //add extra outputs for each amount (calculated from the imported inputs), minus fees\n                if (infeeamount.gt(zero)) {\n                    const spendout = outputs_1.SelectOutputClass(output.getOutputID(), infeeamount, toAddresses, locktime, threshold);\n                    const xferout = new outputs_1.TransferableOutput(assetID, spendout);\n                    outs.push(xferout);\n                }\n            }\n            // get remaining fees from the provided addresses\n            let feeRemaining = fee.sub(feepaid);\n            if (feeRemaining.gt(zero) && this._feeCheck(feeRemaining, feeAssetID)) {\n                const aad = new AssetAmountDestination(toAddresses, fromAddresses, changeAddresses);\n                aad.addAssetAmount(feeAssetID, zero, feeRemaining);\n                const success = this.getMinimumSpendable(aad, asOf, locktime, threshold);\n                if (typeof success === \"undefined\") {\n                    ins = aad.getInputs();\n                    outs = aad.getAllOutputs();\n                }\n                else {\n                    throw success;\n                }\n            }\n            const importTx = new importtx_1.ImportTx(networkid, blockchainid, outs, ins, memo, sourceChain, importIns);\n            return new tx_1.UnsignedTx(importTx);\n        };\n        /**\n        * Creates an unsigned ExportTx transaction.\n        *\n        * @param networkid The number representing NetworkID of the node\n        * @param blockchainid The {@link https://github.com/feross/buffer|Buffer} representing the BlockchainID for the transaction\n        * @param amount The amount being exported as a {@link https://github.com/indutny/bn.js/|BN}\n        * @param avaxAssetID {@link https://github.com/feross/buffer|Buffer} of the asset ID for AVAX\n        * @param toAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who recieves the AVAX\n        * @param fromAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who owns the AVAX\n        * @param changeAddresses Optional. The addresses that can spend the change remaining from the spent UTXOs.\n        * @param fee Optional. The amount of fees to burn in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}\n        * @param destinationChain Optional. A {@link https://github.com/feross/buffer|Buffer} for the chainid where to send the asset.\n        * @param feeAssetID Optional. The assetID of the fees being burned.\n        * @param memo Optional contains arbitrary bytes, up to 256 bytes\n        * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n        * @param locktime Optional. The locktime field created in the resulting outputs\n        * @param threshold Optional. The number of signatures required to spend the funds in the resultant UTXO\n        * @returns An unsigned transaction created from the passed in parameters.\n        *\n        */\n        this.buildExportTx = (networkid, blockchainid, amount, avaxAssetID, toAddresses, fromAddresses, changeAddresses = undefined, destinationChain = undefined, fee = undefined, feeAssetID = undefined, memo = undefined, asOf = helperfunctions_1.UnixNow(), locktime = new bn_js_1.default(0), threshold = 1) => {\n            let ins = [];\n            let outs = [];\n            let exportouts = [];\n            if (typeof changeAddresses === \"undefined\") {\n                changeAddresses = toAddresses;\n            }\n            const zero = new bn_js_1.default(0);\n            if (amount.eq(zero)) {\n                return undefined;\n            }\n            if (typeof feeAssetID === \"undefined\") {\n                feeAssetID = avaxAssetID;\n            }\n            else if (feeAssetID.toString(\"hex\") !== avaxAssetID.toString(\"hex\")) {\n                /* istanbul ignore next */\n                throw new Error('Error - UTXOSet.buildExportTx: '\n                    + `feeAssetID must match avaxAssetID`);\n            }\n            if (typeof destinationChain === \"undefined\") {\n                destinationChain = bintools.cb58Decode(constants_2.PlatformChainID);\n            }\n            const aad = new AssetAmountDestination(toAddresses, fromAddresses, changeAddresses);\n            if (avaxAssetID.toString(\"hex\") === feeAssetID.toString(\"hex\")) {\n                aad.addAssetAmount(avaxAssetID, amount, fee);\n            }\n            else {\n                aad.addAssetAmount(avaxAssetID, amount, zero);\n                if (this._feeCheck(fee, feeAssetID)) {\n                    aad.addAssetAmount(feeAssetID, zero, fee);\n                }\n            }\n            const success = this.getMinimumSpendable(aad, asOf, locktime, threshold);\n            if (typeof success === \"undefined\") {\n                ins = aad.getInputs();\n                outs = aad.getChangeOutputs();\n                exportouts = aad.getOutputs();\n            }\n            else {\n                throw success;\n            }\n            const exportTx = new exporttx_1.ExportTx(networkid, blockchainid, outs, ins, memo, destinationChain, exportouts);\n            return new tx_1.UnsignedTx(exportTx);\n        };\n    }\n    //serialize is inherited\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        let utxos = {};\n        for (let utxoid in fields[\"utxos\"]) {\n            let utxoidCleaned = serializer.decoder(utxoid, encoding, \"base58\", \"base58\");\n            utxos[utxoidCleaned] = new UTXO();\n            utxos[utxoidCleaned].deserialize(fields[\"utxos\"][utxoid], encoding);\n        }\n        let addressUTXOs = {};\n        for (let address in fields[\"addressUTXOs\"]) {\n            let addressCleaned = serializer.decoder(address, encoding, \"cb58\", \"hex\");\n            let utxobalance = {};\n            for (let utxoid in fields[\"addressUTXOs\"][address]) {\n                let utxoidCleaned = serializer.decoder(utxoid, encoding, \"base58\", \"base58\");\n                utxobalance[utxoidCleaned] = serializer.decoder(fields[\"addressUTXOs\"][address][utxoid], encoding, \"decimalString\", \"BN\");\n            }\n            addressUTXOs[addressCleaned] = utxobalance;\n        }\n        this.utxos = utxos;\n        this.addressUTXOs = addressUTXOs;\n    }\n    parseUTXO(utxo) {\n        const utxovar = new UTXO();\n        // force a copy\n        if (typeof utxo === 'string') {\n            utxovar.fromBuffer(bintools.cb58Decode(utxo));\n        }\n        else if (utxo instanceof UTXO) {\n            utxovar.fromBuffer(utxo.toBuffer()); // forces a copy\n        }\n        else {\n            /* istanbul ignore next */\n            throw new Error(`Error - UTXO.parseUTXO: utxo parameter is not a UTXO or string: ${utxo}`);\n        }\n        return utxovar;\n    }\n    create(...args) {\n        return new UTXOSet();\n    }\n    clone() {\n        const newset = this.create();\n        const allUTXOs = this.getAllUTXOs();\n        newset.addArray(allUTXOs);\n        return newset;\n    }\n    _feeCheck(fee, feeAssetID) {\n        return (typeof fee !== \"undefined\" &&\n            typeof feeAssetID !== \"undefined\" &&\n            fee.gt(new bn_js_1.default(0)) && feeAssetID instanceof buffer_1.Buffer);\n    }\n}\nexports.UTXOSet = UTXOSet;\n//# sourceMappingURL=data:application/json;base64,","'use strict';\n\nconst constants = exports;\n\n// Helper\nconstants._reverse = function reverse(map) {\n  const res = {};\n\n  Object.keys(map).forEach(function(key) {\n    // Convert key to integer if it is stringified\n    if ((key | 0) == key)\n      key = key | 0;\n\n    const value = map[key];\n    res[value] = key;\n  });\n\n  return res;\n};\n\nconstants.der = require('./der');\n","\"use strict\";\n/**\n * @packageDocumentation\n * @module API-EVM-ImportTx\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ImportTx = void 0;\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst outputs_1 = require(\"./outputs\");\nconst inputs_1 = require(\"./inputs\");\nconst basetx_1 = require(\"./basetx\");\nconst credentials_1 = require(\"./credentials\");\nconst credentials_2 = require(\"../../common/credentials\");\nconst constants_2 = require(\"../../utils/constants\");\nconst serialization_1 = require(\"../../utils/serialization\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serializer = serialization_1.Serialization.getInstance();\n/**\n * Class representing an unsigned Import transaction.\n */\nclass ImportTx extends basetx_1.EVMBaseTx {\n    /**\n     * Class representing an unsigned Import transaction.\n     *\n     * @param networkid Optional networkid, [[DefaultNetworkID]]\n     * @param blockchainid Optional blockchainid, default Buffer.alloc(32, 16)\n     * @param sourceChainid Optional chainid for the source inputs to import. Default platform chainid.\n     * @param importIns Array of [[TransferableInput]]s used in the transaction\n     * @param outs Optional array of the [[EVMOutput]]s\n     */\n    constructor(networkid = constants_2.DefaultNetworkID, blockchainid = buffer_1.Buffer.alloc(32, 16), sourceChainid = buffer_1.Buffer.alloc(32, 16), importIns = undefined, outs = undefined) {\n        super(networkid, blockchainid);\n        this._typeName = \"ImportTx\";\n        this._typeID = constants_1.EVMConstants.IMPORTTX;\n        this.sourceChain = buffer_1.Buffer.alloc(32);\n        this.numIns = buffer_1.Buffer.alloc(4);\n        this.importIns = [];\n        this.numOuts = buffer_1.Buffer.alloc(4);\n        this.outs = [];\n        /**\n           * Returns the id of the [[ImportTx]]\n           */\n        this.getTxType = () => {\n            return this._typeID;\n        };\n        /**\n         * Returns a {@link https://github.com/feross/buffer|Buffer} for the source chainid.\n         */\n        this.getSourceChain = () => {\n            return this.sourceChain;\n        };\n        this.sourceChain = sourceChainid;\n        if (typeof importIns !== 'undefined' && Array.isArray(importIns)) {\n            importIns.forEach((importIn) => {\n                if (!(importIn instanceof inputs_1.TransferableInput)) {\n                    throw new Error(\"Error - ImportTx.constructor: invalid TransferableInput in array parameter 'importIns'\");\n                }\n            });\n            this.importIns = importIns;\n        }\n        if (typeof outs !== 'undefined' && Array.isArray(outs)) {\n            outs.forEach((out) => {\n                if (!(out instanceof outputs_1.EVMOutput)) {\n                    throw new Error(\"Error - ImportTx.constructor: invalid EVMOutput in array parameter 'outs'\");\n                }\n            });\n            this.outs = outs;\n        }\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { \"sourceChain\": serializer.encoder(this.sourceChain, encoding, \"Buffer\", \"cb58\"), \"importIns\": this.importIns.map((i) => i.serialize(encoding)) });\n    }\n    ;\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.sourceChain = serializer.decoder(fields[\"sourceChain\"], encoding, \"cb58\", \"Buffer\", 32);\n        this.importIns = fields[\"importIns\"].map((i) => {\n            let ii = new inputs_1.TransferableInput();\n            ii.deserialize(i, encoding);\n            return ii;\n        });\n        this.numIns = buffer_1.Buffer.alloc(4);\n        this.numIns.writeUInt32BE(this.importIns.length, 0);\n    }\n    /**\n       * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[ImportTx]], parses it,\n       * populates the class, and returns the length of the [[ImportTx]] in bytes.\n       *\n       * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[ImportTx]]\n       * @param offset A number representing the byte offset. Defaults to 0.\n       *\n       * @returns The length of the raw [[ImportTx]]\n       *\n       * @remarks assume not-checksummed\n       */\n    fromBuffer(bytes, offset = 0) {\n        offset = super.fromBuffer(bytes, offset);\n        this.sourceChain = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        this.numIns = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const numIns = this.numIns.readUInt32BE(0);\n        for (let i = 0; i < numIns; i++) {\n            const anIn = new inputs_1.TransferableInput();\n            offset = anIn.fromBuffer(bytes, offset);\n            this.importIns.push(anIn);\n        }\n        this.numOuts = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const numOuts = this.numOuts.readUInt32BE(0);\n        for (let i = 0; i < numOuts; i++) {\n            const anOut = new outputs_1.EVMOutput();\n            offset = anOut.fromBuffer(bytes, offset);\n            this.outs.push(anOut);\n        }\n        return offset;\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[ImportTx]].\n     */\n    toBuffer() {\n        if (typeof this.sourceChain === \"undefined\") {\n            throw new Error(\"ImportTx.toBuffer -- this.sourceChain is undefined\");\n        }\n        this.numIns.writeUInt32BE(this.importIns.length, 0);\n        this.numOuts.writeUInt32BE(this.outs.length, 0);\n        let barr = [super.toBuffer(), this.sourceChain, this.numIns];\n        let bsize = super.toBuffer().length + this.sourceChain.length + this.numIns.length;\n        this.importIns = this.importIns.sort(inputs_1.TransferableInput.comparator());\n        this.importIns.forEach((importIn) => {\n            bsize += importIn.toBuffer().length;\n            barr.push(importIn.toBuffer());\n        });\n        bsize += this.numOuts.length;\n        barr.push(this.numOuts);\n        this.outs.forEach((out) => {\n            bsize += out.toBuffer().length;\n            barr.push(out.toBuffer());\n        });\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n    /**\n       * Returns an array of [[TransferableInput]]s in this transaction.\n       */\n    getImportInputs() {\n        return this.importIns;\n    }\n    /**\n       * Returns an array of [[EVMOutput]]s in this transaction.\n       */\n    getOuts() {\n        return this.outs;\n    }\n    clone() {\n        let newImportTx = new ImportTx();\n        newImportTx.fromBuffer(this.toBuffer());\n        return newImportTx;\n    }\n    create(...args) {\n        return new ImportTx(...args);\n    }\n    /**\n       * Takes the bytes of an [[UnsignedTx]] and returns an array of [[Credential]]s\n       *\n       * @param msg A Buffer for the [[UnsignedTx]]\n       * @param kc An [[KeyChain]] used in signing\n       *\n       * @returns An array of [[Credential]]s\n       */\n    sign(msg, kc) {\n        const sigs = super.sign(msg, kc);\n        this.importIns.forEach((importIn) => {\n            const cred = credentials_1.SelectCredentialClass(importIn.getInput().getCredentialID());\n            const sigidxs = importIn.getInput().getSigIdxs();\n            sigidxs.forEach((sigidx) => {\n                const keypair = kc.getKey(sigidx.getSource());\n                const signval = keypair.sign(msg);\n                const sig = new credentials_2.Signature();\n                sig.fromBuffer(signval);\n                cred.addSignature(sig);\n            });\n            sigs.push(cred);\n        });\n        return sigs;\n    }\n}\nexports.ImportTx = ImportTx;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.OperationTx = void 0;\n/**\n * @packageDocumentation\n * @module API-AVM-OperationTx\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst ops_1 = require(\"./ops\");\nconst credentials_1 = require(\"./credentials\");\nconst credentials_2 = require(\"../../common/credentials\");\nconst basetx_1 = require(\"./basetx\");\nconst constants_2 = require(\"../../utils/constants\");\nconst serialization_1 = require(\"../../utils/serialization\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serializer = serialization_1.Serialization.getInstance();\n/**\n * Class representing an unsigned Operation transaction.\n */\nclass OperationTx extends basetx_1.BaseTx {\n    /**\n     * Class representing an unsigned Operation transaction.\n     *\n     * @param networkid Optional networkid, [[DefaultNetworkID]]\n     * @param blockchainid Optional blockchainid, default Buffer.alloc(32, 16)\n     * @param outs Optional array of the [[TransferableOutput]]s\n     * @param ins Optional array of the [[TransferableInput]]s\n     * @param memo Optional {@link https://github.com/feross/buffer|Buffer} for the memo field\n     * @param ops Array of [[Operation]]s used in the transaction\n     */\n    constructor(networkid = constants_2.DefaultNetworkID, blockchainid = buffer_1.Buffer.alloc(32, 16), outs = undefined, ins = undefined, memo = undefined, ops = undefined) {\n        super(networkid, blockchainid, outs, ins, memo);\n        this._typeName = \"OperationTx\";\n        this._typeID = constants_1.AVMConstants.OPERATIONTX;\n        this.numOps = buffer_1.Buffer.alloc(4);\n        this.ops = [];\n        /**\n         * Returns the id of the [[OperationTx]]\n         */\n        this.getTxType = () => {\n            return this._typeID;\n        };\n        if (typeof ops !== 'undefined' && Array.isArray(ops)) {\n            for (let i = 0; i < ops.length; i++) {\n                if (!(ops[i] instanceof ops_1.TransferableOperation)) {\n                    throw new Error(\"Error - OperationTx.constructor: invalid op in array parameter 'ops'\");\n                }\n            }\n            this.ops = ops;\n        }\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { \"ops\": this.ops.map((o) => o.serialize(encoding)) });\n    }\n    ;\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.ops = fields[\"ops\"].map((o) => {\n            let op = new ops_1.TransferableOperation();\n            op.deserialize(o, encoding);\n            return op;\n        });\n        this.numOps = buffer_1.Buffer.alloc(4);\n        this.numOps.writeUInt32BE(this.ops.length, 0);\n    }\n    /**\n     * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[OperationTx]], parses it, populates the class, and returns the length of the [[OperationTx]] in bytes.\n     *\n     * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[OperationTx]]\n     *\n     * @returns The length of the raw [[OperationTx]]\n     *\n     * @remarks assume not-checksummed\n     */\n    fromBuffer(bytes, offset = 0, codecid = constants_1.AVMConstants.LATESTCODEC) {\n        offset = super.fromBuffer(bytes, offset);\n        this.numOps = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const numOps = this.numOps.readUInt32BE(0);\n        for (let i = 0; i < numOps; i++) {\n            const op = new ops_1.TransferableOperation();\n            offset = op.fromBuffer(bytes, offset);\n            this.ops.push(op);\n        }\n        return offset;\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[OperationTx]].\n     */\n    toBuffer() {\n        this.numOps.writeUInt32BE(this.ops.length, 0);\n        let barr = [super.toBuffer(), this.numOps];\n        this.ops = this.ops.sort(ops_1.TransferableOperation.comparator());\n        for (let i = 0; i < this.ops.length; i++) {\n            barr.push(this.ops[i].toBuffer());\n        }\n        return buffer_1.Buffer.concat(barr);\n    }\n    /**\n     * Returns an array of [[TransferableOperation]]s in this transaction.\n     */\n    getOperations() {\n        return this.ops;\n    }\n    /**\n     * Takes the bytes of an [[UnsignedTx]] and returns an array of [[Credential]]s\n     *\n     * @param msg A Buffer for the [[UnsignedTx]]\n     * @param kc An [[KeyChain]] used in signing\n     *\n     * @returns An array of [[Credential]]s\n     */\n    sign(msg, kc) {\n        const sigs = super.sign(msg, kc);\n        for (let i = 0; i < this.ops.length; i++) {\n            const cred = credentials_1.SelectCredentialClass(this.ops[i].getOperation().getCredentialID());\n            const sigidxs = this.ops[i].getOperation().getSigIdxs();\n            for (let j = 0; j < sigidxs.length; j++) {\n                const keypair = kc.getKey(sigidxs[j].getSource());\n                const signval = keypair.sign(msg);\n                const sig = new credentials_2.Signature();\n                sig.fromBuffer(signval);\n                cred.addSignature(sig);\n            }\n            sigs.push(cred);\n        }\n        return sigs;\n    }\n    clone() {\n        let newbase = new OperationTx();\n        newbase.fromBuffer(this.toBuffer());\n        return newbase;\n    }\n    create(...args) {\n        return new OperationTx(...args);\n    }\n}\nexports.OperationTx = OperationTx;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\n/**\n * @packageDocumentation\n * @module API-EVM\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EVMAPI = void 0;\nconst buffer_1 = require(\"buffer/\");\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst jrpcapi_1 = require(\"../../common/jrpcapi\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst utxos_1 = require(\"./utxos\");\nconst keychain_1 = require(\"./keychain\");\nconst constants_1 = require(\"../../utils/constants\");\nconst tx_1 = require(\"./tx\");\nconst constants_2 = require(\"./constants\");\nconst inputs_1 = require(\"./inputs\");\nconst outputs_1 = require(\"./outputs\");\nconst exporttx_1 = require(\"./exporttx\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\n/**\n * Class for interacting with a node's EVMAPI\n *\n * @category RPCAPIs\n *\n * @remarks This extends the [[JRPCAPI]] class. This class should not be directly called. Instead, use the [[Avalanche.addAPI]] function to register this interface with Avalanche.\n */\nclass EVMAPI extends jrpcapi_1.JRPCAPI {\n    /**\n     * This class should not be instantiated directly.\n     * Instead use the [[Avalanche.addAPI]] method.\n     *\n     * @param core A reference to the Avalanche class\n     * @param baseurl Defaults to the string \"/ext/bc/C/avax\" as the path to blockchain's baseurl\n     * @param blockchainID The Blockchain's ID. Defaults to an empty string: ''\n     */\n    constructor(core, baseurl = '/ext/bc/C/avax', blockchainID = '') {\n        super(core, baseurl);\n        /**\n         * @ignore\n         */\n        this.keychain = new keychain_1.KeyChain('', '');\n        this.blockchainID = '';\n        this.blockchainAlias = undefined;\n        this.AVAXAssetID = undefined;\n        this.txFee = undefined;\n        /**\n         * Gets the alias for the blockchainID if it exists, otherwise returns `undefined`.\n         *\n         * @returns The alias for the blockchainID\n         */\n        this.getBlockchainAlias = () => {\n            if (typeof this.blockchainAlias === \"undefined\") {\n                const netID = this.core.getNetworkID();\n                if (netID in constants_1.Defaults.network && this.blockchainID in constants_1.Defaults.network[netID]) {\n                    this.blockchainAlias = constants_1.Defaults.network[netID][this.blockchainID].alias;\n                    return this.blockchainAlias;\n                }\n                else {\n                    /* istanbul ignore next */\n                    return undefined;\n                }\n            }\n            return this.blockchainAlias;\n        };\n        /**\n         * Sets the alias for the blockchainID.\n         *\n         * @param alias The alias for the blockchainID.\n         *\n         */\n        this.setBlockchainAlias = (alias) => {\n            this.blockchainAlias = alias;\n            /* istanbul ignore next */\n            return undefined;\n        };\n        /**\n         * Gets the blockchainID and returns it.\n         *\n         * @returns The blockchainID\n         */\n        this.getBlockchainID = () => this.blockchainID;\n        /**\n         * Refresh blockchainID, and if a blockchainID is passed in, use that.\n         *\n         * @param Optional. BlockchainID to assign, if none, uses the default based on networkID.\n         *\n         * @returns A boolean if the blockchainID was successfully refreshed.\n         */\n        this.refreshBlockchainID = (blockchainID = undefined) => {\n            const netID = this.core.getNetworkID();\n            if (typeof blockchainID === 'undefined' && typeof constants_1.Defaults.network[netID] !== \"undefined\") {\n                this.blockchainID = constants_1.Defaults.network[netID].C.blockchainID; //default to C-Chain\n                return true;\n            }\n            if (typeof blockchainID === 'string') {\n                this.blockchainID = blockchainID;\n                return true;\n            }\n            return false;\n        };\n        /**\n         * Takes an address string and returns its {@link https://github.com/feross/buffer|Buffer} representation if valid.\n         *\n         * @returns A {@link https://github.com/feross/buffer|Buffer} for the address if valid, undefined if not valid.\n         */\n        this.parseAddress = (addr) => {\n            const alias = this.getBlockchainAlias();\n            const blockchainID = this.getBlockchainID();\n            return bintools.parseAddress(addr, blockchainID, alias, constants_2.EVMConstants.ADDRESSLENGTH);\n        };\n        this.addressFromBuffer = (address) => {\n            const chainID = this.getBlockchainAlias() ? this.getBlockchainAlias() : this.getBlockchainID();\n            return bintools.addressToString(this.core.getHRP(), chainID, address);\n        };\n        /**\n           * Retrieves an assets name and symbol.\n           *\n           * @param assetID Either a {@link https://github.com/feross/buffer|Buffer} or an b58 serialized string for the AssetID or its alias.\n           *\n           * @returns Returns a Promise<Asset> with keys \"name\", \"symbol\", \"assetID\" and \"denomination\".\n           */\n        this.getAssetDescription = (assetID) => __awaiter(this, void 0, void 0, function* () {\n            let asset;\n            if (typeof assetID !== 'string') {\n                asset = bintools.cb58Encode(assetID);\n            }\n            else {\n                asset = assetID;\n            }\n            const params = {\n                assetID: asset,\n            };\n            const tmpBaseURL = this.getBaseURL();\n            // set base url to get asset description\n            this.setBaseURL(\"/ext/bc/X\");\n            const response = yield this.callMethod('avm.getAssetDescription', params);\n            // set base url back what it originally was\n            this.setBaseURL(tmpBaseURL);\n            return {\n                name: response.data.result.name,\n                symbol: response.data.result.symbol,\n                assetID: bintools.cb58Decode(response.data.result.assetID),\n                denomination: parseInt(response.data.result.denomination, 10),\n            };\n        });\n        /**\n         * Fetches the AVAX AssetID and returns it in a Promise.\n         *\n         * @param refresh This function caches the response. Refresh = true will bust the cache.\n         *\n         * @returns The the provided string representing the AVAX AssetID\n         */\n        this.getAVAXAssetID = (refresh = false) => __awaiter(this, void 0, void 0, function* () {\n            if (typeof this.AVAXAssetID === 'undefined' || refresh) {\n                const asset = yield this.getAssetDescription(constants_1.PrimaryAssetAlias);\n                this.AVAXAssetID = asset.assetID;\n            }\n            return this.AVAXAssetID;\n        });\n        /**\n         * Overrides the defaults and sets the cache to a specific AVAX AssetID\n         *\n         * @param avaxAssetID A cb58 string or Buffer representing the AVAX AssetID\n         *\n         * @returns The the provided string representing the AVAX AssetID\n         */\n        this.setAVAXAssetID = (avaxAssetID) => {\n            if (typeof avaxAssetID === \"string\") {\n                avaxAssetID = bintools.cb58Decode(avaxAssetID);\n            }\n            this.AVAXAssetID = avaxAssetID;\n        };\n        /**\n         * Gets the default tx fee for this chain.\n         *\n         * @returns The default tx fee as a {@link https://github.com/indutny/bn.js/|BN}\n         */\n        this.getDefaultTxFee = () => {\n            return this.core.getNetworkID() in constants_1.Defaults.network ? new bn_js_1.default(constants_1.Defaults.network[this.core.getNetworkID()][\"C\"][\"txFee\"]) : new bn_js_1.default(0);\n        };\n        /**\n         * Gets the tx fee for this chain.\n         *\n         * @returns The tx fee as a {@link https://github.com/indutny/bn.js/|BN}\n         */\n        this.getTxFee = () => {\n            if (typeof this.txFee === \"undefined\") {\n                this.txFee = this.getDefaultTxFee();\n            }\n            return this.txFee;\n        };\n        /**\n         * Send ANT (Avalanche Native Token) assets including AVAX from the C-Chain to an account on the X-Chain.\n          *\n          * After calling this method, you must call the X-Chain’s import method to complete the transfer.\n          *\n          * @param username The Keystore user that controls the X-Chain account specified in `to`\n          * @param password The password of the Keystore user\n          * @param to The account on the X-Chain to send the AVAX to.\n          * @param amount Amount of asset to export as a {@link https://github.com/indutny/bn.js/|BN}\n          * @param assetID The asset id which is being sent\n          *\n          * @returns String representing the transaction id\n          */\n        this.export = (username, password, to, amount, assetID) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                to,\n                amount: amount.toString(10),\n                username,\n                password,\n                assetID\n            };\n            return this.callMethod('avax.export', params).then((response) => response.data.result.txID);\n        });\n        /**\n         * Send AVAX from the C-Chain to an account on the X-Chain.\n          *\n          * After calling this method, you must call the X-Chain’s importAVAX method to complete the transfer.\n          *\n          * @param username The Keystore user that controls the X-Chain account specified in `to`\n          * @param password The password of the Keystore user\n          * @param to The account on the X-Chain to send the AVAX to.\n          * @param amount Amount of AVAX to export as a {@link https://github.com/indutny/bn.js/|BN}\n          *\n          * @returns String representing the transaction id\n          */\n        this.exportAVAX = (username, password, to, amount) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                to,\n                amount: amount.toString(10),\n                username,\n                password,\n            };\n            return this.callMethod('avax.exportAVAX', params).then((response) => response.data.result.txID);\n        });\n        /**\n         * Retrieves the UTXOs related to the addresses provided from the node's `getUTXOs` method.\n         *\n         * @param addresses An array of addresses as cb58 strings or addresses as {@link https://github.com/feross/buffer|Buffer}s\n         * @param sourceChain A string for the chain to look for the UTXO's. Default is to use this chain, but if exported UTXOs exist\n         * from other chains, this can used to pull them instead.\n         * @param limit Optional. Returns at most [limit] addresses. If [limit] == 0 or > [maxUTXOsToFetch], fetches up to [maxUTXOsToFetch].\n         * @param startIndex Optional. [StartIndex] defines where to start fetching UTXOs (for pagination.)\n         * UTXOs fetched are from addresses equal to or greater than [StartIndex.Address]\n         * For address [StartIndex.Address], only UTXOs with IDs greater than [StartIndex.Utxo] will be returned.\n         */\n        this.getUTXOs = (addresses, sourceChain = undefined, limit = 0, startIndex = undefined) => __awaiter(this, void 0, void 0, function* () {\n            if (typeof addresses === \"string\") {\n                addresses = [addresses];\n            }\n            const params = {\n                addresses: addresses,\n                limit\n            };\n            if (typeof startIndex !== \"undefined\" && startIndex) {\n                params.startIndex = startIndex;\n            }\n            if (typeof sourceChain !== \"undefined\") {\n                params.sourceChain = sourceChain;\n            }\n            return this.callMethod('avax.getUTXOs', params).then((response) => {\n                const utxos = new utxos_1.UTXOSet();\n                let data = response.data.result.utxos;\n                utxos.addArray(data, false);\n                response.data.result.utxos = utxos;\n                return response.data.result;\n            });\n        });\n        /**\n         * Send ANT (Avalanche Native Token) assets including AVAX from an account on the X-Chain to an address on the C-Chain. This transaction\n         * must be signed with the key of the account that the asset is sent from and which pays\n         * the transaction fee.\n         *\n         * @param username The Keystore user that controls the account specified in `to`\n         * @param password The password of the Keystore user\n         * @param to The address of the account the asset is sent to.\n         * @param sourceChain The chainID where the funds are coming from. Ex: \"X\"\n         *\n         * @returns Promise for a string for the transaction, which should be sent to the network\n         * by calling issueTx.\n         */\n        this.import = (username, password, to, sourceChain) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                to,\n                sourceChain,\n                username,\n                password,\n            };\n            return this.callMethod('avax.import', params)\n                .then((response) => response.data.result.txID);\n        });\n        /**\n         * Send AVAX from an account on the X-Chain to an address on the C-Chain. This transaction\n         * must be signed with the key of the account that the AVAX is sent from and which pays\n         * the transaction fee.\n         *\n         * @param username The Keystore user that controls the account specified in `to`\n         * @param password The password of the Keystore user\n         * @param to The address of the account the AVAX is sent to. This must be the same as the to\n         * argument in the corresponding call to the X-Chain’s exportAVAX\n         * @param sourceChain The chainID where the funds are coming from.\n         *\n         * @returns Promise for a string for the transaction, which should be sent to the network\n         * by calling issueTx.\n         */\n        this.importAVAX = (username, password, to, sourceChain) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                to,\n                sourceChain,\n                username,\n                password,\n            };\n            return this.callMethod('avax.importAVAX', params)\n                .then((response) => response.data.result.txID);\n        });\n        /**\n         * Give a user control over an address by providing the private key that controls the address.\n         *\n         * @param username The name of the user to store the private key\n         * @param password The password that unlocks the user\n         * @param privateKey A string representing the private key in the vm's format\n         *\n         * @returns The address for the imported private key.\n         */\n        this.importKey = (username, password, privateKey) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password,\n                privateKey,\n            };\n            return this.callMethod('avax.importKey', params).then((response) => response.data.result.address);\n        });\n        /**\n         * Calls the node's issueTx method from the API and returns the resulting transaction ID as a string.\n         *\n         * @param tx A string, {@link https://github.com/feross/buffer|Buffer}, or [[Tx]] representing a transaction\n         *\n         * @returns A Promise<string> representing the transaction ID of the posted transaction.\n         */\n        this.issueTx = (tx) => __awaiter(this, void 0, void 0, function* () {\n            let Transaction = '';\n            if (typeof tx === 'string') {\n                Transaction = tx;\n            }\n            else if (tx instanceof buffer_1.Buffer) {\n                const txobj = new tx_1.Tx();\n                txobj.fromBuffer(tx);\n                Transaction = txobj.toString();\n            }\n            else if (tx instanceof tx_1.Tx) {\n                Transaction = tx.toString();\n            }\n            else {\n                /* istanbul ignore next */\n                throw new Error('Error - avax.issueTx: provided tx is not expected type of string, Buffer, or Tx');\n            }\n            const params = {\n                tx: Transaction.toString(),\n            };\n            return this.callMethod('avax.issueTx', params).then((response) => response.data.result.txID);\n        });\n        /**\n         * Exports the private key for an address.\n         *\n         * @param username The name of the user with the private key\n         * @param password The password used to decrypt the private key\n         * @param address The address whose private key should be exported\n         *\n         * @returns Promise with the decrypted private key as store in the database\n         */\n        this.exportKey = (username, password, address) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password,\n                address,\n            };\n            return this.callMethod('avax.exportKey', params).then((response) => response.data.result.privateKey);\n        });\n        /**\n         * Helper function which creates an unsigned Import Tx. For more granular control, you may create your own\n         * [[UnsignedTx]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s).\n         *\n         * @param utxoset A set of UTXOs that the transaction is built on\n         * @param toAddress The address to send the funds\n         * @param ownerAddresses The addresses being used to import\n         * @param sourceChain The chainid for where the import is coming from\n         * @param fromAddresses The addresses being used to send the funds from the UTXOs provided\n         *\n         * @returns An unsigned transaction ([[UnsignedTx]]) which contains a [[ImportTx]].\n         *\n         * @remarks\n         * This helper exists because the endpoint API should be the primary point of entry for most functionality.\n         */\n        this.buildImportTx = (utxoset, toAddress, ownerAddresses, sourceChain, fromAddresses) => __awaiter(this, void 0, void 0, function* () {\n            const from = this._cleanAddressArray(fromAddresses, 'buildImportTx').map((a) => bintools.stringToAddress(a));\n            let srcChain = undefined;\n            if (typeof sourceChain === \"string\") {\n                // if there is a sourceChain passed in and it's a string then save the string value and cast the original\n                // variable from a string to a Buffer\n                srcChain = sourceChain;\n                sourceChain = bintools.cb58Decode(sourceChain);\n            }\n            else if (typeof sourceChain === \"undefined\" || !(sourceChain instanceof buffer_1.Buffer)) {\n                // if there is no sourceChain passed in or the sourceChain is any data type other than a Buffer then throw an error\n                throw new Error('Error - EVMAPI.buildImportTx: sourceChain is undefined or invalid sourceChain type.');\n            }\n            const utxoResponse = yield this.getUTXOs(ownerAddresses, srcChain, 0, undefined);\n            const atomicUTXOs = utxoResponse.utxos;\n            const avaxAssetID = yield this.getAVAXAssetID();\n            const atomics = atomicUTXOs.getAllUTXOs();\n            if (atomics.length === 0) {\n                throw new Error(`Error - EVMAPI.buildImportTx: no atomic utxos to import from ${srcChain} using addresses: ${ownerAddresses.join(', ')}`);\n            }\n            const builtUnsignedTx = utxoset.buildImportTx(this.core.getNetworkID(), bintools.cb58Decode(this.blockchainID), [toAddress], from, atomics, sourceChain, this.getTxFee(), avaxAssetID);\n            return builtUnsignedTx;\n        });\n        /**\n         * Helper function which creates an unsigned Export Tx. For more granular control, you may create your own\n         * [[UnsignedTx]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s).\n         *\n         * @param amount The amount being exported as a {@link https://github.com/indutny/bn.js/|BN}\n         * @param assetID The asset id which is being sent\n         * @param destinationChain The chainid for where the assets will be sent.\n         * @param toAddresses The addresses to send the funds\n         * @param fromAddresses The addresses being used to send the funds from the UTXOs provided\n         * @param changeAddresses The addresses that can spend the change remaining from the spent UTXOs\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         * @param locktime Optional. The locktime field created in the resulting outputs\n         * @param threshold Optional. The number of signatures required to spend the funds in the resultant UTXO\n         *\n         * @returns An unsigned transaction ([[UnsignedTx]]) which contains an [[ExportTx]].\n         */\n        this.buildExportTx = (amount, assetID, destinationChain, fromAddressHex, fromAddressBech, toAddresses, nonce = 0, locktime = new bn_js_1.default(0), threshold = 1) => __awaiter(this, void 0, void 0, function* () {\n            let prefixes = {};\n            toAddresses.map((address) => {\n                prefixes[address.split(\"-\")[0]] = true;\n            });\n            if (Object.keys(prefixes).length !== 1) {\n                throw new Error(\"Error - EVMAPI.buildExportTx: To addresses must have the same chainID prefix.\");\n            }\n            if (typeof destinationChain === \"undefined\") {\n                throw new Error(\"Error - EVMAPI.buildExportTx: Destination ChainID is undefined.\");\n            }\n            else if (typeof destinationChain === \"string\") {\n                destinationChain = bintools.cb58Decode(destinationChain);\n            }\n            else if (!(destinationChain instanceof buffer_1.Buffer)) {\n                throw new Error(`Error - EVMAPI.buildExportTx: Invalid destinationChain type: ${typeof destinationChain}`);\n            }\n            if (destinationChain.length !== 32) {\n                throw new Error(\"Error - EVMAPI.buildExportTx: Destination ChainID must be 32 bytes in length.\");\n            }\n            const fee = this.getTxFee();\n            const assetDescription = yield this.getAssetDescription(\"AVAX\");\n            const evmInputs = [];\n            if (bintools.cb58Encode(assetDescription.assetID) === assetID) {\n                const evmInput = new inputs_1.EVMInput(fromAddressHex, amount.add(fee), assetID, nonce);\n                evmInput.addSignatureIdx(0, bintools.stringToAddress(fromAddressBech));\n                evmInputs.push(evmInput);\n            }\n            else {\n                // if asset id isn't AVAX asset id then create 2 inputs\n                // first input will be AVAX and will be for the amount of the fee\n                // second input will be the ANT\n                const evmAVAXInput = new inputs_1.EVMInput(fromAddressHex, fee, assetDescription.assetID, nonce);\n                evmAVAXInput.addSignatureIdx(0, bintools.stringToAddress(fromAddressBech));\n                evmInputs.push(evmAVAXInput);\n                const evmANTInput = new inputs_1.EVMInput(fromAddressHex, amount, assetID, nonce);\n                evmANTInput.addSignatureIdx(0, bintools.stringToAddress(fromAddressBech));\n                evmInputs.push(evmANTInput);\n            }\n            const to = [];\n            toAddresses.map((address) => {\n                to.push(bintools.stringToAddress(address));\n            });\n            let exportedOuts = [];\n            const secpTransferOutput = new outputs_1.SECPTransferOutput(amount, to, locktime, threshold);\n            const transferableOutput = new outputs_1.TransferableOutput(bintools.cb58Decode(assetID), secpTransferOutput);\n            exportedOuts.push(transferableOutput);\n            // lexicographically sort array\n            exportedOuts = exportedOuts.sort(outputs_1.TransferableOutput.comparator());\n            const exportTx = new exporttx_1.ExportTx(this.core.getNetworkID(), bintools.cb58Decode(this.blockchainID), destinationChain, evmInputs, exportedOuts);\n            const unsignedTx = new tx_1.UnsignedTx(exportTx);\n            return unsignedTx;\n        });\n        /**\n         * Gets a reference to the keychain for this class.\n         *\n         * @returns The instance of [[KeyChain]] for this class\n         */\n        this.keyChain = () => this.keychain;\n        this.blockchainID = blockchainID;\n        const netID = core.getNetworkID();\n        if (netID in constants_1.Defaults.network && blockchainID in constants_1.Defaults.network[netID]) {\n            const { alias } = constants_1.Defaults.network[netID][blockchainID];\n            this.keychain = new keychain_1.KeyChain(this.core.getHRP(), alias);\n        }\n        else {\n            this.keychain = new keychain_1.KeyChain(this.core.getHRP(), blockchainID);\n        }\n    }\n    /**\n     * @ignore\n     */\n    _cleanAddressArray(addresses, caller) {\n        const addrs = [];\n        const chainid = this.getBlockchainAlias() ? this.getBlockchainAlias() : this.getBlockchainID();\n        if (addresses && addresses.length > 0) {\n            addresses.forEach((address) => {\n                if (typeof address === 'string') {\n                    if (typeof this.parseAddress(address) === 'undefined') {\n                        /* istanbul ignore next */\n                        throw new Error(`Error - EVMAPI.${caller}: Invalid address format ${address}`);\n                    }\n                    addrs.push(address);\n                }\n                else {\n                    addrs.push(bintools.addressToString(this.core.getHRP(), chainid, address));\n                }\n            });\n        }\n        return addrs;\n    }\n}\nexports.EVMAPI = EVMAPI;\n//# sourceMappingURL=data:application/json;base64,","'use strict';\n\nconst decoders = exports;\n\ndecoders.der = require('./der');\ndecoders.pem = require('./pem');\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Tx = exports.UnsignedTx = exports.SelectTxClass = void 0;\n/**\n * @packageDocumentation\n * @module API-AVM-Transactions\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst credentials_1 = require(\"./credentials\");\nconst tx_1 = require(\"../../common/tx\");\nconst create_hash_1 = __importDefault(require(\"create-hash\"));\nconst basetx_1 = require(\"./basetx\");\nconst createassettx_1 = require(\"./createassettx\");\nconst operationtx_1 = require(\"./operationtx\");\nconst importtx_1 = require(\"./importtx\");\nconst exporttx_1 = require(\"./exporttx\");\nconst serialization_1 = require(\"../../utils/serialization\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serializer = serialization_1.Serialization.getInstance();\n/**\n * Takes a buffer representing the output and returns the proper [[BaseTx]] instance.\n *\n * @param txtype The id of the transaction type\n *\n * @returns An instance of an [[BaseTx]]-extended class.\n */\nexports.SelectTxClass = (txtype, ...args) => {\n    if (txtype === constants_1.AVMConstants.BASETX) {\n        return new basetx_1.BaseTx(...args);\n    }\n    else if (txtype === constants_1.AVMConstants.CREATEASSETTX) {\n        return new createassettx_1.CreateAssetTx(...args);\n    }\n    else if (txtype === constants_1.AVMConstants.OPERATIONTX) {\n        return new operationtx_1.OperationTx(...args);\n    }\n    else if (txtype === constants_1.AVMConstants.IMPORTTX) {\n        return new importtx_1.ImportTx(...args);\n    }\n    else if (txtype === constants_1.AVMConstants.EXPORTTX) {\n        return new exporttx_1.ExportTx(...args);\n    }\n    /* istanbul ignore next */\n    throw new Error(`Error - SelectTxClass: unknown txtype ${txtype}`);\n};\nclass UnsignedTx extends tx_1.StandardUnsignedTx {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"UnsignedTx\";\n        this._typeID = undefined;\n    }\n    //serialize is inherited\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.transaction = exports.SelectTxClass(fields[\"transaction\"][\"_typeID\"]);\n        this.transaction.deserialize(fields[\"transaction\"], encoding);\n    }\n    getTransaction() {\n        return this.transaction;\n    }\n    fromBuffer(bytes, offset = 0) {\n        this.codecid = bintools.copyFrom(bytes, offset, offset + 2).readUInt16BE(0);\n        offset += 2;\n        const txtype = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);\n        offset += 4;\n        this.transaction = exports.SelectTxClass(txtype);\n        return this.transaction.fromBuffer(bytes, offset);\n    }\n    /**\n     * Signs this [[UnsignedTx]] and returns signed [[StandardTx]]\n     *\n     * @param kc An [[KeyChain]] used in signing\n     *\n     * @returns A signed [[StandardTx]]\n     */\n    sign(kc) {\n        const txbuff = this.toBuffer();\n        const msg = buffer_1.Buffer.from(create_hash_1.default('sha256').update(txbuff).digest());\n        const sigs = this.transaction.sign(msg, kc);\n        return new Tx(this, sigs);\n    }\n}\nexports.UnsignedTx = UnsignedTx;\nclass Tx extends tx_1.StandardTx {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"Tx\";\n        this._typeID = undefined;\n    }\n    //serialize is inherited\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.unsignedTx = new UnsignedTx();\n        this.unsignedTx.deserialize(fields[\"unsignedTx\"], encoding);\n        this.credentials = [];\n        for (let i = 0; i < fields[\"credentials\"].length; i++) {\n            const cred = credentials_1.SelectCredentialClass(fields[\"credentials\"][i][\"_typeID\"]);\n            cred.deserialize(fields[\"credentials\"][i], encoding);\n            this.credentials.push(cred);\n        }\n    }\n    /**\n     * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[Tx]], parses it, populates the class, and returns the length of the Tx in bytes.\n     *\n     * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[Tx]]\n     * @param offset A number representing the starting point of the bytes to begin parsing\n     *\n     * @returns The length of the raw [[Tx]]\n     */\n    fromBuffer(bytes, offset = 0) {\n        this.unsignedTx = new UnsignedTx();\n        offset = this.unsignedTx.fromBuffer(bytes, offset);\n        const numcreds = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);\n        offset += 4;\n        this.credentials = [];\n        for (let i = 0; i < numcreds; i++) {\n            const credid = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);\n            offset += 4;\n            const cred = credentials_1.SelectCredentialClass(credid);\n            offset = cred.fromBuffer(bytes, offset);\n            this.credentials.push(cred);\n        }\n        return offset;\n    }\n}\nexports.Tx = Tx;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\n/**\n * @packageDocumentation\n * @module API-EVM-Transactions\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Tx = exports.UnsignedTx = exports.SelectTxClass = void 0;\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst credentials_1 = require(\"./credentials\");\nconst evmtx_1 = require(\"../../common/evmtx\");\nconst create_hash_1 = __importDefault(require(\"create-hash\"));\nconst importtx_1 = require(\"./importtx\");\nconst exporttx_1 = require(\"./exporttx\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\n/**\n * Takes a buffer representing the output and returns the proper [[EVMBaseTx]] instance.\n *\n * @param txTypeID The id of the transaction type\n *\n * @returns An instance of an [[EVMBaseTx]]-extended class.\n */\nexports.SelectTxClass = (txTypeID, ...args) => {\n    if (txTypeID === constants_1.EVMConstants.IMPORTTX) {\n        return new importtx_1.ImportTx(...args);\n    }\n    else if (txTypeID === constants_1.EVMConstants.EXPORTTX) {\n        return new exporttx_1.ExportTx(...args);\n    }\n    /* istanbul ignore next */\n    throw new Error(`Error - SelectTxClass: unknown txType ${txTypeID}`);\n};\nclass UnsignedTx extends evmtx_1.EVMStandardUnsignedTx {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"UnsignedTx\";\n        this._typeID = undefined;\n    }\n    //serialize is inherited\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.transaction = exports.SelectTxClass(fields[\"transaction\"][\"_typeID\"]);\n        this.transaction.deserialize(fields[\"transaction\"], encoding);\n    }\n    getTransaction() {\n        return this.transaction;\n    }\n    fromBuffer(bytes, offset = 0) {\n        this.codecid = bintools.copyFrom(bytes, offset, offset + 2).readUInt16BE(0);\n        offset += 2;\n        const txtype = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);\n        offset += 4;\n        this.transaction = exports.SelectTxClass(txtype);\n        return this.transaction.fromBuffer(bytes, offset);\n    }\n    /**\n     * Signs this [[UnsignedTx]] and returns signed [[StandardTx]]\n     *\n     * @param kc An [[KeyChain]] used in signing\n     *\n     * @returns A signed [[StandardTx]]\n     */\n    sign(kc) {\n        const txbuff = this.toBuffer();\n        const msg = buffer_1.Buffer.from(create_hash_1.default('sha256').update(txbuff).digest());\n        const sigs = this.transaction.sign(msg, kc);\n        return new Tx(this, sigs);\n    }\n}\nexports.UnsignedTx = UnsignedTx;\nclass Tx extends evmtx_1.EVMStandardTx {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"Tx\";\n        this._typeID = undefined;\n    }\n    //serialize is inherited\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.unsignedTx = new UnsignedTx();\n        this.unsignedTx.deserialize(fields[\"unsignedTx\"], encoding);\n        this.credentials = [];\n        for (let i = 0; i < fields[\"credentials\"].length; i++) {\n            const cred = credentials_1.SelectCredentialClass(fields[\"credentials\"][i][\"_typeID\"]);\n            cred.deserialize(fields[\"credentials\"][i], encoding);\n            this.credentials.push(cred);\n        }\n    }\n    /**\n     * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[Tx]], parses it,\n     * populates the class, and returns the length of the Tx in bytes.\n     *\n     * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[Tx]]\n     * @param offset A number representing the starting point of the bytes to begin parsing\n     *\n     * @returns The length of the raw [[Tx]]\n     */\n    fromBuffer(bytes, offset = 0) {\n        this.unsignedTx = new UnsignedTx();\n        offset = this.unsignedTx.fromBuffer(bytes, offset);\n        const numcreds = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);\n        offset += 4;\n        this.credentials = [];\n        for (let i = 0; i < numcreds; i++) {\n            const credid = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);\n            offset += 4;\n            const cred = credentials_1.SelectCredentialClass(credid);\n            offset = cred.fromBuffer(bytes, offset);\n            this.credentials.push(cred);\n        }\n        return offset;\n    }\n}\nexports.Tx = Tx;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpcy9ldm0vdHgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7R0FHRzs7Ozs7O0FBRUgsb0NBQWlDO0FBQ2pDLG9FQUE0QztBQUM1QywyQ0FBMkM7QUFDM0MsK0NBQXNEO0FBR3RELDhDQUc0QjtBQUM1Qiw4REFBcUM7QUFFckMseUNBQXNDO0FBQ3RDLHlDQUFzQztBQUd0Qzs7R0FFRztBQUNILE1BQU0sUUFBUSxHQUFhLGtCQUFRLENBQUMsV0FBVyxFQUFFLENBQUM7QUFFbEQ7Ozs7OztHQU1HO0FBQ1UsUUFBQSxhQUFhLEdBQUcsQ0FBQyxRQUFnQixFQUFFLEdBQUcsSUFBVyxFQUFhLEVBQUU7SUFDM0UsSUFBSSxRQUFRLEtBQUssd0JBQVksQ0FBQyxRQUFRLEVBQUU7UUFDdEMsT0FBTyxJQUFJLG1CQUFRLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQztLQUM5QjtTQUFNLElBQUksUUFBUSxLQUFLLHdCQUFZLENBQUMsUUFBUSxFQUFFO1FBQzdDLE9BQU8sSUFBSSxtQkFBUSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUM7S0FDOUI7SUFDRCwwQkFBMEI7SUFDMUIsTUFBTSxJQUFJLEtBQUssQ0FBQyx5Q0FBeUMsUUFBUSxFQUFFLENBQUMsQ0FBQztBQUN2RSxDQUFDLENBQUM7QUFFRixNQUFhLFVBQVcsU0FBUSw2QkFBbUQ7SUFBbkY7O1FBQ1ksY0FBUyxHQUFHLFlBQVksQ0FBQztRQUN6QixZQUFPLEdBQUcsU0FBUyxDQUFDO0lBb0NoQyxDQUFDO0lBbENDLHdCQUF3QjtJQUV4QixXQUFXLENBQUMsTUFBYyxFQUFFLFdBQStCLEtBQUs7UUFDOUQsS0FBSyxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDcEMsSUFBSSxDQUFDLFdBQVcsR0FBRyxxQkFBYSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQyxTQUFTLENB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LENBQUM7UUFDbkQsTUFBTSxRQUFRLEdBQVcsUUFBUSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEYsTUFBTSxJQUFJLENBQUMsQ0FBQztRQUNaLElBQUksQ0FBQyxXQUFXLEdBQUcsRUFBRSxDQUFDO1FBQ3RCLEtBQUssSUFBSSxDQUFDLEdBQVcsQ0FBQyxFQUFFLENBQUMsR0FBRyxRQUFRLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDekMsTUFBTSxNQUFNLEdBQVcsUUFBUSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDcEYsTUFBTSxJQUFJLENBQUMsQ0FBQztZQUNaLE1BQU0sSUFBSSxHQUFlLG1DQUFxQixDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3ZELE1BQU0sR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztZQUN4QyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUM3QjtRQUNELE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7Q0FFRjtBQTNDRCxnQkEyQ0MiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBwYWNrYWdlRG9jdW1lbnRhdGlvblxuICogQG1vZHVsZSBBUEktRVZNLVRyYW5zYWN0aW9uc1xuICovXG5cbmltcG9ydCB7IEJ1ZmZlciB9IGZyb20gJ2J1ZmZlci8nO1xuaW1wb3J0IEJpblRvb2xzIGZyb20gJy4uLy4uL3V0aWxzL2JpbnRvb2xzJztcbmltcG9ydCB7IEVWTUNvbnN0YW50cyB9IGZyb20gJy4vY29uc3RhbnRzJztcbmltcG9ydCB7IFNlbGVjdENyZWRlbnRpYWxDbGFzcyB9IGZyb20gJy4vY3JlZGVudGlhbHMnO1xuaW1wb3J0IHsgS2V5Q2hhaW4sIEtleVBhaXIgfSBmcm9tICcuL2tleWNoYWluJztcbmltcG9ydCB7IENyZWRlbnRpYWwgfSBmcm9tICcuLi8uLi9jb21tb24vY3JlZGVudGlhbHMnO1xuaW1wb3J0IHsgXG4gIEVWTVN0YW5kYXJkVHgsIFxuICBFVk1TdGFuZGFyZFVuc2lnbmVkVHggXG59IGZyb20gJy4uLy4uL2NvbW1vbi9ldm10eCc7XG5pbXBvcnQgY3JlYXRlSGFzaCBmcm9tICdjcmVhdGUtaGFzaCc7XG5pbXBvcnQgeyBFVk1CYXNlVHggfSBmcm9tICcuL2Jhc2V0eCc7XG5pbXBvcnQgeyBJbXBvcnRUeCB9IGZyb20gJy4vaW1wb3J0dHgnO1xuaW1wb3J0IHsgRXhwb3J0VHggfSBmcm9tICcuL2V4cG9ydHR4JztcbmltcG9ydCB7IFNlcmlhbGl6ZWRFbmNvZGluZyB9IGZyb20gJy4uLy4uL3V0aWxzL3NlcmlhbGl6YXRpb24nO1xuXG4vKipcbiAqIEBpZ25vcmVcbiAqL1xuY29uc3QgYmludG9vbHM6IEJpblRvb2xzID0gQmluVG9vbHMuZ2V0SW5zdGFuY2UoKTtcblxuLyoqXG4gKiBUYWtlcyBhIGJ1ZmZlciByZXByZXNlbnRpbmcgdGhlIG91dHB1dCBhbmQgcmV0dXJucyB0aGUgcHJvcGVyIFtbRVZNQmFzZVR4XV0gaW5zdGFuY2UuXG4gKlxuICogQHBhcmFtIHR4VHlwZUlEIFRoZSBpZCBvZiB0aGUgdHJhbnNhY3Rpb24gdHlwZVxuICpcbiAqIEByZXR1cm5zIEFuIGluc3RhbmNlIG9mIGFuIFtbRVZNQmFzZVR4XV0tZXh0ZW5kZWQgY2xhc3MuXG4gKi9cbmV4cG9ydCBjb25zdCBTZWxlY3RUeENsYXNzID0gKHR4VHlwZUlEOiBudW1iZXIsIC4uLmFyZ3M6IGFueVtdKTogRVZNQmFzZVR4ID0+IHtcbiAgaWYgKHR4VHlwZUlEID09PSBFVk1Db25zdGFudHMuSU1QT1JUVFgpIHtcbiAgICByZXR1cm4gbmV3IEltcG9ydFR4KC4uLmFyZ3MpO1xuICB9IGVsc2UgaWYgKHR4VHlwZUlEID09PSBFVk1Db25zdGFudHMuRVhQT1JUVFgpIHtcbiAgICByZXR1cm4gbmV3IEV4cG9ydFR4KC4uLmFyZ3MpO1xuICB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIHRocm93IG5ldyBFcnJvcihgRXJyb3IgLSBTZWxlY3RUeENsYXNzOiB1bmtub3duIHR4VHlwZSAke3R4VHlwZUlEfWApO1xufTtcblxuZXhwb3J0IGNsYXNzIFVuc2lnbmVkVHggZXh0ZW5kcyBFVk1TdGFuZGFyZFVuc2lnbmVkVHg8S2V5UGFpciwgS2V5Q2hhaW4sIEVWTUJhc2VUeD4ge1xuICBwcm90ZWN0ZWQgX3R5cGVOYW1lID0gXCJVbnNpZ25lZFR4XCI7XG4gIHByb3RlY3RlZCBfdHlwZUlEID0gdW5kZWZpbmVkO1xuXG4gIC8vc2VyaWFsaXplIGlzIGluaGVyaXRlZFxuXG4gIGRlc2VyaWFsaXplKGZpZWxkczogb2JqZWN0LCBlbmNvZGluZzogU2VyaWFsaXplZEVuY29kaW5nID0gXCJoZXhcIikge1xuICAgIHN1cGVyLmRlc2VyaWFsaXplKGZpZWxkcywgZW5jb2RpbmcpO1xuICAgIHRoaXMudHJhbnNhY3Rpb24gPSBTZWxlY3RUeENsYXNzKGZpZWxkc1tcInRyYW5zYWN0aW9uXCJdW1wiX3R5cGVJRFwiXSk7XG4gICAgdGhpcy50cmFuc2FjdGlvbi5kZXNlcmlhbGl6ZShmaWVsZHNbXCJ0cmFuc2FjdGlvblwiXSwgZW5jb2RpbmcpO1xuICB9XG5cbiAgZ2V0VHJhbnNhY3Rpb24oKTogRVZNQmFzZVR4e1xuICAgIHJldHVybiB0aGlzLnRyYW5zYWN0aW9uIGFzIEVWTUJhc2VUeDtcbiAgfVxuXG4gIGZyb21CdWZmZXIoYnl0ZXM6IEJ1ZmZlciwgb2Zmc2V0OiBudW1iZXIgPSAwKTogbnVtYmVyIHtcbiAgICB0aGlzLmNvZGVjaWQgPSBiaW50b29scy5jb3B5RnJvbShieXRlcywgb2Zmc2V0LCBvZmZzZXQgKyAyKS5yZWFkVUludDE2QkUoMCk7XG4gICAgb2Zmc2V0ICs9IDI7XG4gICAgY29uc3QgdHh0eXBlOiBudW1iZXIgPSBiaW50b29scy5jb3B5RnJvbShieXRlcywgb2Zmc2V0LCBvZmZzZXQgKyA0KS5yZWFkVUludDMyQkUoMCk7XG4gICAgb2Zmc2V0ICs9IDQ7XG4gICAgdGhpcy50cmFuc2FjdGlvbiA9IFNlbGVjdFR4Q2xhc3ModHh0eXBlKTtcbiAgICByZXR1cm4gdGhpcy50cmFuc2FjdGlvbi5mcm9tQnVmZmVyKGJ5dGVzLCBvZmZzZXQpO1xuICB9XG4gIFxuICAvKipcbiAgICogU2lnbnMgdGhpcyBbW1Vuc2lnbmVkVHhdXSBhbmQgcmV0dXJucyBzaWduZWQgW1tTdGFuZGFyZFR4XV1cbiAgICpcbiAgICogQHBhcmFtIGtjIEFuIFtbS2V5Q2hhaW5dXSB1c2VkIGluIHNpZ25pbmdcbiAgICpcbiAgICogQHJldHVybnMgQSBzaWduZWQgW1tTdGFuZGFyZFR4XV1cbiAgICovXG4gIHNpZ24oa2M6IEtleUNoYWluKTogVHgge1xuICAgIGNvbnN0IHR4YnVmZjogQnVmZmVyID0gdGhpcy50b0J1ZmZlcigpO1xuICAgIGNvbnN0IG1zZzogQnVmZmVyID0gQnVmZmVyLmZyb20oY3JlYXRlSGFzaCgnc2hhMjU2JykudXBkYXRlKHR4YnVmZikuZGlnZXN0KCkpO1xuICAgIGNvbnN0IHNpZ3M6IENyZWRlbnRpYWxbXSA9IHRoaXMudHJhbnNhY3Rpb24uc2lnbihtc2csIGtjKTtcbiAgICByZXR1cm4gbmV3IFR4KHRoaXMsIHNpZ3MpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBUeCBleHRlbmRzIEVWTVN0YW5kYXJkVHg8S2V5UGFpciwgS2V5Q2hhaW4sIFVuc2lnbmVkVHg+IHtcbiAgcHJvdGVjdGVkIF90eXBlTmFtZSA9IFwiVHhcIjtcbiAgcHJvdGVjdGVkIF90eXBlSUQgPSB1bmRlZmluZWQ7XG5cbiAgLy9zZXJpYWxpemUgaXMgaW5oZXJpdGVkXG5cbiAgZGVzZXJpYWxpemUoZmllbGRzOiBvYmplY3QsIGVuY29kaW5nOiBTZXJpYWxpemVkRW5jb2RpbmcgPSBcImhleFwiKSB7XG4gICAgc3VwZXIuZGVzZXJpYWxpemUoZmllbGRzLCBlbmNvZGluZyk7XG4gICAgdGhpcy51bnNpZ25lZFR4ID0gbmV3IFVuc2lnbmVkVHgoKTtcbiAgICB0aGlzLnVuc2lnbmVkVHguZGVzZXJpYWxpemUoZmllbGRzW1widW5zaWduZWRUeFwiXSwgZW5jb2RpbmcpO1xuICAgIHRoaXMuY3JlZGVudGlhbHMgPSBbXTtcbiAgICBmb3IobGV0IGk6IG51bWJlciA9IDA7IGkgPCBmaWVsZHNbXCJjcmVkZW50aWFsc1wiXS5sZW5ndGg7IGkrKyl7XG4gICAgICBjb25zdCBjcmVkOiBDcmVkZW50aWFsID0gU2VsZWN0Q3JlZGVudGlhbENsYXNzKGZpZWxkc1tcImNyZWRlbnRpYWxzXCJdW2ldW1wiX3R5cGVJRFwiXSk7XG4gICAgICBjcmVkLmRlc2VyaWFsaXplKGZpZWxkc1tcImNyZWRlbnRpYWxzXCJdW2ldLCBlbmNvZGluZyk7XG4gICAgICB0aGlzLmNyZWRlbnRpYWxzLnB1c2goY3JlZCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFRha2VzIGEge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyfEJ1ZmZlcn0gY29udGFpbmluZyBhbiBbW1R4XV0sIHBhcnNlcyBpdCwgXG4gICAqIHBvcHVsYXRlcyB0aGUgY2xhc3MsIGFuZCByZXR1cm5zIHRoZSBsZW5ndGggb2YgdGhlIFR4IGluIGJ5dGVzLlxuICAgKlxuICAgKiBAcGFyYW0gYnl0ZXMgQSB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXJ8QnVmZmVyfSBjb250YWluaW5nIGEgcmF3IFtbVHhdXVxuICAgKiBAcGFyYW0gb2Zmc2V0IEEgbnVtYmVyIHJlcHJlc2VudGluZyB0aGUgc3RhcnRpbmcgcG9pbnQgb2YgdGhlIGJ5dGVzIHRvIGJlZ2luIHBhcnNpbmdcbiAgICpcbiAgICogQHJldHVybnMgVGhlIGxlbmd0aCBvZiB0aGUgcmF3IFtbVHhdXVxuICAgKi9cbiAgZnJvbUJ1ZmZlcihieXRlczogQnVmZmVyLCBvZmZzZXQ6IG51bWJlciA9IDApOiBudW1iZXIge1xuICAgIHRoaXMudW5zaWduZWRUeCA9IG5ldyBVbnNpZ25lZFR4KCk7XG4gICAgb2Zmc2V0ID0gdGhpcy51bnNpZ25lZFR4LmZyb21CdWZmZXIoYnl0ZXMsIG9mZnNldCk7XG4gICAgY29uc3QgbnVtY3JlZHM6IG51bWJlciA9IGJpbnRvb2xzLmNvcHlGcm9tKGJ5dGVzLCBvZmZzZXQsIG9mZnNldCArIDQpLnJlYWRVSW50MzJCRSgwKTtcbiAgICBvZmZzZXQgKz0gNDtcbiAgICB0aGlzLmNyZWRlbnRpYWxzID0gW107XG4gICAgZm9yIChsZXQgaTogbnVtYmVyID0gMDsgaSA8IG51bWNyZWRzOyBpKyspIHtcbiAgICAgIGNvbnN0IGNyZWRpZDogbnVtYmVyID0gYmludG9vbHMuY29weUZyb20oYnl0ZXMsIG9mZnNldCwgb2Zmc2V0ICsgNCkucmVhZFVJbnQzMkJFKDApO1xuICAgICAgb2Zmc2V0ICs9IDQ7XG4gICAgICBjb25zdCBjcmVkOiBDcmVkZW50aWFsID0gU2VsZWN0Q3JlZGVudGlhbENsYXNzKGNyZWRpZCk7XG4gICAgICBvZmZzZXQgPSBjcmVkLmZyb21CdWZmZXIoYnl0ZXMsIG9mZnNldCk7XG4gICAgICB0aGlzLmNyZWRlbnRpYWxzLnB1c2goY3JlZCk7XG4gICAgfVxuICAgIHJldHVybiBvZmZzZXQ7XG4gIH1cblxufVxuIl19","\"use strict\";\n/**\n * @packageDocumentation\n * @module API-AVM-Credentials\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NFTCredential = exports.SECPCredential = exports.SelectCredentialClass = void 0;\nconst constants_1 = require(\"./constants\");\nconst credentials_1 = require(\"../../common/credentials\");\n/**\n * Takes a buffer representing the credential and returns the proper [[Credential]] instance.\n *\n * @param credid A number representing the credential ID parsed prior to the bytes passed in\n *\n * @returns An instance of an [[Credential]]-extended class.\n */\nexports.SelectCredentialClass = (credid, ...args) => {\n    if (credid === constants_1.AVMConstants.SECPCREDENTIAL) {\n        return new SECPCredential(...args);\n    }\n    if (credid === constants_1.AVMConstants.NFTCREDENTIAL) {\n        return new NFTCredential(...args);\n    }\n    /* istanbul ignore next */\n    throw new Error(`Error - SelectCredentialClass: unknown credid ${credid}`);\n};\nclass SECPCredential extends credentials_1.Credential {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"SECPCredential\";\n        this._typeID = constants_1.AVMConstants.SECPCREDENTIAL;\n    }\n    //serialize and deserialize both are inherited\n    getCredentialID() {\n        return this._typeID;\n    }\n    clone() {\n        let newbase = new SECPCredential();\n        newbase.fromBuffer(this.toBuffer());\n        return newbase;\n    }\n    create(...args) {\n        return new SECPCredential(...args);\n    }\n    select(id, ...args) {\n        let newbasetx = exports.SelectCredentialClass(id, ...args);\n        return newbasetx;\n    }\n}\nexports.SECPCredential = SECPCredential;\nclass NFTCredential extends credentials_1.Credential {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"NFTCredential\";\n        this._typeID = constants_1.AVMConstants.NFTCREDENTIAL;\n    }\n    //serialize and deserialize both are inherited\n    getCredentialID() {\n        return this._typeID;\n    }\n    clone() {\n        let newbase = new NFTCredential();\n        newbase.fromBuffer(this.toBuffer());\n        return newbase;\n    }\n    create(...args) {\n        return new NFTCredential(...args);\n    }\n    select(id, ...args) {\n        let newbasetx = exports.SelectCredentialClass(id, ...args);\n        return newbasetx;\n    }\n}\nexports.NFTCredential = NFTCredential;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlZGVudGlhbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpcy9hdm0vY3JlZGVudGlhbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7R0FHRzs7O0FBRUgsMkNBQTJDO0FBQzNDLDBEQUFzRDtBQUV0RDs7Ozs7O0dBTUc7QUFDVSxRQUFBLHFCQUFxQixHQUFHLENBQUMsTUFBYSxFQUFFLEdBQUcsSUFBZSxFQUFhLEVBQUU7SUFDcEYsSUFBSSxNQUFNLEtBQUssd0JBQVksQ0FBQyxjQUFjLEVBQUU7UUFDMUMsT0FBTyxJQUFJLGNBQWMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDO0tBQ3BDO0lBQUMsSUFBSSxNQUFNLEtBQUssd0JBQVksQ0FBQyxhQUFhLEVBQUU7UUFDM0MsT0FBTyxJQUFJLGFBQWEsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDO0tBQ25DO0lBQ0QsMEJBQTBCO0lBQzFCLE1BQU0sSUFBSSxLQUFLLENBQUMsaURBQWlELE1BQU0sRUFBRSxDQUFDLENBQUM7QUFDN0UsQ0FBQyxDQUFDO0FBRUYsTUFBYSxjQUFlLFNBQVEsd0JBQVU7SUFBOUM7O1FBQ1ksY0FBUyxHQUFHLGdCQUFnQixDQUFDO1FBQzdCLFlBQU8sR0FBRyx3QkFBWSxDQUFDLGNBQWMsQ0FBQztJQXVCbEQsQ0FBQztJQXJCQyw4Q0FBOEM7SUFFOUMsZUFBZTtRQUNiLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUN0QixDQUFDO0lBRUQsS0FBSztRQUNILElBQUksT0FBTyxHQUFrQixJQUFJLGNBQWMsRUFBRSxDQUFDO1FBQ2xELE9BQU8sQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7UUFDcEMsT0FBTyxPQUFlLENBQUM7SUFDekIsQ0FBQztJQUVELE1BQU0sQ0FBQyxHQUFHLElBQVU7UUFDbEIsT0FBTyxJQUFJLGNBQWMsQ0FBQyxHQUFHLElBQUksQ0FBUyxDQUFDO0lBQzdDLENBQUM7SUFFRCxNQUFNLENBQUMsRUFBUyxFQUFFLEdBQUcsSUFBVTtRQUM3QixJQUFJLFNBQVMsR0FBYyw2QkFBcUIsQ0FBQyxFQUFFLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQztRQUM5RCxPQUFPLFNBQVMsQ0FBQztJQUNuQixDQUFDO0NBRUY7QUF6QkQsd0NBeUJDO0FBRUQsTUFBYSxhQUFjLFNBQVEsd0JBQVU7SUFBN0M7O1FBQ1ksY0FBUyxHQUFHLGVBQWUsQ0FBQztRQUM1QixZQUFPLEdBQUcsd0JBQVksQ0FBQyxhQUFhLENBQUM7SUF1QmpELENBQUM7SUFyQkMsOENBQThDO0lBRTlDLGVBQWU7UUFDYixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDdEIsQ0FBQztJQUVELEtBQUs7UUFDSCxJQUFJLE9BQU8sR0FBaUIsSUFBSSxhQUFhLEVBQUUsQ0FBQztRQUNoRCxPQUFPLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO1FBQ3BDLE9BQU8sT0FBZSxDQUFDO0lBQ3pCLENBQUM7SUFFRCxNQUFNLENBQUMsR0FBRyxJQUFVO1FBQ2xCLE9BQU8sSUFBSSxhQUFhLENBQUMsR0FBRyxJQUFJLENBQVMsQ0FBQztJQUM1QyxDQUFDO0lBRUQsTUFBTSxDQUFDLEVBQVMsRUFBRSxHQUFHLElBQVU7UUFDN0IsSUFBSSxTQUFTLEdBQWMsNkJBQXFCLENBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUM7UUFDOUQsT0FBTyxTQUFTLENBQUM7SUFDbkIsQ0FBQztDQUVGO0FBekJELHNDQXlCQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHBhY2thZ2VEb2N1bWVudGF0aW9uXG4gKiBAbW9kdWxlIEFQSS1BVk0tQ3JlZGVudGlhbHNcbiAqL1xuXG5pbXBvcnQgeyBBVk1Db25zdGFudHMgfSBmcm9tICcuL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBDcmVkZW50aWFsIH0gZnJvbSAnLi4vLi4vY29tbW9uL2NyZWRlbnRpYWxzJztcblxuLyoqXG4gKiBUYWtlcyBhIGJ1ZmZlciByZXByZXNlbnRpbmcgdGhlIGNyZWRlbnRpYWwgYW5kIHJldHVybnMgdGhlIHByb3BlciBbW0NyZWRlbnRpYWxdXSBpbnN0YW5jZS5cbiAqXG4gKiBAcGFyYW0gY3JlZGlkIEEgbnVtYmVyIHJlcHJlc2VudGluZyB0aGUgY3JlZGVudGlhbCBJRCBwYXJzZWQgcHJpb3IgdG8gdGhlIGJ5dGVzIHBhc3NlZCBpblxuICpcbiAqIEByZXR1cm5zIEFuIGluc3RhbmNlIG9mIGFuIFtbQ3JlZGVudGlhbF1dLWV4dGVuZGVkIGNsYXNzLlxuICovXG5leHBvcnQgY29uc3QgU2VsZWN0Q3JlZGVudGlhbENsYXNzID0gKGNyZWRpZDpudW1iZXIsIC4uLmFyZ3M6QXJyYXk8YW55Pik6Q3JlZGVudGlhbCA9PiB7XG4gIGlmIChjcmVkaWQgPT09IEFWTUNvbnN0YW50cy5TRUNQQ1JFREVOVElBTCkge1xuICAgIHJldHVybiBuZXcgU0VDUENyZWRlbnRpYWwoLi4uYXJncyk7XG4gIH0gaWYgKGNyZWRpZCA9PT0gQVZNQ29uc3RhbnRzLk5GVENSRURFTlRJQUwpIHtcbiAgICByZXR1cm4gbmV3IE5GVENyZWRlbnRpYWwoLi4uYXJncyk7XG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgdGhyb3cgbmV3IEVycm9yKGBFcnJvciAtIFNlbGVjdENyZWRlbnRpYWxDbGFzczogdW5rbm93biBjcmVkaWQgJHtjcmVkaWR9YCk7XG59O1xuXG5leHBvcnQgY2xhc3MgU0VDUENyZWRlbnRpYWwgZXh0ZW5kcyBDcmVkZW50aWFsIHtcbiAgcHJvdGVjdGVkIF90eXBlTmFtZSA9IFwiU0VDUENyZWRlbnRpYWxcIjtcbiAgcHJvdGVjdGVkIF90eXBlSUQgPSBBVk1Db25zdGFudHMuU0VDUENSRURFTlRJQUw7XG5cbiAgLy9zZXJpYWxpemUgYW5kIGRlc2VyaWFsaXplIGJvdGggYXJlIGluaGVyaXRlZFxuXG4gIGdldENyZWRlbnRpYWxJRCgpOm51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX3R5cGVJRDtcbiAgfVxuXG4gIGNsb25lKCk6dGhpcyB7XG4gICAgbGV0IG5ld2Jhc2U6U0VDUENyZWRlbnRpYWwgPSBuZXcgU0VDUENyZWRlbnRpYWwoKTtcbiAgICBuZXdiYXNlLmZyb21CdWZmZXIodGhpcy50b0J1ZmZlcigpKTtcbiAgICByZXR1cm4gbmV3YmFzZSBhcyB0aGlzO1xuICB9XG5cbiAgY3JlYXRlKC4uLmFyZ3M6YW55W10pOnRoaXMge1xuICAgIHJldHVybiBuZXcgU0VDUENyZWRlbnRpYWwoLi4uYXJncykgYXMgdGhpcztcbiAgfVxuXG4gIHNlbGVjdChpZDpudW1iZXIsIC4uLmFyZ3M6YW55W10pOkNyZWRlbnRpYWwge1xuICAgIGxldCBuZXdiYXNldHg6Q3JlZGVudGlhbCA9IFNlbGVjdENyZWRlbnRpYWxDbGFzcyhpZCwgLi4uYXJncyk7XG4gICAgcmV0dXJuIG5ld2Jhc2V0eDtcbiAgfVxuXG59XG5cbmV4cG9ydCBjbGFzcyBORlRDcmVkZW50aWFsIGV4dGVuZHMgQ3JlZGVudGlhbCB7XG4gIHByb3RlY3RlZCBfdHlwZU5hbWUgPSBcIk5GVENyZWRlbnRpYWxcIjtcbiAgcHJvdGVjdGVkIF90eXBlSUQgPSBBVk1Db25zdGFudHMuTkZUQ1JFREVOVElBTDtcblxuICAvL3NlcmlhbGl6ZSBhbmQgZGVzZXJpYWxpemUgYm90aCBhcmUgaW5oZXJpdGVkXG5cbiAgZ2V0Q3JlZGVudGlhbElEKCk6bnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fdHlwZUlEO1xuICB9XG5cbiAgY2xvbmUoKTp0aGlzIHtcbiAgICBsZXQgbmV3YmFzZTpORlRDcmVkZW50aWFsID0gbmV3IE5GVENyZWRlbnRpYWwoKTtcbiAgICBuZXdiYXNlLmZyb21CdWZmZXIodGhpcy50b0J1ZmZlcigpKTtcbiAgICByZXR1cm4gbmV3YmFzZSBhcyB0aGlzO1xuICB9XG5cbiAgY3JlYXRlKC4uLmFyZ3M6YW55W10pOnRoaXMge1xuICAgIHJldHVybiBuZXcgTkZUQ3JlZGVudGlhbCguLi5hcmdzKSBhcyB0aGlzO1xuICB9XG5cbiAgc2VsZWN0KGlkOm51bWJlciwgLi4uYXJnczphbnlbXSk6Q3JlZGVudGlhbCB7XG4gICAgbGV0IG5ld2Jhc2V0eDpDcmVkZW50aWFsID0gU2VsZWN0Q3JlZGVudGlhbENsYXNzKGlkLCAuLi5hcmdzKTtcbiAgICByZXR1cm4gbmV3YmFzZXR4O1xuICB9XG5cbn1cbiJdfQ==","'use strict';\n\nconst encoders = exports;\n\nencoders.der = require('./der');\nencoders.pem = require('./pem');\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AVMAPI = void 0;\n/**\n * @packageDocumentation\n * @module API-AVM\n */\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst utxos_1 = require(\"./utxos\");\nconst constants_1 = require(\"./constants\");\nconst keychain_1 = require(\"./keychain\");\nconst tx_1 = require(\"./tx\");\nconst payload_1 = require(\"../../utils/payload\");\nconst helperfunctions_1 = require(\"../../utils/helperfunctions\");\nconst jrpcapi_1 = require(\"../../common/jrpcapi\");\nconst constants_2 = require(\"../../utils/constants\");\nconst output_1 = require(\"../../common/output\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\n/**\n * Class for interacting with a node endpoint that is using the AVM.\n *\n * @category RPCAPIs\n *\n * @remarks This extends the [[JRPCAPI]] class. This class should not be directly called. Instead, use the [[Avalanche.addAPI]] function to register this interface with Avalanche.\n */\nclass AVMAPI extends jrpcapi_1.JRPCAPI {\n    /**\n     * This class should not be instantiated directly. Instead use the [[Avalanche.addAPI]] method.\n     *\n     * @param core A reference to the Avalanche class\n     * @param baseurl Defaults to the string \"/ext/bc/X\" as the path to blockchain's baseurl\n     * @param blockchainID The Blockchain's ID. Defaults to an empty string: ''\n     */\n    constructor(core, baseurl = '/ext/bc/X', blockchainID = '') {\n        super(core, baseurl);\n        /**\n         * @ignore\n         */\n        this.keychain = new keychain_1.KeyChain('', '');\n        this.blockchainID = '';\n        this.blockchainAlias = undefined;\n        this.AVAXAssetID = undefined;\n        this.txFee = undefined;\n        this.creationTxFee = undefined;\n        /**\n         * Gets the alias for the blockchainID if it exists, otherwise returns `undefined`.\n         *\n         * @returns The alias for the blockchainID\n         */\n        this.getBlockchainAlias = () => {\n            if (typeof this.blockchainAlias === \"undefined\") {\n                const netid = this.core.getNetworkID();\n                if (netid in constants_2.Defaults.network && this.blockchainID in constants_2.Defaults.network[netid]) {\n                    this.blockchainAlias = constants_2.Defaults.network[netid][this.blockchainID].alias;\n                    return this.blockchainAlias;\n                }\n                else {\n                    /* istanbul ignore next */\n                    return undefined;\n                }\n            }\n            return this.blockchainAlias;\n        };\n        /**\n         * Sets the alias for the blockchainID.\n         *\n         * @param alias The alias for the blockchainID.\n         *\n         */\n        this.setBlockchainAlias = (alias) => {\n            this.blockchainAlias = alias;\n            /* istanbul ignore next */\n            return undefined;\n        };\n        /**\n         * Gets the blockchainID and returns it.\n         *\n         * @returns The blockchainID\n         */\n        this.getBlockchainID = () => this.blockchainID;\n        /**\n         * Refresh blockchainID, and if a blockchainID is passed in, use that.\n         *\n         * @param Optional. BlockchainID to assign, if none, uses the default based on networkID.\n         *\n         * @returns The blockchainID\n         */\n        this.refreshBlockchainID = (blockchainID = undefined) => {\n            const netid = this.core.getNetworkID();\n            if (typeof blockchainID === 'undefined' && typeof constants_2.Defaults.network[netid] !== \"undefined\") {\n                this.blockchainID = constants_2.Defaults.network[netid].X.blockchainID; //default to X-Chain\n                return true;\n            }\n            if (typeof blockchainID === 'string') {\n                this.blockchainID = blockchainID;\n                return true;\n            }\n            return false;\n        };\n        /**\n         * Takes an address string and returns its {@link https://github.com/feross/buffer|Buffer} representation if valid.\n         *\n         * @returns A {@link https://github.com/feross/buffer|Buffer} for the address if valid, undefined if not valid.\n         */\n        this.parseAddress = (addr) => {\n            const alias = this.getBlockchainAlias();\n            const blockchainID = this.getBlockchainID();\n            return bintools.parseAddress(addr, blockchainID, alias, constants_1.AVMConstants.ADDRESSLENGTH);\n        };\n        this.addressFromBuffer = (address) => {\n            const chainid = this.getBlockchainAlias() ? this.getBlockchainAlias() : this.getBlockchainID();\n            return bintools.addressToString(this.core.getHRP(), chainid, address);\n        };\n        /**\n         * Fetches the AVAX AssetID and returns it in a Promise.\n         *\n         * @param refresh This function caches the response. Refresh = true will bust the cache.\n         *\n         * @returns The the provided string representing the AVAX AssetID\n         */\n        this.getAVAXAssetID = (refresh = false) => __awaiter(this, void 0, void 0, function* () {\n            if (typeof this.AVAXAssetID === 'undefined' || refresh) {\n                const asset = yield this.getAssetDescription(constants_2.PrimaryAssetAlias);\n                this.AVAXAssetID = asset.assetID;\n            }\n            return this.AVAXAssetID;\n        });\n        /**\n         * Overrides the defaults and sets the cache to a specific AVAX AssetID\n         *\n         * @param avaxAssetID A cb58 string or Buffer representing the AVAX AssetID\n         *\n         * @returns The the provided string representing the AVAX AssetID\n         */\n        this.setAVAXAssetID = (avaxAssetID) => {\n            if (typeof avaxAssetID === \"string\") {\n                avaxAssetID = bintools.cb58Decode(avaxAssetID);\n            }\n            this.AVAXAssetID = avaxAssetID;\n        };\n        /**\n         * Gets the default tx fee for this chain.\n         *\n         * @returns The default tx fee as a {@link https://github.com/indutny/bn.js/|BN}\n         */\n        this.getDefaultTxFee = () => {\n            return this.core.getNetworkID() in constants_2.Defaults.network ? new bn_js_1.default(constants_2.Defaults.network[this.core.getNetworkID()][\"X\"][\"txFee\"]) : new bn_js_1.default(0);\n        };\n        /**\n         * Gets the tx fee for this chain.\n         *\n         * @returns The tx fee as a {@link https://github.com/indutny/bn.js/|BN}\n         */\n        this.getTxFee = () => {\n            if (typeof this.txFee === \"undefined\") {\n                this.txFee = this.getDefaultTxFee();\n            }\n            return this.txFee;\n        };\n        /**\n         * Sets the tx fee for this chain.\n         *\n         * @param fee The tx fee amount to set as {@link https://github.com/indutny/bn.js/|BN}\n         */\n        this.setTxFee = (fee) => {\n            this.txFee = fee;\n        };\n        /**\n         * Gets the default creation fee for this chain.\n         *\n         * @returns The default creation fee as a {@link https://github.com/indutny/bn.js/|BN}\n         */\n        this.getDefaultCreationTxFee = () => {\n            return this.core.getNetworkID() in constants_2.Defaults.network ? new bn_js_1.default(constants_2.Defaults.network[this.core.getNetworkID()][\"X\"][\"creationTxFee\"]) : new bn_js_1.default(0);\n        };\n        /**\n         * Gets the creation fee for this chain.\n         *\n         * @returns The creation fee as a {@link https://github.com/indutny/bn.js/|BN}\n         */\n        this.getCreationTxFee = () => {\n            if (typeof this.creationTxFee === \"undefined\") {\n                this.creationTxFee = this.getDefaultCreationTxFee();\n            }\n            return this.creationTxFee;\n        };\n        /**\n         * Sets the creation fee for this chain.\n         *\n         * @param fee The creation fee amount to set as {@link https://github.com/indutny/bn.js/|BN}\n         */\n        this.setCreationTxFee = (fee) => {\n            this.creationTxFee = fee;\n        };\n        /**\n         * Gets a reference to the keychain for this class.\n         *\n         * @returns The instance of [[KeyChain]] for this class\n         */\n        this.keyChain = () => this.keychain;\n        /**\n         * @ignore\n         */\n        this.newKeyChain = () => {\n            // warning, overwrites the old keychain\n            const alias = this.getBlockchainAlias();\n            if (alias) {\n                this.keychain = new keychain_1.KeyChain(this.core.getHRP(), alias);\n            }\n            else {\n                this.keychain = new keychain_1.KeyChain(this.core.getHRP(), this.blockchainID);\n            }\n            return this.keychain;\n        };\n        /**\n         * Helper function which determines if a tx is a goose egg transaction.\n         *\n         * @param utx An UnsignedTx\n         *\n         * @returns boolean true if passes goose egg test and false if fails.\n         *\n         * @remarks\n         * A \"Goose Egg Transaction\" is when the fee far exceeds a reasonable amount\n         */\n        this.checkGooseEgg = (utx, outTotal = new bn_js_1.default(0)) => __awaiter(this, void 0, void 0, function* () {\n            const avaxAssetID = yield this.getAVAXAssetID();\n            let outputTotal = outTotal.gt(new bn_js_1.default(0)) ? outTotal : utx.getOutputTotal(avaxAssetID);\n            const fee = utx.getBurn(avaxAssetID);\n            if (fee.lte(constants_2.ONEAVAX.mul(new bn_js_1.default(10))) || fee.lte(outputTotal)) {\n                return true;\n            }\n            else {\n                return false;\n            }\n        });\n        /**\n           * Gets the balance of a particular asset on a blockchain.\n           *\n           * @param address The address to pull the asset balance from\n           * @param assetID The assetID to pull the balance from\n           *\n           * @returns Promise with the balance of the assetID as a {@link https://github.com/indutny/bn.js/|BN} on the provided address for the blockchain.\n           */\n        this.getBalance = (address, assetID) => __awaiter(this, void 0, void 0, function* () {\n            if (typeof this.parseAddress(address) === 'undefined') {\n                /* istanbul ignore next */\n                throw new Error(`Error - AVMAPI.getBalance: Invalid address format ${address}`);\n            }\n            const params = {\n                address,\n                assetID,\n            };\n            return this.callMethod('avm.getBalance', params).then((response) => response.data.result);\n        });\n        /**\n           * Creates an address (and associated private keys) on a user on a blockchain.\n           *\n           * @param username Name of the user to create the address under\n           * @param password Password to unlock the user and encrypt the private key\n           *\n           * @returns Promise for a string representing the address created by the vm.\n           */\n        this.createAddress = (username, password) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password,\n            };\n            return this.callMethod('avm.createAddress', params).then((response) => response.data.result.address);\n        });\n        /**\n         * Create a new fixed-cap, fungible asset. A quantity of it is created at initialization and there no more is ever created.\n         *\n         * @param username The user paying the transaction fee (in $AVAX) for asset creation\n         * @param password The password for the user paying the transaction fee (in $AVAX) for asset creation\n         * @param name The human-readable name for the asset\n         * @param symbol Optional. The shorthand symbol for the asset. Between 0 and 4 characters\n         * @param denomination Optional. Determines how balances of this asset are displayed by user interfaces. Default is 0\n         * @param initialHolders An array of objects containing the field \"address\" and \"amount\" to establish the genesis values for the new asset\n         *\n         * ```js\n         * Example initialHolders:\n         * [\n         *     {\n         *         \"address\": \"X-avax1kj06lhgx84h39snsljcey3tpc046ze68mek3g5\",\n         *         \"amount\": 10000\n         *     },\n         *     {\n         *         \"address\": \"X-avax1am4w6hfrvmh3akduzkjthrtgtqafalce6an8cr\",\n         *         \"amount\": 50000\n         *     }\n         * ]\n         * ```\n         *\n         * @returns Returns a Promise<string> containing the base 58 string representation of the ID of the newly created asset.\n         */\n        this.createFixedCapAsset = (username, password, name, symbol, denomination, initialHolders) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                name,\n                symbol,\n                denomination,\n                username,\n                password,\n                initialHolders,\n            };\n            return this.callMethod('avm.createFixedCapAsset', params).then((response) => response.data.result.assetID);\n        });\n        /**\n           * Create a new variable-cap, fungible asset. No units of the asset exist at initialization. Minters can mint units of this asset using createMintTx, signMintTx and sendMintTx.\n           *\n           * @param username The user paying the transaction fee (in $AVAX) for asset creation\n           * @param password The password for the user paying the transaction fee (in $AVAX) for asset creation\n           * @param name The human-readable name for the asset\n           * @param symbol Optional. The shorthand symbol for the asset -- between 0 and 4 characters\n           * @param denomination Optional. Determines how balances of this asset are displayed by user interfaces. Default is 0\n           * @param minterSets is a list where each element specifies that threshold of the addresses in minters may together mint more of the asset by signing a minting transaction\n           *\n           * ```js\n           * Example minterSets:\n           * [\n           *      {\n           *          \"minters\":[\n           *              \"X-avax1am4w6hfrvmh3akduzkjthrtgtqafalce6an8cr\"\n           *          ],\n           *          \"threshold\": 1\n           *      },\n           *      {\n           *          \"minters\": [\n           *              \"X-avax1am4w6hfrvmh3akduzkjthrtgtqafalce6an8cr\",\n           *              \"X-avax1kj06lhgx84h39snsljcey3tpc046ze68mek3g5\",\n           *              \"X-avax1yell3e4nln0m39cfpdhgqprsd87jkh4qnakklx\"\n           *          ],\n           *          \"threshold\": 2\n           *      }\n           * ]\n           * ```\n           *\n           * @returns Returns a Promise<string> containing the base 58 string representation of the ID of the newly created asset.\n           */\n        this.createVariableCapAsset = (username, password, name, symbol, denomination, minterSets) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                name,\n                symbol,\n                denomination,\n                username,\n                password,\n                minterSets,\n            };\n            return this.callMethod('avm.createVariableCapAsset', params).then((response) => response.data.result.assetID);\n        });\n        /**\n           * Create an unsigned transaction to mint more of an asset.\n           *\n           * @param amount The units of the asset to mint\n           * @param assetID The ID of the asset to mint\n           * @param to The address to assign the units of the minted asset\n           * @param minters Addresses of the minters responsible for signing the transaction\n           *\n           * @returns Returns a Promise<string> containing the base 58 string representation of the unsigned transaction.\n           */\n        this.mint = (username, password, amount, assetID, to, minters) => __awaiter(this, void 0, void 0, function* () {\n            let asset;\n            let amnt;\n            if (typeof assetID !== 'string') {\n                asset = bintools.cb58Encode(assetID);\n            }\n            else {\n                asset = assetID;\n            }\n            if (typeof amount === 'number') {\n                amnt = new bn_js_1.default(amount);\n            }\n            else {\n                amnt = amount;\n            }\n            const params = {\n                username: username,\n                password: password,\n                amount: amnt.toString(10),\n                assetID: asset,\n                to,\n                minters\n            };\n            return this.callMethod('avm.mint', params).then((response) => response.data.result.txID);\n        });\n        /**\n           * Exports the private key for an address.\n           *\n           * @param username The name of the user with the private key\n           * @param password The password used to decrypt the private key\n           * @param address The address whose private key should be exported\n           *\n           * @returns Promise with the decrypted private key as store in the database\n           */\n        this.exportKey = (username, password, address) => __awaiter(this, void 0, void 0, function* () {\n            if (typeof this.parseAddress(address) === 'undefined') {\n                /* istanbul ignore next */\n                throw new Error(`Error - AVMAPI.exportKey: Invalid address format ${address}`);\n            }\n            const params = {\n                username,\n                password,\n                address,\n            };\n            return this.callMethod('avm.exportKey', params).then((response) => response.data.result.privateKey);\n        });\n        /**\n           * Imports a private key into the node's keystore under an user and for a blockchain.\n           *\n           * @param username The name of the user to store the private key\n           * @param password The password that unlocks the user\n           * @param privateKey A string representing the private key in the vm's format\n           *\n           * @returns The address for the imported private key.\n           */\n        this.importKey = (username, password, privateKey) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password,\n                privateKey,\n            };\n            return this.callMethod('avm.importKey', params).then((response) => response.data.result.address);\n        });\n        /**\n          * Send ANT (Avalanche Native Token) assets including AVAX from the X-Chain to an account on the P-Chain or C-Chain.\n          *\n          * After calling this method, you must call the P-Chain's `importAVAX` or the C-Chain’s `import` method to complete the transfer.\n          *\n          * @param username The Keystore user that controls the P-Chain or C-Chain account specified in `to`\n          * @param password The password of the Keystore user\n          * @param to The account on the P-Chain or C-Chain to send the asset to.\n          * @param amount Amount of asset to export as a {@link https://github.com/indutny/bn.js/|BN}\n          * @param assetID The asset id which is being sent\n          *\n          * @returns String representing the transaction id\n          */\n        this.export = (username, password, to, amount, assetID) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                to,\n                amount: amount.toString(10),\n                username,\n                password,\n                assetID\n            };\n            return this.callMethod('avm.export', params).then((response) => response.data.result.txID);\n        });\n        /**\n           * Send AVAX from the X-Chain to an account on the P-Chain or C-Chain.\n           *\n           * After calling this method, you must call the P-Chain’s or C-Chain's importAVAX method to complete the transfer.\n           *\n           * @param username The Keystore user that controls the P-Chain account specified in `to`\n           * @param password The password of the Keystore user\n           * @param to The account on the P-Chain or C-Chain to send the AVAX to.\n           * @param amount Amount of AVAX to export as a {@link https://github.com/indutny/bn.js/|BN}\n           *\n           * @returns String representing the transaction id\n           */\n        this.exportAVAX = (username, password, to, amount) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                to,\n                amount: amount.toString(10),\n                username,\n                password,\n            };\n            return this.callMethod('avm.exportAVAX', params).then((response) => response.data.result.txID);\n        });\n        /**\n         * Send ANT (Avalanche Native Token) assets including AVAX from an account on the P-Chain or C-Chain to an address on the X-Chain. This transaction\n         * must be signed with the key of the account that the asset is sent from and which pays\n         * the transaction fee.\n         *\n         * @param username The Keystore user that controls the account specified in `to`\n         * @param password The password of the Keystore user\n         * @param to The address of the account the asset is sent to.\n         * @param sourceChain The chainID where the funds are coming from. Ex: \"C\"\n         *\n         * @returns Promise for a string for the transaction, which should be sent to the network\n         * by calling issueTx.\n         */\n        this.import = (username, password, to, sourceChain) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                to,\n                sourceChain,\n                username,\n                password,\n            };\n            return this.callMethod('avm.import', params)\n                .then((response) => response.data.result.txID);\n        });\n        /**\n           * Finalize a transfer of AVAX from the P-Chain to the X-Chain.\n           *\n           * Before this method is called, you must call the P-Chain’s `exportAVAX` method to initiate the transfer.\n           * @param username The Keystore user that controls the address specified in `to`\n           * @param password The password of the Keystore user\n           * @param to The address the AVAX is sent to. This must be the same as the to argument in the corresponding call to the P-Chain’s exportAVAX, except that the prepended X- should be included in this argument\n           * @param sourceChain Chain the funds are coming from.\n           *\n           * @returns String representing the transaction id\n           */\n        this.importAVAX = (username, password, to, sourceChain) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                to,\n                sourceChain,\n                username,\n                password,\n            };\n            return this.callMethod('avm.importAVAX', params).then((response) => response.data.result.txID);\n        });\n        /**\n           * Lists all the addresses under a user.\n           *\n           * @param username The user to list addresses\n           * @param password The password of the user to list the addresses\n           *\n           * @returns Promise of an array of address strings in the format specified by the blockchain.\n           */\n        this.listAddresses = (username, password) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password,\n            };\n            return this.callMethod('avm.listAddresses', params).then((response) => response.data.result.addresses);\n        });\n        /**\n           * Retrieves all assets for an address on a server and their associated balances.\n           *\n           * @param address The address to get a list of assets\n           *\n           * @returns Promise of an object mapping assetID strings with {@link https://github.com/indutny/bn.js/|BN} balance for the address on the blockchain.\n           */\n        this.getAllBalances = (address) => __awaiter(this, void 0, void 0, function* () {\n            if (typeof this.parseAddress(address) === 'undefined') {\n                /* istanbul ignore next */\n                throw new Error(`Error - AVMAPI.getAllBalances: Invalid address format ${address}`);\n            }\n            const params = {\n                address,\n            };\n            return this.callMethod('avm.getAllBalances', params).then((response) => response.data.result.balances);\n        });\n        /**\n           * Retrieves an assets name and symbol.\n           *\n           * @param assetID Either a {@link https://github.com/feross/buffer|Buffer} or an b58 serialized string for the AssetID or its alias.\n           *\n           * @returns Returns a Promise<object> with keys \"name\" and \"symbol\".\n           */\n        this.getAssetDescription = (assetID) => __awaiter(this, void 0, void 0, function* () {\n            let asset;\n            if (typeof assetID !== 'string') {\n                asset = bintools.cb58Encode(assetID);\n            }\n            else {\n                asset = assetID;\n            }\n            const params = {\n                assetID: asset,\n            };\n            return this.callMethod('avm.getAssetDescription', params).then((response) => ({\n                name: response.data.result.name,\n                symbol: response.data.result.symbol,\n                assetID: bintools.cb58Decode(response.data.result.assetID),\n                denomination: parseInt(response.data.result.denomination, 10),\n            }));\n        });\n        /**\n         * Returns the treansaction data of a provided transaction ID by calling the node's `getTx` method.\n         *\n         * @param txid The string representation of the transaction ID\n         *\n         * @returns Returns a Promise<string> containing the bytes retrieved from the node\n         */\n        this.getTx = (txid) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                txID: txid,\n            };\n            return this.callMethod('avm.getTx', params).then((response) => response.data.result.tx);\n        });\n        /**\n         * Returns the status of a provided transaction ID by calling the node's `getTxStatus` method.\n         *\n         * @param txid The string representation of the transaction ID\n         *\n         * @returns Returns a Promise<string> containing the status retrieved from the node\n         */\n        this.getTxStatus = (txid) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                txID: txid,\n            };\n            return this.callMethod('avm.getTxStatus', params).then((response) => response.data.result.status);\n        });\n        /**\n         * Retrieves the UTXOs related to the addresses provided from the node's `getUTXOs` method.\n         *\n         * @param addresses An array of addresses as cb58 strings or addresses as {@link https://github.com/feross/buffer|Buffer}s\n         * @param sourceChain A string for the chain to look for the UTXO's. Default is to use this chain, but if exported UTXOs exist from other chains, this can used to pull them instead.\n         * @param limit Optional. Returns at most [limit] addresses. If [limit] == 0 or > [maxUTXOsToFetch], fetches up to [maxUTXOsToFetch].\n         * @param startIndex Optional. [StartIndex] defines where to start fetching UTXOs (for pagination.)\n         * UTXOs fetched are from addresses equal to or greater than [StartIndex.Address]\n         * For address [StartIndex.Address], only UTXOs with IDs greater than [StartIndex.Utxo] will be returned.\n         * @param persistOpts Options available to persist these UTXOs in local storage\n         *\n         * @remarks\n         * persistOpts is optional and must be of type [[PersistanceOptions]]\n         *\n         */\n        this.getUTXOs = (addresses, sourceChain = undefined, limit = 0, startIndex = undefined, persistOpts = undefined) => __awaiter(this, void 0, void 0, function* () {\n            if (typeof addresses === \"string\") {\n                addresses = [addresses];\n            }\n            const params = {\n                addresses: addresses,\n                limit\n            };\n            if (typeof startIndex !== \"undefined\" && startIndex) {\n                params.startIndex = startIndex;\n            }\n            if (typeof sourceChain !== \"undefined\") {\n                params.sourceChain = sourceChain;\n            }\n            return this.callMethod('avm.getUTXOs', params).then((response) => {\n                const utxos = new utxos_1.UTXOSet();\n                let data = response.data.result.utxos;\n                if (persistOpts && typeof persistOpts === 'object') {\n                    if (this.db.has(persistOpts.getName())) {\n                        const selfArray = this.db.get(persistOpts.getName());\n                        if (Array.isArray(selfArray)) {\n                            utxos.addArray(data);\n                            const self = new utxos_1.UTXOSet();\n                            self.addArray(selfArray);\n                            self.mergeByRule(utxos, persistOpts.getMergeRule());\n                            data = self.getAllUTXOStrings();\n                        }\n                    }\n                    this.db.set(persistOpts.getName(), data, persistOpts.getOverwrite());\n                }\n                utxos.addArray(data, false);\n                response.data.result.utxos = utxos;\n                return response.data.result;\n            });\n        });\n        /**\n         * Helper function which creates an unsigned transaction. For more granular control, you may create your own\n         * [[UnsignedTx]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s, and [[TransferOperation]]s).\n         *\n         * @param utxoset A set of UTXOs that the transaction is built on\n         * @param amount The amount of AssetID to be spent in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}.\n         * @param assetID The assetID of the value being sent\n         * @param toAddresses The addresses to send the funds\n         * @param fromAddresses The addresses being used to send the funds from the UTXOs provided\n         * @param changeAddresses The addresses that can spend the change remaining from the spent UTXOs\n         * @param memo Optional CB58 Buffer or String which contains arbitrary bytes, up to 256 bytes\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         * @param locktime Optional. The locktime field created in the resulting outputs\n         * @param threshold Optional. The number of signatures required to spend the funds in the resultant UTXO\n         *\n         * @returns An unsigned transaction ([[UnsignedTx]]) which contains a [[BaseTx]].\n         *\n         * @remarks\n         * This helper exists because the endpoint API should be the primary point of entry for most functionality.\n         */\n        this.buildBaseTx = (utxoset, amount, assetID = undefined, toAddresses, fromAddresses, changeAddresses, memo = undefined, asOf = helperfunctions_1.UnixNow(), locktime = new bn_js_1.default(0), threshold = 1) => __awaiter(this, void 0, void 0, function* () {\n            const to = this._cleanAddressArray(toAddresses, 'buildBaseTx').map((a) => bintools.stringToAddress(a));\n            const from = this._cleanAddressArray(fromAddresses, 'buildBaseTx').map((a) => bintools.stringToAddress(a));\n            const change = this._cleanAddressArray(changeAddresses, 'buildBaseTx').map((a) => bintools.stringToAddress(a));\n            if (typeof assetID === 'string') {\n                assetID = bintools.cb58Decode(assetID);\n            }\n            if (memo instanceof payload_1.PayloadBase) {\n                memo = memo.getPayload();\n            }\n            const builtUnsignedTx = utxoset.buildBaseTx(this.core.getNetworkID(), bintools.cb58Decode(this.blockchainID), amount, assetID, to, from, change, this.getTxFee(), yield this.getAVAXAssetID(), memo, asOf, locktime, threshold);\n            if (!(yield this.checkGooseEgg(builtUnsignedTx))) {\n                /* istanbul ignore next */\n                throw new Error(\"Failed Goose Egg Check\");\n            }\n            return builtUnsignedTx;\n        });\n        /**\n         * Helper function which creates an unsigned NFT Transfer. For more granular control, you may create your own\n         * [[UnsignedTx]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s, and [[TransferOperation]]s).\n         *\n         * @param utxoset  A set of UTXOs that the transaction is built on\n         * @param toAddresses The addresses to send the NFT\n         * @param fromAddresses The addresses being used to send the NFT from the utxoID provided\n         * @param changeAddresses The addresses that can spend the change remaining from the spent UTXOs\n         * @param utxoid A base58 utxoID or an array of base58 utxoIDs for the nfts this transaction is sending\n         * @param memo Optional CB58 Buffer or String which contains arbitrary bytes, up to 256 bytes\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         * @param locktime Optional. The locktime field created in the resulting outputs\n         * @param threshold Optional. The number of signatures required to spend the funds in the resultant UTXO\n         *\n         * @returns An unsigned transaction ([[UnsignedTx]]) which contains a [[NFTTransferTx]].\n         *\n         * @remarks\n         * This helper exists because the endpoint API should be the primary point of entry for most functionality.\n         */\n        this.buildNFTTransferTx = (utxoset, toAddresses, fromAddresses, changeAddresses, utxoid, memo = undefined, asOf = helperfunctions_1.UnixNow(), locktime = new bn_js_1.default(0), threshold = 1) => __awaiter(this, void 0, void 0, function* () {\n            const to = this._cleanAddressArray(toAddresses, 'buildNFTTransferTx').map((a) => bintools.stringToAddress(a));\n            const from = this._cleanAddressArray(fromAddresses, 'buildNFTTransferTx').map((a) => bintools.stringToAddress(a));\n            const change = this._cleanAddressArray(changeAddresses, \"buildCreateNFTAssetTx\").map(a => bintools.stringToAddress(a));\n            if (memo instanceof payload_1.PayloadBase) {\n                memo = memo.getPayload();\n            }\n            const avaxAssetID = yield this.getAVAXAssetID();\n            let utxoidArray = [];\n            if (typeof utxoid === 'string') {\n                utxoidArray = [utxoid];\n            }\n            else if (Array.isArray(utxoid)) {\n                utxoidArray = utxoid;\n            }\n            const builtUnsignedTx = utxoset.buildNFTTransferTx(this.core.getNetworkID(), bintools.cb58Decode(this.blockchainID), to, from, change, utxoidArray, this.getTxFee(), avaxAssetID, memo, asOf, locktime, threshold);\n            if (!(yield this.checkGooseEgg(builtUnsignedTx))) {\n                /* istanbul ignore next */\n                throw new Error(\"Failed Goose Egg Check\");\n            }\n            return builtUnsignedTx;\n        });\n        /**\n         * Helper function which creates an unsigned Import Tx. For more granular control, you may create your own\n         * [[UnsignedTx]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s, and [[TransferOperation]]s).\n         *\n         * @param utxoset  A set of UTXOs that the transaction is built on\n         * @param ownerAddresses The addresses being used to import\n         * @param sourceChain The chainid for where the import is coming from\n         * @param toAddresses The addresses to send the funds\n         * @param fromAddresses The addresses being used to send the funds from the UTXOs provided\n         * @param changeAddresses The addresses that can spend the change remaining from the spent UTXOs\n         * @param memo Optional CB58 Buffer or String which contains arbitrary bytes, up to 256 bytes\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         * @param locktime Optional. The locktime field created in the resulting outputs\n         * @param threshold Optional. The number of signatures required to spend the funds in the resultant UTXO\n         *\n         * @returns An unsigned transaction ([[UnsignedTx]]) which contains a [[ImportTx]].\n         *\n         * @remarks\n         * This helper exists because the endpoint API should be the primary point of entry for most functionality.\n         */\n        this.buildImportTx = (utxoset, ownerAddresses, sourceChain, toAddresses, fromAddresses, changeAddresses = undefined, memo = undefined, asOf = helperfunctions_1.UnixNow(), locktime = new bn_js_1.default(0), threshold = 1) => __awaiter(this, void 0, void 0, function* () {\n            const to = this._cleanAddressArray(toAddresses, 'buildImportTx').map((a) => bintools.stringToAddress(a));\n            const from = this._cleanAddressArray(fromAddresses, 'buildImportTx').map((a) => bintools.stringToAddress(a));\n            const change = this._cleanAddressArray(changeAddresses, 'buildImportTx').map((a) => bintools.stringToAddress(a));\n            let srcChain = undefined;\n            if (typeof sourceChain === \"undefined\") {\n                throw new Error(\"Error - AVMAPI.buildImportTx: Source ChainID is undefined.\");\n            }\n            else if (typeof sourceChain === \"string\") {\n                srcChain = sourceChain;\n                sourceChain = bintools.cb58Decode(sourceChain);\n            }\n            else if (!(sourceChain instanceof buffer_1.Buffer)) {\n                srcChain = bintools.cb58Encode(sourceChain);\n                throw new Error(\"Error - AVMAPI.buildImportTx: Invalid destinationChain type: \" + (typeof sourceChain));\n            }\n            const atomicUTXOs = yield (yield this.getUTXOs(ownerAddresses, srcChain, 0, undefined)).utxos;\n            const avaxAssetID = yield this.getAVAXAssetID();\n            const atomics = atomicUTXOs.getAllUTXOs();\n            if (atomics.length === 0) {\n                throw new Error(\"Error - AVMAPI.buildImportTx: No atomic UTXOs to import from \" + srcChain + \" using addresses: \" + ownerAddresses.join(\", \"));\n            }\n            if (memo instanceof payload_1.PayloadBase) {\n                memo = memo.getPayload();\n            }\n            const builtUnsignedTx = utxoset.buildImportTx(this.core.getNetworkID(), bintools.cb58Decode(this.blockchainID), to, from, change, atomics, sourceChain, this.getTxFee(), avaxAssetID, memo, asOf, locktime, threshold);\n            if (!(yield this.checkGooseEgg(builtUnsignedTx))) {\n                /* istanbul ignore next */\n                throw new Error(\"Failed Goose Egg Check\");\n            }\n            return builtUnsignedTx;\n        });\n        /**\n         * Helper function which creates an unsigned Export Tx. For more granular control, you may create your own\n         * [[UnsignedTx]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s, and [[TransferOperation]]s).\n         *\n         * @param utxoset A set of UTXOs that the transaction is built on\n         * @param amount The amount being exported as a {@link https://github.com/indutny/bn.js/|BN}\n         * @param destinationChain The chainid for where the assets will be sent.\n         * @param toAddresses The addresses to send the funds\n         * @param fromAddresses The addresses being used to send the funds from the UTXOs provided\n         * @param changeAddresses The addresses that can spend the change remaining from the spent UTXOs\n         * @param memo Optional CB58 Buffer or String which contains arbitrary bytes, up to 256 bytes\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         * @param locktime Optional. The locktime field created in the resulting outputs\n         * @param threshold Optional. The number of signatures required to spend the funds in the resultant UTXO\n         *\n         * @returns An unsigned transaction ([[UnsignedTx]]) which contains an [[ExportTx]].\n         */\n        this.buildExportTx = (utxoset, amount, destinationChain, toAddresses, fromAddresses, changeAddresses = undefined, memo = undefined, asOf = helperfunctions_1.UnixNow(), locktime = new bn_js_1.default(0), threshold = 1) => __awaiter(this, void 0, void 0, function* () {\n            let prefixes = {};\n            toAddresses.map((a) => {\n                prefixes[a.split(\"-\")[0]] = true;\n            });\n            if (Object.keys(prefixes).length !== 1) {\n                throw new Error(\"Error - AVMAPI.buildExportTx: To addresses must have the same chainID prefix.\");\n            }\n            if (typeof destinationChain === \"undefined\") {\n                throw new Error(\"Error - AVMAPI.buildExportTx: Destination ChainID is undefined.\");\n            }\n            else if (typeof destinationChain === \"string\") {\n                destinationChain = bintools.cb58Decode(destinationChain); //\n            }\n            else if (!(destinationChain instanceof buffer_1.Buffer)) {\n                throw new Error(\"Error - AVMAPI.buildExportTx: Invalid destinationChain type: \" + (typeof destinationChain));\n            }\n            if (destinationChain.length !== 32) {\n                throw new Error(\"Error - AVMAPI.buildExportTx: Destination ChainID must be 32 bytes in length.\");\n            }\n            let to = [];\n            toAddresses.map((a) => {\n                to.push(bintools.stringToAddress(a));\n            });\n            const from = this._cleanAddressArray(fromAddresses, 'buildExportTx').map((a) => bintools.stringToAddress(a));\n            const change = this._cleanAddressArray(changeAddresses, 'buildExportTx').map((a) => bintools.stringToAddress(a));\n            if (memo instanceof payload_1.PayloadBase) {\n                memo = memo.getPayload();\n            }\n            const avaxAssetID = yield this.getAVAXAssetID();\n            const builtUnsignedTx = utxoset.buildExportTx(this.core.getNetworkID(), bintools.cb58Decode(this.blockchainID), amount, avaxAssetID, to, from, change, destinationChain, this.getTxFee(), avaxAssetID, memo, asOf, locktime, threshold);\n            if (!(yield this.checkGooseEgg(builtUnsignedTx))) {\n                /* istanbul ignore next */\n                throw new Error(\"Failed Goose Egg Check\");\n            }\n            return builtUnsignedTx;\n        });\n        /**\n         * Creates an unsigned transaction. For more granular control, you may create your own\n         * [[UnsignedTx]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s, and [[TransferOperation]]s).\n         *\n         * @param utxoset A set of UTXOs that the transaction is built on\n         * @param fromAddresses The addresses being used to send the funds from the UTXOs {@link https://github.com/feross/buffer|Buffer}\n         * @param changeAddresses The addresses that can spend the change remaining from the spent UTXOs\n         * @param initialState The [[InitialStates]] that represent the intial state of a created asset\n         * @param name String for the descriptive name of the asset\n         * @param symbol String for the ticker symbol of the asset\n         * @param denomination Number for the denomination which is 10^D. D must be >= 0 and <= 32. Ex: $1 AVAX = 10^9 $nAVAX\n         * @param mintOutputs Optional. Array of [[SECPMintOutput]]s to be included in the transaction. These outputs can be spent to mint more tokens.\n         * @param memo Optional CB58 Buffer or String which contains arbitrary bytes, up to 256 bytes\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         *\n         * @returns An unsigned transaction ([[UnsignedTx]]) which contains a [[CreateAssetTx]].\n         *\n         */\n        this.buildCreateAssetTx = (utxoset, fromAddresses, changeAddresses, initialStates, name, symbol, denomination, mintOutputs = undefined, memo = undefined, asOf = helperfunctions_1.UnixNow()) => __awaiter(this, void 0, void 0, function* () {\n            let from = this._cleanAddressArray(fromAddresses, \"buildCreateAssetTx\").map(a => bintools.stringToAddress(a));\n            let change = this._cleanAddressArray(changeAddresses, \"buildCreateNFTAssetTx\").map(a => bintools.stringToAddress(a));\n            if (memo instanceof payload_1.PayloadBase) {\n                memo = memo.getPayload();\n            }\n            /* istanbul ignore next */\n            if (symbol.length > constants_1.AVMConstants.SYMBOLMAXLEN) {\n                /* istanbul ignore next */\n                throw new Error(\"Error - AVMAPI.buildCreateAssetTx: Symbols may not exceed length of \" + constants_1.AVMConstants.SYMBOLMAXLEN);\n            }\n            /* istanbul ignore next */\n            if (name.length > constants_1.AVMConstants.ASSETNAMELEN) {\n                /* istanbul ignore next */\n                throw new Error(\"Error - AVMAPI.buildCreateAssetTx: Names may not exceed length of \" + constants_1.AVMConstants.ASSETNAMELEN);\n            }\n            const avaxAssetID = yield this.getAVAXAssetID();\n            const builtUnsignedTx = utxoset.buildCreateAssetTx(this.core.getNetworkID(), bintools.cb58Decode(this.blockchainID), from, change, initialStates, name, symbol, denomination, mintOutputs, this.getCreationTxFee(), avaxAssetID, memo, asOf);\n            if (!(yield this.checkGooseEgg(builtUnsignedTx, this.getCreationTxFee()))) {\n                /* istanbul ignore next */\n                throw new Error(\"Failed Goose Egg Check\");\n            }\n            return builtUnsignedTx;\n        });\n        this.buildSECPMintTx = (utxoset, mintOwner, transferOwner, fromAddresses, changeAddresses, mintUTXOID, memo = undefined, asOf = helperfunctions_1.UnixNow()) => __awaiter(this, void 0, void 0, function* () {\n            let from = this._cleanAddressArray(fromAddresses, \"buildSECPMintTx\").map(a => bintools.stringToAddress(a));\n            let change = this._cleanAddressArray(changeAddresses, \"buildSECPMintTx\").map(a => bintools.stringToAddress(a));\n            if (memo instanceof payload_1.PayloadBase) {\n                memo = memo.getPayload();\n            }\n            let avaxAssetID = yield this.getAVAXAssetID();\n            const builtUnsignedTx = utxoset.buildSECPMintTx(this.core.getNetworkID(), bintools.cb58Decode(this.blockchainID), mintOwner, transferOwner, from, change, mintUTXOID, this.getTxFee(), avaxAssetID, memo, asOf);\n            if (!(yield this.checkGooseEgg(builtUnsignedTx))) {\n                /* istanbul ignore next */\n                throw new Error(\"Failed Goose Egg Check\");\n            }\n            return builtUnsignedTx;\n        });\n        /**\n        * Creates an unsigned transaction. For more granular control, you may create your own\n        * [[UnsignedTx]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s, and [[TransferOperation]]s).\n        *\n        * @param utxoset A set of UTXOs that the transaction is built on\n        * @param fromAddresses The addresses being used to send the funds from the UTXOs {@link https://github.com/feross/buffer|Buffer}\n        * @param changeAddresses The addresses that can spend the change remaining from the spent UTXOs\n        * @param minterSets is a list where each element specifies that threshold of the addresses in minters may together mint more of the asset by signing a minting transaction\n        * @param name String for the descriptive name of the asset\n        * @param symbol String for the ticker symbol of the asset\n        * @param memo Optional CB58 Buffer or String which contains arbitrary bytes, up to 256 bytes\n        * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n        * @param locktime Optional. The locktime field created in the resulting mint output\n        *\n        * ```js\n        * Example minterSets:\n        * [\n        *      {\n        *          \"minters\":[\n        *              \"X-avax1ghstjukrtw8935lryqtnh643xe9a94u3tc75c7\"\n        *          ],\n        *          \"threshold\": 1\n        *      },\n        *      {\n        *          \"minters\": [\n        *              \"X-avax1yell3e4nln0m39cfpdhgqprsd87jkh4qnakklx\",\n        *              \"X-avax1k4nr26c80jaquzm9369j5a4shmwcjn0vmemcjz\",\n        *              \"X-avax1ztkzsrjnkn0cek5ryvhqswdtcg23nhge3nnr5e\"\n        *          ],\n        *          \"threshold\": 2\n        *      }\n        * ]\n        * ```\n        *\n        * @returns An unsigned transaction ([[UnsignedTx]]) which contains a [[CreateAssetTx]].\n        *\n        */\n        this.buildCreateNFTAssetTx = (utxoset, fromAddresses, changeAddresses, minterSets, name, symbol, memo = undefined, asOf = helperfunctions_1.UnixNow(), locktime = new bn_js_1.default(0)) => __awaiter(this, void 0, void 0, function* () {\n            let from = this._cleanAddressArray(fromAddresses, \"buildCreateNFTAssetTx\").map(a => bintools.stringToAddress(a));\n            let change = this._cleanAddressArray(changeAddresses, \"buildCreateNFTAssetTx\").map(a => bintools.stringToAddress(a));\n            if (memo instanceof payload_1.PayloadBase) {\n                memo = memo.getPayload();\n            }\n            if (name.length > constants_1.AVMConstants.ASSETNAMELEN) {\n                /* istanbul ignore next */\n                throw new Error(\"Error - AVMAPI.buildCreateNFTAssetTx: Names may not exceed length of \" + constants_1.AVMConstants.ASSETNAMELEN);\n            }\n            if (symbol.length > constants_1.AVMConstants.SYMBOLMAXLEN) {\n                /* istanbul ignore next */\n                throw new Error(\"Error - AVMAPI.buildCreateNFTAssetTx: Symbols may not exceed length of \" + constants_1.AVMConstants.SYMBOLMAXLEN);\n            }\n            let avaxAssetID = yield this.getAVAXAssetID();\n            const builtUnsignedTx = utxoset.buildCreateNFTAssetTx(this.core.getNetworkID(), bintools.cb58Decode(this.blockchainID), from, change, minterSets, name, symbol, this.getCreationTxFee(), avaxAssetID, memo, asOf, locktime);\n            if (!(yield this.checkGooseEgg(builtUnsignedTx, this.getCreationTxFee()))) {\n                /* istanbul ignore next */\n                throw new Error(\"Failed Goose Egg Check\");\n            }\n            return builtUnsignedTx;\n        });\n        /**\n        * Creates an unsigned transaction. For more granular control, you may create your own\n        * [[UnsignedTx]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s, and [[TransferOperation]]s).\n        *\n        * @param utxoset  A set of UTXOs that the transaction is built on\n        * @param owners Either a single or an array of [[OutputOwners]] to send the nft output\n        * @param fromAddresses The addresses being used to send the NFT from the utxoID provided\n        * @param changeAddresses The addresses that can spend the change remaining from the spent UTXOs\n        * @param utxoid A base58 utxoID or an array of base58 utxoIDs for the nft mint output this transaction is sending\n        * @param groupID Optional. The group this NFT is issued to.\n        * @param payload Optional. Data for NFT Payload as either a [[PayloadBase]] or a {@link https://github.com/feross/buffer|Buffer}\n        * @param memo Optional CB58 Buffer or String which contains arbitrary bytes, up to 256 bytes\n        * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n        *\n        * @returns An unsigned transaction ([[UnsignedTx]]) which contains an [[OperationTx]].\n        *\n        */\n        this.buildCreateNFTMintTx = (utxoset, owners, fromAddresses, changeAddresses, utxoid, groupID = 0, payload = undefined, memo = undefined, asOf = helperfunctions_1.UnixNow()) => __awaiter(this, void 0, void 0, function* () {\n            let from = this._cleanAddressArray(fromAddresses, \"buildCreateNFTMintTx\").map(a => bintools.stringToAddress(a));\n            let change = this._cleanAddressArray(changeAddresses, \"buildCreateNFTMintTx\").map(a => bintools.stringToAddress(a));\n            if (memo instanceof payload_1.PayloadBase) {\n                memo = memo.getPayload();\n            }\n            if (payload instanceof payload_1.PayloadBase) {\n                payload = payload.getPayload();\n            }\n            if (typeof utxoid === 'string') {\n                utxoid = [utxoid];\n            }\n            let avaxAssetID = yield this.getAVAXAssetID();\n            if (owners instanceof output_1.OutputOwners) {\n                owners = [owners];\n            }\n            const builtUnsignedTx = utxoset.buildCreateNFTMintTx(this.core.getNetworkID(), bintools.cb58Decode(this.blockchainID), owners, from, change, utxoid, groupID, payload, this.getTxFee(), avaxAssetID, memo, asOf);\n            if (!(yield this.checkGooseEgg(builtUnsignedTx))) {\n                /* istanbul ignore next */\n                throw new Error(\"Failed Goose Egg Check\");\n            }\n            return builtUnsignedTx;\n        });\n        /**\n         * Helper function which takes an unsigned transaction and signs it, returning the resulting [[Tx]].\n        *\n        * @param utx The unsigned transaction of type [[UnsignedTx]]\n        *\n        * @returns A signed transaction of type [[Tx]]\n        */\n        this.signTx = (utx) => utx.sign(this.keychain);\n        /**\n         * Calls the node's issueTx method from the API and returns the resulting transaction ID as a string.\n         *\n         * @param tx A string, {@link https://github.com/feross/buffer|Buffer}, or [[Tx]] representing a transaction\n         *\n         * @returns A Promise<string> representing the transaction ID of the posted transaction.\n         */\n        this.issueTx = (tx) => __awaiter(this, void 0, void 0, function* () {\n            let Transaction = '';\n            if (typeof tx === 'string') {\n                Transaction = tx;\n            }\n            else if (tx instanceof buffer_1.Buffer) {\n                const txobj = new tx_1.Tx();\n                txobj.fromBuffer(tx);\n                Transaction = txobj.toString();\n            }\n            else if (tx instanceof tx_1.Tx) {\n                Transaction = tx.toString();\n            }\n            else {\n                /* istanbul ignore next */\n                throw new Error('Error - avm.issueTx: provided tx is not expected type of string, Buffer, or Tx');\n            }\n            const params = {\n                tx: Transaction.toString(),\n            };\n            return this.callMethod('avm.issueTx', params).then((response) => response.data.result.txID);\n        });\n        /**\n         * Sends an amount of assetID to the specified address from a list of owned of addresses.\n         *\n         * @param username The user that owns the private keys associated with the `from` addresses\n         * @param password The password unlocking the user\n         * @param assetID The assetID of the asset to send\n         * @param amount The amount of the asset to be sent\n         * @param to The address of the recipient\n         * @param from Optional. An array of addresses managed by the node's keystore for this blockchain which will fund this transaction\n         * @param changeAddr Optional. An address to send the change\n         * @param memo Optional. CB58 Buffer or String which contains arbitrary bytes, up to 256 bytes\n         *\n         * @returns Promise for the string representing the transaction's ID.\n         */\n        this.send = (username, password, assetID, amount, to, from = undefined, changeAddr = undefined, memo = undefined) => __awaiter(this, void 0, void 0, function* () {\n            let asset;\n            let amnt;\n            if (typeof this.parseAddress(to) === 'undefined') {\n                /* istanbul ignore next */\n                throw new Error(`Error - AVMAPI.send: Invalid address format ${to}`);\n            }\n            if (typeof assetID !== 'string') {\n                asset = bintools.cb58Encode(assetID);\n            }\n            else {\n                asset = assetID;\n            }\n            if (typeof amount === 'number') {\n                amnt = new bn_js_1.default(amount);\n            }\n            else {\n                amnt = amount;\n            }\n            const params = {\n                username: username,\n                password: password,\n                assetID: asset,\n                amount: amnt.toString(10),\n                to: to\n            };\n            from = this._cleanAddressArray(from, 'send');\n            if (typeof from !== \"undefined\") {\n                params[\"from\"] = from;\n            }\n            if (typeof changeAddr !== 'undefined') {\n                if (typeof this.parseAddress(changeAddr) === 'undefined') {\n                    /* istanbul ignore next */\n                    throw new Error(`Error - AVMAPI.send: Invalid address format ${changeAddr}`);\n                }\n                params[\"changeAddr\"] = changeAddr;\n            }\n            if (typeof memo !== \"undefined\") {\n                if (typeof memo !== 'string') {\n                    params[\"memo\"] = bintools.cb58Encode(memo);\n                }\n                else {\n                    params[\"memo\"] = memo;\n                }\n            }\n            return this.callMethod('avm.send', params).then((response) => response.data.result);\n        });\n        /**\n         * Sends an amount of assetID to an array of specified addresses from a list of owned of addresses.\n         *\n         * @param username The user that owns the private keys associated with the `from` addresses\n         * @param password The password unlocking the user\n         * @param sendOutputs The array of SendOutputs. A SendOutput is an object literal which contains an assetID, amount, and to.\n         * @param from Optional. An array of addresses managed by the node's keystore for this blockchain which will fund this transaction\n         * @param changeAddr Optional. An address to send the change\n         * @param memo Optional. CB58 Buffer or String which contains arbitrary bytes, up to 256 bytes\n         *\n         * @returns Promise for the string representing the transaction's ID.\n         */\n        this.sendMultiple = (username, password, sendOutputs, from = undefined, changeAddr = undefined, memo = undefined) => __awaiter(this, void 0, void 0, function* () {\n            let asset;\n            let amnt;\n            let sOutputs = [];\n            sendOutputs.forEach((output) => {\n                if (typeof this.parseAddress(output.to) === 'undefined') {\n                    /* istanbul ignore next */\n                    throw new Error(`Error - AVMAPI.sendMultiple: Invalid address format ${output.to}`);\n                }\n                if (typeof output.assetID !== 'string') {\n                    asset = bintools.cb58Encode(output.assetID);\n                }\n                else {\n                    asset = output.assetID;\n                }\n                if (typeof output.amount === 'number') {\n                    amnt = new bn_js_1.default(output.amount);\n                }\n                else {\n                    amnt = output.amount;\n                }\n                sOutputs.push({ to: output.to, assetID: asset, amount: amnt.toString(10) });\n            });\n            const params = {\n                username: username,\n                password: password,\n                outputs: sOutputs,\n            };\n            from = this._cleanAddressArray(from, 'send');\n            if (typeof from !== \"undefined\") {\n                params[\"from\"] = from;\n            }\n            if (typeof changeAddr !== 'undefined') {\n                if (typeof this.parseAddress(changeAddr) === 'undefined') {\n                    /* istanbul ignore next */\n                    throw new Error(`Error - AVMAPI.send: Invalid address format ${changeAddr}`);\n                }\n                params[\"changeAddr\"] = changeAddr;\n            }\n            if (typeof memo !== \"undefined\") {\n                if (typeof memo !== 'string') {\n                    params[\"memo\"] = bintools.cb58Encode(memo);\n                }\n                else {\n                    params[\"memo\"] = memo;\n                }\n            }\n            return this.callMethod('avm.sendMultiple', params).then((response) => response.data.result);\n        });\n        /**\n         * Given a JSON representation of this Virtual Machine’s genesis state, create the byte representation of that state.\n         *\n         * @param genesisData The blockchain's genesis data object\n         *\n         * @returns Promise of a string of bytes\n         */\n        this.buildGenesis = (genesisData) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                genesisData,\n            };\n            return this.callMethod('avm.buildGenesis', params).then((response) => {\n                const r = response.data.result.bytes;\n                return r;\n            });\n        });\n        this.blockchainID = blockchainID;\n        const netid = core.getNetworkID();\n        if (netid in constants_2.Defaults.network && blockchainID in constants_2.Defaults.network[netid]) {\n            const { alias } = constants_2.Defaults.network[netid][blockchainID];\n            this.keychain = new keychain_1.KeyChain(this.core.getHRP(), alias);\n        }\n        else {\n            this.keychain = new keychain_1.KeyChain(this.core.getHRP(), blockchainID);\n        }\n    }\n    /**\n     * @ignore\n     */\n    _cleanAddressArray(addresses, caller) {\n        const addrs = [];\n        const chainid = this.getBlockchainAlias() ? this.getBlockchainAlias() : this.getBlockchainID();\n        if (addresses && addresses.length > 0) {\n            for (let i = 0; i < addresses.length; i++) {\n                if (typeof addresses[i] === 'string') {\n                    if (typeof this.parseAddress(addresses[i]) === 'undefined') {\n                        /* istanbul ignore next */\n                        throw new Error(`Error - AVMAPI.${caller}: Invalid address format ${addresses[i]}`);\n                    }\n                    addrs.push(addresses[i]);\n                }\n                else {\n                    addrs.push(bintools.addressToString(this.core.getHRP(), chainid, addresses[i]));\n                }\n            }\n        }\n        return addrs;\n    }\n}\nexports.AVMAPI = AVMAPI;\n//# sourceMappingURL=data:application/json;base64,","'use strict';\n\nconst inherits = require('inherits');\nconst Buffer = require('safer-buffer').Buffer;\nconst Node = require('../base/node');\n\n// Import DER constants\nconst der = require('../constants/der');\n\nfunction DEREncoder(entity) {\n  this.enc = 'der';\n  this.name = entity.name;\n  this.entity = entity;\n\n  // Construct base tree\n  this.tree = new DERNode();\n  this.tree._init(entity.body);\n}\nmodule.exports = DEREncoder;\n\nDEREncoder.prototype.encode = function encode(data, reporter) {\n  return this.tree._encode(data, reporter).join();\n};\n\n// Tree methods\n\nfunction DERNode(parent) {\n  Node.call(this, 'der', parent);\n}\ninherits(DERNode, Node);\n\nDERNode.prototype._encodeComposite = function encodeComposite(tag,\n  primitive,\n  cls,\n  content) {\n  const encodedTag = encodeTag(tag, primitive, cls, this.reporter);\n\n  // Short form\n  if (content.length < 0x80) {\n    const header = Buffer.alloc(2);\n    header[0] = encodedTag;\n    header[1] = content.length;\n    return this._createEncoderBuffer([ header, content ]);\n  }\n\n  // Long form\n  // Count octets required to store length\n  let lenOctets = 1;\n  for (let i = content.length; i >= 0x100; i >>= 8)\n    lenOctets++;\n\n  const header = Buffer.alloc(1 + 1 + lenOctets);\n  header[0] = encodedTag;\n  header[1] = 0x80 | lenOctets;\n\n  for (let i = 1 + lenOctets, j = content.length; j > 0; i--, j >>= 8)\n    header[i] = j & 0xff;\n\n  return this._createEncoderBuffer([ header, content ]);\n};\n\nDERNode.prototype._encodeStr = function encodeStr(str, tag) {\n  if (tag === 'bitstr') {\n    return this._createEncoderBuffer([ str.unused | 0, str.data ]);\n  } else if (tag === 'bmpstr') {\n    const buf = Buffer.alloc(str.length * 2);\n    for (let i = 0; i < str.length; i++) {\n      buf.writeUInt16BE(str.charCodeAt(i), i * 2);\n    }\n    return this._createEncoderBuffer(buf);\n  } else if (tag === 'numstr') {\n    if (!this._isNumstr(str)) {\n      return this.reporter.error('Encoding of string type: numstr supports ' +\n                                 'only digits and space');\n    }\n    return this._createEncoderBuffer(str);\n  } else if (tag === 'printstr') {\n    if (!this._isPrintstr(str)) {\n      return this.reporter.error('Encoding of string type: printstr supports ' +\n                                 'only latin upper and lower case letters, ' +\n                                 'digits, space, apostrophe, left and rigth ' +\n                                 'parenthesis, plus sign, comma, hyphen, ' +\n                                 'dot, slash, colon, equal sign, ' +\n                                 'question mark');\n    }\n    return this._createEncoderBuffer(str);\n  } else if (/str$/.test(tag)) {\n    return this._createEncoderBuffer(str);\n  } else if (tag === 'objDesc') {\n    return this._createEncoderBuffer(str);\n  } else {\n    return this.reporter.error('Encoding of string type: ' + tag +\n                               ' unsupported');\n  }\n};\n\nDERNode.prototype._encodeObjid = function encodeObjid(id, values, relative) {\n  if (typeof id === 'string') {\n    if (!values)\n      return this.reporter.error('string objid given, but no values map found');\n    if (!values.hasOwnProperty(id))\n      return this.reporter.error('objid not found in values map');\n    id = values[id].split(/[\\s.]+/g);\n    for (let i = 0; i < id.length; i++)\n      id[i] |= 0;\n  } else if (Array.isArray(id)) {\n    id = id.slice();\n    for (let i = 0; i < id.length; i++)\n      id[i] |= 0;\n  }\n\n  if (!Array.isArray(id)) {\n    return this.reporter.error('objid() should be either array or string, ' +\n                               'got: ' + JSON.stringify(id));\n  }\n\n  if (!relative) {\n    if (id[1] >= 40)\n      return this.reporter.error('Second objid identifier OOB');\n    id.splice(0, 2, id[0] * 40 + id[1]);\n  }\n\n  // Count number of octets\n  let size = 0;\n  for (let i = 0; i < id.length; i++) {\n    let ident = id[i];\n    for (size++; ident >= 0x80; ident >>= 7)\n      size++;\n  }\n\n  const objid = Buffer.alloc(size);\n  let offset = objid.length - 1;\n  for (let i = id.length - 1; i >= 0; i--) {\n    let ident = id[i];\n    objid[offset--] = ident & 0x7f;\n    while ((ident >>= 7) > 0)\n      objid[offset--] = 0x80 | (ident & 0x7f);\n  }\n\n  return this._createEncoderBuffer(objid);\n};\n\nfunction two(num) {\n  if (num < 10)\n    return '0' + num;\n  else\n    return num;\n}\n\nDERNode.prototype._encodeTime = function encodeTime(time, tag) {\n  let str;\n  const date = new Date(time);\n\n  if (tag === 'gentime') {\n    str = [\n      two(date.getUTCFullYear()),\n      two(date.getUTCMonth() + 1),\n      two(date.getUTCDate()),\n      two(date.getUTCHours()),\n      two(date.getUTCMinutes()),\n      two(date.getUTCSeconds()),\n      'Z'\n    ].join('');\n  } else if (tag === 'utctime') {\n    str = [\n      two(date.getUTCFullYear() % 100),\n      two(date.getUTCMonth() + 1),\n      two(date.getUTCDate()),\n      two(date.getUTCHours()),\n      two(date.getUTCMinutes()),\n      two(date.getUTCSeconds()),\n      'Z'\n    ].join('');\n  } else {\n    this.reporter.error('Encoding ' + tag + ' time is not supported yet');\n  }\n\n  return this._encodeStr(str, 'octstr');\n};\n\nDERNode.prototype._encodeNull = function encodeNull() {\n  return this._createEncoderBuffer('');\n};\n\nDERNode.prototype._encodeInt = function encodeInt(num, values) {\n  if (typeof num === 'string') {\n    if (!values)\n      return this.reporter.error('String int or enum given, but no values map');\n    if (!values.hasOwnProperty(num)) {\n      return this.reporter.error('Values map doesn\\'t contain: ' +\n                                 JSON.stringify(num));\n    }\n    num = values[num];\n  }\n\n  // Bignum, assume big endian\n  if (typeof num !== 'number' && !Buffer.isBuffer(num)) {\n    const numArray = num.toArray();\n    if (!num.sign && numArray[0] & 0x80) {\n      numArray.unshift(0);\n    }\n    num = Buffer.from(numArray);\n  }\n\n  if (Buffer.isBuffer(num)) {\n    let size = num.length;\n    if (num.length === 0)\n      size++;\n\n    const out = Buffer.alloc(size);\n    num.copy(out);\n    if (num.length === 0)\n      out[0] = 0;\n    return this._createEncoderBuffer(out);\n  }\n\n  if (num < 0x80)\n    return this._createEncoderBuffer(num);\n\n  if (num < 0x100)\n    return this._createEncoderBuffer([0, num]);\n\n  let size = 1;\n  for (let i = num; i >= 0x100; i >>= 8)\n    size++;\n\n  const out = new Array(size);\n  for (let i = out.length - 1; i >= 0; i--) {\n    out[i] = num & 0xff;\n    num >>= 8;\n  }\n  if(out[0] & 0x80) {\n    out.unshift(0);\n  }\n\n  return this._createEncoderBuffer(Buffer.from(out));\n};\n\nDERNode.prototype._encodeBool = function encodeBool(value) {\n  return this._createEncoderBuffer(value ? 0xff : 0);\n};\n\nDERNode.prototype._use = function use(entity, obj) {\n  if (typeof entity === 'function')\n    entity = entity(obj);\n  return entity._getEncoder('der').tree;\n};\n\nDERNode.prototype._skipDefault = function skipDefault(dataBuffer, reporter, parent) {\n  const state = this._baseState;\n  let i;\n  if (state['default'] === null)\n    return false;\n\n  const data = dataBuffer.join();\n  if (state.defaultBuffer === undefined)\n    state.defaultBuffer = this._encodeValue(state['default'], reporter, parent).join();\n\n  if (data.length !== state.defaultBuffer.length)\n    return false;\n\n  for (i=0; i < data.length; i++)\n    if (data[i] !== state.defaultBuffer[i])\n      return false;\n\n  return true;\n};\n\n// Utility methods\n\nfunction encodeTag(tag, primitive, cls, reporter) {\n  let res;\n\n  if (tag === 'seqof')\n    tag = 'seq';\n  else if (tag === 'setof')\n    tag = 'set';\n\n  if (der.tagByName.hasOwnProperty(tag))\n    res = der.tagByName[tag];\n  else if (typeof tag === 'number' && (tag | 0) === tag)\n    res = tag;\n  else\n    return reporter.error('Unknown tag: ' + tag);\n\n  if (res >= 0x1f)\n    return reporter.error('Multi-octet tag encoding unsupported');\n\n  if (!primitive)\n    res |= 0x20;\n\n  res |= (der.tagClassByName[cls || 'universal'] << 6);\n\n  return res;\n}\n","'use strict';\n\nconst base = exports;\n\nbase.Reporter = require('./reporter').Reporter;\nbase.DecoderBuffer = require('./buffer').DecoderBuffer;\nbase.EncoderBuffer = require('./buffer').EncoderBuffer;\nbase.Node = require('./node');\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EVMInput = exports.SECPTransferInput = exports.AmountInput = exports.TransferableInput = exports.SelectInputClass = void 0;\n/**\n * @packageDocumentation\n * @module API-EVM-Inputs\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst input_1 = require(\"../../common/input\");\nconst outputs_1 = require(\"./outputs\");\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst credentials_1 = require(\"../../common/credentials\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\n/**\n * Takes a buffer representing the output and returns the proper [[Input]] instance.\n *\n * @param inputID A number representing the inputID parsed prior to the bytes passed in\n *\n * @returns An instance of an [[Input]]-extended class.\n */\nexports.SelectInputClass = (inputID, ...args) => {\n    if (inputID === constants_1.EVMConstants.SECPINPUTID) {\n        return new SECPTransferInput(...args);\n    }\n    /* istanbul ignore next */\n    throw new Error(`Error - SelectInputClass: unknown inputID ${inputID}`);\n};\nclass TransferableInput extends input_1.StandardTransferableInput {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"TransferableInput\";\n        this._typeID = undefined;\n    }\n    //serialize is inherited\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.input = exports.SelectInputClass(fields[\"input\"][\"_typeID\"]);\n        this.input.deserialize(fields[\"input\"], encoding);\n    }\n    /**\n     * Takes a {@link https://github.com/feross/buffer|Buffer} containing a [[TransferableInput]], parses it, populates the class, and returns the length of the [[TransferableInput]] in bytes.\n     *\n     * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[TransferableInput]]\n     *\n     * @returns The length of the raw [[TransferableInput]]\n     */\n    fromBuffer(bytes, offset = 0) {\n        this.txid = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        this.outputidx = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        this.assetid = bintools.copyFrom(bytes, offset, offset + constants_1.EVMConstants.ASSETIDLEN);\n        offset += 32;\n        const inputid = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);\n        offset += 4;\n        this.input = exports.SelectInputClass(inputid);\n        return this.input.fromBuffer(bytes, offset);\n    }\n}\nexports.TransferableInput = TransferableInput;\nclass AmountInput extends input_1.StandardAmountInput {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"AmountInput\";\n        this._typeID = undefined;\n    }\n    //serialize and deserialize both are inherited\n    select(id, ...args) {\n        return exports.SelectInputClass(id, ...args);\n    }\n}\nexports.AmountInput = AmountInput;\nclass SECPTransferInput extends AmountInput {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"SECPTransferInput\";\n        this._typeID = constants_1.EVMConstants.SECPINPUTID;\n        this.getCredentialID = () => constants_1.EVMConstants.SECPCREDENTIAL;\n    }\n    //serialize and deserialize both are inherited\n    /**\n       * Returns the inputID for this input\n       */\n    getInputID() {\n        return constants_1.EVMConstants.SECPINPUTID;\n    }\n    create(...args) {\n        return new SECPTransferInput(...args);\n    }\n    clone() {\n        const newout = this.create();\n        newout.fromBuffer(this.toBuffer());\n        return newout;\n    }\n}\nexports.SECPTransferInput = SECPTransferInput;\nclass EVMInput extends outputs_1.EVMOutput {\n    /**\n     * An [[EVMInput]] class which contains address, amount, assetID, nonce.\n     *\n     * @param address is the EVM address from which to transfer funds.\n     * @param amount is the amount of the asset to be transferred (specified in nAVAX for AVAX and the smallest denomination for all other assets).\n     * @param assetID The assetID which is being sent as a {@link https://github.com/feross/buffer|Buffer} or as a string.\n     * @param nonce A {@link https://github.com/indutny/bn.js/|BN} or a number representing the nonce.\n     */\n    constructor(address = undefined, amount = undefined, assetID = undefined, nonce = undefined) {\n        super(address, amount, assetID);\n        this.nonce = buffer_1.Buffer.alloc(8);\n        this.nonceValue = new bn_js_1.default(0);\n        this.sigCount = buffer_1.Buffer.alloc(4);\n        this.sigIdxs = []; // idxs of signers from utxo\n        /**\n         * Returns the array of [[SigIdx]] for this [[Input]]\n         */\n        this.getSigIdxs = () => this.sigIdxs;\n        /**\n         * Creates and adds a [[SigIdx]] to the [[Input]].\n         *\n         * @param addressIdx The index of the address to reference in the signatures\n         * @param address The address of the source of the signature\n         */\n        this.addSignatureIdx = (addressIdx, address) => {\n            const sigidx = new credentials_1.SigIdx();\n            const b = buffer_1.Buffer.alloc(4);\n            b.writeUInt32BE(addressIdx, 0);\n            sigidx.fromBuffer(b);\n            sigidx.setSource(address);\n            this.sigIdxs.push(sigidx);\n            this.sigCount.writeUInt32BE(this.sigIdxs.length, 0);\n        };\n        /**\n         * Returns the nonce as a {@link https://github.com/indutny/bn.js/|BN}.\n         */\n        this.getNonce = () => this.nonceValue.clone();\n        this.getCredentialID = () => constants_1.EVMConstants.SECPCREDENTIAL;\n        if (typeof nonce !== 'undefined') {\n            // convert number nonce to BN\n            let n;\n            if (typeof nonce === 'number') {\n                n = new bn_js_1.default(nonce);\n            }\n            else {\n                n = nonce;\n            }\n            this.nonceValue = n.clone();\n            this.nonce = bintools.fromBNToBuffer(n, 8);\n        }\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[EVMOutput]].\n     */\n    toBuffer() {\n        let superbuff = super.toBuffer();\n        let bsize = superbuff.length + this.nonce.length;\n        let barr = [superbuff, this.nonce];\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n    /**\n     * Decodes the [[EVMInput]] as a {@link https://github.com/feross/buffer|Buffer} and returns the size.\n     *\n     * @param bytes The bytes as a {@link https://github.com/feross/buffer|Buffer}.\n     * @param offset An offset as a number.\n     */\n    fromBuffer(bytes, offset = 0) {\n        offset = super.fromBuffer(bytes, offset);\n        this.nonce = bintools.copyFrom(bytes, offset, offset + 8);\n        offset += 8;\n        return offset;\n    }\n    /**\n     * Returns a base-58 representation of the [[EVMInput]].\n     */\n    toString() {\n        return bintools.bufferToB58(this.toBuffer());\n    }\n    create(...args) {\n        return new EVMInput(...args);\n    }\n    clone() {\n        const newEVMInput = this.create();\n        newEVMInput.fromBuffer(this.toBuffer());\n        return newEVMInput;\n    }\n}\nexports.EVMInput = EVMInput;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SECPTransferInput = exports.AmountInput = exports.TransferableInput = exports.SelectInputClass = void 0;\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst input_1 = require(\"../../common/input\");\nconst serialization_1 = require(\"../../utils/serialization\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serializer = serialization_1.Serialization.getInstance();\n/**\n * Takes a buffer representing the output and returns the proper [[Input]] instance.\n *\n * @param inputid A number representing the inputID parsed prior to the bytes passed in\n *\n * @returns An instance of an [[Input]]-extended class.\n */\nexports.SelectInputClass = (inputid, ...args) => {\n    if (inputid === constants_1.AVMConstants.SECPINPUTID) {\n        return new SECPTransferInput(...args);\n    }\n    /* istanbul ignore next */\n    throw new Error(`Error - SelectInputClass: unknown inputid ${inputid}`);\n};\nclass TransferableInput extends input_1.StandardTransferableInput {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"TransferableInput\";\n        this._typeID = undefined;\n    }\n    //serialize is inherited\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.input = exports.SelectInputClass(fields[\"input\"][\"_typeID\"]);\n        this.input.deserialize(fields[\"input\"], encoding);\n    }\n    /**\n     * Takes a {@link https://github.com/feross/buffer|Buffer} containing a [[TransferableInput]], parses it, populates the class, and returns the length of the [[TransferableInput]] in bytes.\n     *\n     * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[TransferableInput]]\n     *\n     * @returns The length of the raw [[TransferableInput]]\n     */\n    fromBuffer(bytes, offset = 0) {\n        this.txid = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        this.outputidx = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        this.assetid = bintools.copyFrom(bytes, offset, offset + constants_1.AVMConstants.ASSETIDLEN);\n        offset += 32;\n        const inputid = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);\n        offset += 4;\n        this.input = exports.SelectInputClass(inputid);\n        return this.input.fromBuffer(bytes, offset);\n    }\n}\nexports.TransferableInput = TransferableInput;\nclass AmountInput extends input_1.StandardAmountInput {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"AmountInput\";\n        this._typeID = undefined;\n    }\n    //serialize and deserialize both are inherited\n    select(id, ...args) {\n        return exports.SelectInputClass(id, ...args);\n    }\n}\nexports.AmountInput = AmountInput;\nclass SECPTransferInput extends AmountInput {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"SECPTransferInput\";\n        this._typeID = constants_1.AVMConstants.SECPINPUTID;\n        this.getCredentialID = () => constants_1.AVMConstants.SECPCREDENTIAL;\n    }\n    //serialize and deserialize both are inherited\n    /**\n       * Returns the inputID for this input\n       */\n    getInputID() {\n        return constants_1.AVMConstants.SECPINPUTID;\n    }\n    create(...args) {\n        return new SECPTransferInput(...args);\n    }\n    clone() {\n        const newout = this.create();\n        newout.fromBuffer(this.toBuffer());\n        return newout;\n    }\n}\nexports.SECPTransferInput = SECPTransferInput;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2FwaXMvYXZtL2lucHV0cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFLQSxvRUFBNEM7QUFDNUMsMkNBQTJDO0FBQzNDLDhDQUEyRjtBQUMzRiw2REFBOEU7QUFFOUU7O0dBRUc7QUFDSCxNQUFNLFFBQVEsR0FBRyxrQkFBUSxDQUFDLFdBQVcsRUFBRSxDQUFDO0FBQ3hDLE1BQU0sVUFBVSxHQUFHLDZCQUFhLENBQUMsV0FBVyxFQUFFLENBQUM7QUFFL0M7Ozs7OztHQU1HO0FBQ1UsUUFBQSxnQkFBZ0IsR0FBRyxDQUFDLE9BQWMsRUFBRSxHQUFHLElBQWUsRUFBUSxFQUFFO0lBQzNFLElBQUksT0FBTyxLQUFLLHdCQUFZLENBQUMsV0FBVyxFQUFFO1FBQ3hDLE9BQU8sSUFBSSxpQkFBaUIsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDO0tBQ3ZDO0lBQ0QsMEJBQTBCO0lBQzFCLE1BQU0sSUFBSSxLQUFLLENBQUMsNkNBQTZDLE9BQU8sRUFBRSxDQUFDLENBQUM7QUFDMUUsQ0FBQyxDQUFDO0FBRUYsTUFBYSxpQkFBa0IsU0FBUSxpQ0FBeUI7SUFBaEU7O1FBQ1ksY0FBUyxHQUFHLG1CQUFtQixDQUFDO1FBQ2hDLFlBQU8sR0FBRyxTQUFTLENBQUM7SUE4QmhDLENBQUM7SUE1QkMsd0JBQXdCO0lBRXhCLFdBQVcsQ0FBQyxNQUFhLEVBQUUsV0FBOEIsS0FBSztRQUM1RCxLQUFLLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FBQztRQUNwQyxJQUFJLENBQUMsS0FBSyxHQUFHLHdCQUFnQixDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO1FBQzFELElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUNwRCxDQUFDO0lBRUQ7Ozs7OztPQU1HO0lBQ0gsVUFBVSxDQUFDLEtBQVksRUFBRSxTQUFnQixDQUFDO1FBQ3hDLElBQUksQ0FBQyxJQUFJLEdBQUcsUUFBUSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU0sR0FBRyxFQUFFLENBQUMsQ0FBQztRQUMxRCxNQUFNLElBQUksRUFBRSxDQUFDO1FBQ2IsSUFBSSxDQUFDLFNBQVMsR0FBRyxRQUFRLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQzlELE1BQU0sSUFBSSxDQUFDLENBQUM7UUFDWixJQUFJLENBQUMsT0FBTyxHQUFHLFFBQVEsQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxNQUFNLEdBQUcsd0JBQVksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNsRixNQUFNLElBQUksRUFBRSxDQUFDO1FBQ2IsTUFBTSxPQUFPLEdBQVUsUUFBUSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDcEYsTUFBTSxJQUFJLENBQUMsQ0FBQztRQUNaLElBQUksQ0FBQyxLQUFLLEdBQUcsd0JBQWdCLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDdkMsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDOUMsQ0FBQztDQUVGO0FBaENELDhDQWdDQztBQUVELE1BQXNCLFdBQVksU0FBUSwyQkFBbUI7SUFBN0Q7O1FBQ1ksY0FBUyxHQUFHLGFBQWEsQ0FBQztRQUMxQixZQUFPLEdBQUcsU0FBUyxDQUFDO0lBT2hDLENBQUM7SUFMQyw4Q0FBOEM7SUFFOUMsTUFBTSxDQUFDLEVBQVMsRUFBRSxHQUFHLElBQVc7UUFDOUIsT0FBTyx3QkFBZ0IsQ0FBQyxFQUFFLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQztJQUN2QyxDQUFDO0NBQ0Y7QUFURCxrQ0FTQztBQUVELE1BQWEsaUJBQWtCLFNBQVEsV0FBVztJQUFsRDs7UUFDWSxjQUFTLEdBQUcsbUJBQW1CLENBQUM7UUFDaEMsWUFBTyxHQUFHLHdCQUFZLENBQUMsV0FBVyxDQUFDO1FBVzdDLG9CQUFlLEdBQUcsR0FBVSxFQUFFLENBQUMsd0JBQVksQ0FBQyxjQUFjLENBQUM7SUFXN0QsQ0FBQztJQXBCQyw4Q0FBOEM7SUFFOUM7O1NBRUs7SUFDTCxVQUFVO1FBQ1IsT0FBTyx3QkFBWSxDQUFDLFdBQVcsQ0FBQztJQUNsQyxDQUFDO0lBSUQsTUFBTSxDQUFDLEdBQUcsSUFBVTtRQUNsQixPQUFPLElBQUksaUJBQWlCLENBQUMsR0FBRyxJQUFJLENBQVMsQ0FBQztJQUNoRCxDQUFDO0lBRUQsS0FBSztRQUNILE1BQU0sTUFBTSxHQUFxQixJQUFJLENBQUMsTUFBTSxFQUFFLENBQUE7UUFDOUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNuQyxPQUFPLE1BQWMsQ0FBQztJQUN4QixDQUFDO0NBQ0Y7QUF4QkQsOENBd0JDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAcGFja2FnZURvY3VtZW50YXRpb25cbiAqIEBtb2R1bGUgQVBJLUFWTS1JbnB1dHNcbiAqL1xuaW1wb3J0IHsgQnVmZmVyIH0gZnJvbSAnYnVmZmVyLyc7XG5pbXBvcnQgQmluVG9vbHMgZnJvbSAnLi4vLi4vdXRpbHMvYmludG9vbHMnO1xuaW1wb3J0IHsgQVZNQ29uc3RhbnRzIH0gZnJvbSAnLi9jb25zdGFudHMnO1xuaW1wb3J0IHsgSW5wdXQsIFN0YW5kYXJkVHJhbnNmZXJhYmxlSW5wdXQsIFN0YW5kYXJkQW1vdW50SW5wdXQgfSBmcm9tICcuLi8uLi9jb21tb24vaW5wdXQnO1xuaW1wb3J0IHsgU2VyaWFsaXphdGlvbiwgU2VyaWFsaXplZEVuY29kaW5nIH0gZnJvbSAnLi4vLi4vdXRpbHMvc2VyaWFsaXphdGlvbic7XG5cbi8qKlxuICogQGlnbm9yZVxuICovXG5jb25zdCBiaW50b29scyA9IEJpblRvb2xzLmdldEluc3RhbmNlKCk7XG5jb25zdCBzZXJpYWxpemVyID0gU2VyaWFsaXphdGlvbi5nZXRJbnN0YW5jZSgpO1xuXG4vKipcbiAqIFRha2VzIGEgYnVmZmVyIHJlcHJlc2VudGluZyB0aGUgb3V0cHV0IGFuZCByZXR1cm5zIHRoZSBwcm9wZXIgW1tJbnB1dF1dIGluc3RhbmNlLlxuICpcbiAqIEBwYXJhbSBpbnB1dGlkIEEgbnVtYmVyIHJlcHJlc2VudGluZyB0aGUgaW5wdXRJRCBwYXJzZWQgcHJpb3IgdG8gdGhlIGJ5dGVzIHBhc3NlZCBpblxuICpcbiAqIEByZXR1cm5zIEFuIGluc3RhbmNlIG9mIGFuIFtbSW5wdXRdXS1leHRlbmRlZCBjbGFzcy5cbiAqL1xuZXhwb3J0IGNvbnN0IFNlbGVjdElucHV0Q2xhc3MgPSAoaW5wdXRpZDpudW1iZXIsIC4uLmFyZ3M6QXJyYXk8YW55Pik6SW5wdXQgPT4ge1xuICBpZiAoaW5wdXRpZCA9PT0gQVZNQ29uc3RhbnRzLlNFQ1BJTlBVVElEKSB7XG4gICAgcmV0dXJuIG5ldyBTRUNQVHJhbnNmZXJJbnB1dCguLi5hcmdzKTtcbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICB0aHJvdyBuZXcgRXJyb3IoYEVycm9yIC0gU2VsZWN0SW5wdXRDbGFzczogdW5rbm93biBpbnB1dGlkICR7aW5wdXRpZH1gKTtcbn07XG5cbmV4cG9ydCBjbGFzcyBUcmFuc2ZlcmFibGVJbnB1dCBleHRlbmRzIFN0YW5kYXJkVHJhbnNmZXJhYmxlSW5wdXQge1xuICBwcm90ZWN0ZWQgX3R5cGVOYW1lID0gXCJUcmFuc2ZlcmFibGVJbnB1dFwiO1xuICBwcm90ZWN0ZWQgX3R5cGVJRCA9IHVuZGVmaW5lZDtcblxuICAvL3NlcmlhbGl6ZSBpcyBpbmhlcml0ZWRcblxuICBkZXNlcmlhbGl6ZShmaWVsZHM6b2JqZWN0LCBlbmNvZGluZzpTZXJpYWxpemVkRW5jb2RpbmcgPSBcImhleFwiKSB7XG4gICAgc3VwZXIuZGVzZXJpYWxpemUoZmllbGRzLCBlbmNvZGluZyk7XG4gICAgdGhpcy5pbnB1dCA9IFNlbGVjdElucHV0Q2xhc3MoZmllbGRzW1wiaW5wdXRcIl1bXCJfdHlwZUlEXCJdKTtcbiAgICB0aGlzLmlucHV0LmRlc2VyaWFsaXplKGZpZWxkc1tcImlucHV0XCJdLCBlbmNvZGluZyk7XG4gIH1cblxuICAvKipcbiAgICogVGFrZXMgYSB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXJ8QnVmZmVyfSBjb250YWluaW5nIGEgW1tUcmFuc2ZlcmFibGVJbnB1dF1dLCBwYXJzZXMgaXQsIHBvcHVsYXRlcyB0aGUgY2xhc3MsIGFuZCByZXR1cm5zIHRoZSBsZW5ndGggb2YgdGhlIFtbVHJhbnNmZXJhYmxlSW5wdXRdXSBpbiBieXRlcy5cbiAgICpcbiAgICogQHBhcmFtIGJ5dGVzIEEge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyfEJ1ZmZlcn0gY29udGFpbmluZyBhIHJhdyBbW1RyYW5zZmVyYWJsZUlucHV0XV1cbiAgICpcbiAgICogQHJldHVybnMgVGhlIGxlbmd0aCBvZiB0aGUgcmF3IFtbVHJhbnNmZXJhYmxlSW5wdXRdXVxuICAgKi9cbiAgZnJvbUJ1ZmZlcihieXRlczpCdWZmZXIsIG9mZnNldDpudW1iZXIgPSAwKTpudW1iZXIge1xuICAgIHRoaXMudHhpZCA9IGJpbnRvb2xzLmNvcHlGcm9tKGJ5dGVzLCBvZmZzZXQsIG9mZnNldCArIDMyKTtcbiAgICBvZmZzZXQgKz0gMzI7XG4gICAgdGhpcy5vdXRwdXRpZHggPSBiaW50b29scy5jb3B5RnJvbShieXRlcywgb2Zmc2V0LCBvZmZzZXQgKyA0KTtcbiAgICBvZmZzZXQgKz0gNDtcbiAgICB0aGlzLmFzc2V0aWQgPSBiaW50b29scy5jb3B5RnJvbShieXRlcywgb2Zmc2V0LCBvZmZzZXQgKyBBVk1Db25zdGFudHMuQVNTRVRJRExFTik7XG4gICAgb2Zmc2V0ICs9IDMyO1xuICAgIGNvbnN0IGlucHV0aWQ6bnVtYmVyID0gYmludG9vbHMuY29weUZyb20oYnl0ZXMsIG9mZnNldCwgb2Zmc2V0ICsgNCkucmVhZFVJbnQzMkJFKDApO1xuICAgIG9mZnNldCArPSA0O1xuICAgIHRoaXMuaW5wdXQgPSBTZWxlY3RJbnB1dENsYXNzKGlucHV0aWQpO1xuICAgIHJldHVybiB0aGlzLmlucHV0LmZyb21CdWZmZXIoYnl0ZXMsIG9mZnNldCk7XG4gIH1cbiAgXG59XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBBbW91bnRJbnB1dCBleHRlbmRzIFN0YW5kYXJkQW1vdW50SW5wdXQge1xuICBwcm90ZWN0ZWQgX3R5cGVOYW1lID0gXCJBbW91bnRJbnB1dFwiO1xuICBwcm90ZWN0ZWQgX3R5cGVJRCA9IHVuZGVmaW5lZDtcblxuICAvL3NlcmlhbGl6ZSBhbmQgZGVzZXJpYWxpemUgYm90aCBhcmUgaW5oZXJpdGVkXG5cbiAgc2VsZWN0KGlkOm51bWJlciwgLi4uYXJnczogYW55W10pOklucHV0IHtcbiAgICByZXR1cm4gU2VsZWN0SW5wdXRDbGFzcyhpZCwgLi4uYXJncyk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFNFQ1BUcmFuc2ZlcklucHV0IGV4dGVuZHMgQW1vdW50SW5wdXQge1xuICBwcm90ZWN0ZWQgX3R5cGVOYW1lID0gXCJTRUNQVHJhbnNmZXJJbnB1dFwiO1xuICBwcm90ZWN0ZWQgX3R5cGVJRCA9IEFWTUNvbnN0YW50cy5TRUNQSU5QVVRJRDtcblxuICAvL3NlcmlhbGl6ZSBhbmQgZGVzZXJpYWxpemUgYm90aCBhcmUgaW5oZXJpdGVkXG5cbiAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgaW5wdXRJRCBmb3IgdGhpcyBpbnB1dFxuICAgICAqL1xuICBnZXRJbnB1dElEKCk6bnVtYmVyIHtcbiAgICByZXR1cm4gQVZNQ29uc3RhbnRzLlNFQ1BJTlBVVElEO1xuICB9XG5cbiAgZ2V0Q3JlZGVudGlhbElEID0gKCk6bnVtYmVyID0+IEFWTUNvbnN0YW50cy5TRUNQQ1JFREVOVElBTDtcblxuICBjcmVhdGUoLi4uYXJnczphbnlbXSk6dGhpc3tcbiAgICByZXR1cm4gbmV3IFNFQ1BUcmFuc2ZlcklucHV0KC4uLmFyZ3MpIGFzIHRoaXM7XG4gIH1cblxuICBjbG9uZSgpOnRoaXMge1xuICAgIGNvbnN0IG5ld291dDpTRUNQVHJhbnNmZXJJbnB1dCA9IHRoaXMuY3JlYXRlKClcbiAgICBuZXdvdXQuZnJvbUJ1ZmZlcih0aGlzLnRvQnVmZmVyKCkpO1xuICAgIHJldHVybiBuZXdvdXQgYXMgdGhpcztcbiAgfVxufVxuIl19","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ImportTx = void 0;\n/**\n * @packageDocumentation\n * @module API-AVM-ImportTx\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst inputs_1 = require(\"./inputs\");\nconst basetx_1 = require(\"./basetx\");\nconst credentials_1 = require(\"./credentials\");\nconst credentials_2 = require(\"../../common/credentials\");\nconst constants_2 = require(\"../../utils/constants\");\nconst serialization_1 = require(\"../../utils/serialization\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serializer = serialization_1.Serialization.getInstance();\n/**\n * Class representing an unsigned Import transaction.\n */\nclass ImportTx extends basetx_1.BaseTx {\n    /**\n     * Class representing an unsigned Import transaction.\n     *\n     * @param networkid Optional networkid, [[DefaultNetworkID]]\n     * @param blockchainid Optional blockchainid, default Buffer.alloc(32, 16)\n     * @param outs Optional array of the [[TransferableOutput]]s\n     * @param ins Optional array of the [[TransferableInput]]s\n     * @param memo Optional {@link https://github.com/feross/buffer|Buffer} for the memo field\n     * @param sourceChain Optional chainid for the source inputs to import. Default platform chainid.\n     * @param importIns Array of [[TransferableInput]]s used in the transaction\n     */\n    constructor(networkid = constants_2.DefaultNetworkID, blockchainid = buffer_1.Buffer.alloc(32, 16), outs = undefined, ins = undefined, memo = undefined, sourceChain = undefined, importIns = undefined) {\n        super(networkid, blockchainid, outs, ins, memo);\n        this._typeName = \"ImportTx\";\n        this._typeID = constants_1.AVMConstants.IMPORTTX;\n        this.sourceChain = buffer_1.Buffer.alloc(32);\n        this.numIns = buffer_1.Buffer.alloc(4);\n        this.importIns = [];\n        /**\n           * Returns the id of the [[ImportTx]]\n           */\n        this.getTxType = () => {\n            return this._typeID;\n        };\n        /**\n         * Returns a {@link https://github.com/feross/buffer|Buffer} for the source chainid.\n         */\n        this.getSourceChain = () => {\n            return this.sourceChain;\n        };\n        this.sourceChain = sourceChain; // do not correct, if it's wrong it'll bomb on toBuffer\n        if (typeof importIns !== 'undefined' && Array.isArray(importIns)) {\n            for (let i = 0; i < importIns.length; i++) {\n                if (!(importIns[i] instanceof inputs_1.TransferableInput)) {\n                    throw new Error(\"Error - ImportTx.constructor: invalid TransferableInput in array parameter 'importIns'\");\n                }\n            }\n            this.importIns = importIns;\n        }\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { \"sourceChain\": serializer.encoder(this.sourceChain, encoding, \"Buffer\", \"cb58\"), \"importIns\": this.importIns.map((i) => i.serialize(encoding)) });\n    }\n    ;\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.sourceChain = serializer.decoder(fields[\"sourceChain\"], encoding, \"cb58\", \"Buffer\", 32);\n        this.importIns = fields[\"importIns\"].map((i) => {\n            let ii = new inputs_1.TransferableInput();\n            ii.deserialize(i, encoding);\n            return ii;\n        });\n        this.numIns = buffer_1.Buffer.alloc(4);\n        this.numIns.writeUInt32BE(this.importIns.length, 0);\n    }\n    /**\n       * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[ImportTx]], parses it, populates the class, and returns the length of the [[ImportTx]] in bytes.\n       *\n       * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[ImportTx]]\n       *\n       * @returns The length of the raw [[ImportTx]]\n       *\n       * @remarks assume not-checksummed\n       */\n    fromBuffer(bytes, offset = 0) {\n        offset = super.fromBuffer(bytes, offset);\n        this.sourceChain = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        this.numIns = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const numIns = this.numIns.readUInt32BE(0);\n        for (let i = 0; i < numIns; i++) {\n            const anIn = new inputs_1.TransferableInput();\n            offset = anIn.fromBuffer(bytes, offset);\n            this.importIns.push(anIn);\n        }\n        return offset;\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[ImportTx]].\n     */\n    toBuffer() {\n        if (typeof this.sourceChain === \"undefined\") {\n            throw new Error(\"ImportTx.toBuffer -- this.sourceChain is undefined\");\n        }\n        this.numIns.writeUInt32BE(this.importIns.length, 0);\n        let barr = [super.toBuffer(), this.sourceChain, this.numIns];\n        this.importIns = this.importIns.sort(inputs_1.TransferableInput.comparator());\n        for (let i = 0; i < this.importIns.length; i++) {\n            barr.push(this.importIns[i].toBuffer());\n        }\n        return buffer_1.Buffer.concat(barr);\n    }\n    /**\n       * Returns an array of [[TransferableInput]]s in this transaction.\n       */\n    getImportInputs() {\n        return this.importIns;\n    }\n    clone() {\n        let newbase = new ImportTx();\n        newbase.fromBuffer(this.toBuffer());\n        return newbase;\n    }\n    create(...args) {\n        return new ImportTx(...args);\n    }\n    /**\n       * Takes the bytes of an [[UnsignedTx]] and returns an array of [[Credential]]s\n       *\n       * @param msg A Buffer for the [[UnsignedTx]]\n       * @param kc An [[KeyChain]] used in signing\n       *\n       * @returns An array of [[Credential]]s\n       */\n    sign(msg, kc) {\n        const sigs = super.sign(msg, kc);\n        for (let i = 0; i < this.importIns.length; i++) {\n            const cred = credentials_1.SelectCredentialClass(this.importIns[i].getInput().getCredentialID());\n            const sigidxs = this.importIns[i].getInput().getSigIdxs();\n            for (let j = 0; j < sigidxs.length; j++) {\n                const keypair = kc.getKey(sigidxs[j].getSource());\n                const signval = keypair.sign(msg);\n                const sig = new credentials_2.Signature();\n                sig.fromBuffer(signval);\n                cred.addSignature(sig);\n            }\n            sigs.push(cred);\n        }\n        return sigs;\n    }\n}\nexports.ImportTx = ImportTx;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UTXOID = exports.NFTTransferOperation = exports.NFTMintOperation = exports.SECPMintOperation = exports.TransferableOperation = exports.Operation = exports.SelectOperationClass = void 0;\n/**\n * @packageDocumentation\n * @module API-AVM-Operations\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst outputs_1 = require(\"./outputs\");\nconst nbytes_1 = require(\"../../common/nbytes\");\nconst credentials_1 = require(\"../../common/credentials\");\nconst output_1 = require(\"../../common/output\");\nconst serialization_1 = require(\"../../utils/serialization\");\nconst bintools = bintools_1.default.getInstance();\nconst serializer = serialization_1.Serialization.getInstance();\n/**\n * Takes a buffer representing the output and returns the proper [[Operation]] instance.\n *\n * @param opid A number representing the operation ID parsed prior to the bytes passed in\n *\n * @returns An instance of an [[Operation]]-extended class.\n */\nexports.SelectOperationClass = (opid, ...args) => {\n    if (opid == constants_1.AVMConstants.SECPMINTOPID) {\n        return new SECPMintOperation(...args);\n    }\n    else if (opid == constants_1.AVMConstants.NFTMINTOPID) {\n        return new NFTMintOperation(...args);\n    }\n    else if (opid == constants_1.AVMConstants.NFTXFEROPID) {\n        return new NFTTransferOperation(...args);\n    }\n    /* istanbul ignore next */\n    throw new Error(\"Error - SelectOperationClass: unknown opid \" + opid);\n};\n/**\n * A class representing an operation. All operation types must extend on this class.\n */\nclass Operation extends serialization_1.Serializable {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"Operation\";\n        this._typeID = undefined;\n        this.sigCount = buffer_1.Buffer.alloc(4);\n        this.sigIdxs = []; // idxs of signers from utxo\n        /**\n           * Returns the array of [[SigIdx]] for this [[Operation]]\n           */\n        this.getSigIdxs = () => this.sigIdxs;\n        /**\n           * Creates and adds a [[SigIdx]] to the [[Operation]].\n           *\n           * @param addressIdx The index of the address to reference in the signatures\n           * @param address The address of the source of the signature\n           */\n        this.addSignatureIdx = (addressIdx, address) => {\n            const sigidx = new credentials_1.SigIdx();\n            const b = buffer_1.Buffer.alloc(4);\n            b.writeUInt32BE(addressIdx, 0);\n            sigidx.fromBuffer(b);\n            sigidx.setSource(address);\n            this.sigIdxs.push(sigidx);\n            this.sigCount.writeUInt32BE(this.sigIdxs.length, 0);\n        };\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { \"sigIdxs\": this.sigIdxs.map((s) => s.serialize(encoding)) });\n    }\n    ;\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.sigIdxs = fields[\"sigIdxs\"].map((s) => {\n            let sidx = new credentials_1.SigIdx();\n            sidx.deserialize(s, encoding);\n            return sidx;\n        });\n        this.sigCount.writeUInt32BE(this.sigIdxs.length, 0);\n    }\n    fromBuffer(bytes, offset = 0) {\n        this.sigCount = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const sigCount = this.sigCount.readUInt32BE(0);\n        this.sigIdxs = [];\n        for (let i = 0; i < sigCount; i++) {\n            const sigidx = new credentials_1.SigIdx();\n            const sigbuff = bintools.copyFrom(bytes, offset, offset + 4);\n            sigidx.fromBuffer(sigbuff);\n            offset += 4;\n            this.sigIdxs.push(sigidx);\n        }\n        return offset;\n    }\n    toBuffer() {\n        this.sigCount.writeUInt32BE(this.sigIdxs.length, 0);\n        let bsize = this.sigCount.length;\n        const barr = [this.sigCount];\n        for (let i = 0; i < this.sigIdxs.length; i++) {\n            const b = this.sigIdxs[i].toBuffer();\n            barr.push(b);\n            bsize += b.length;\n        }\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n    /**\n     * Returns a base-58 string representing the [[NFTMintOperation]].\n     */\n    toString() {\n        return bintools.bufferToB58(this.toBuffer());\n    }\n}\nexports.Operation = Operation;\nOperation.comparator = () => (a, b) => {\n    const aoutid = buffer_1.Buffer.alloc(4);\n    aoutid.writeUInt32BE(a.getOperationID(), 0);\n    const abuff = a.toBuffer();\n    const boutid = buffer_1.Buffer.alloc(4);\n    boutid.writeUInt32BE(b.getOperationID(), 0);\n    const bbuff = b.toBuffer();\n    const asort = buffer_1.Buffer.concat([aoutid, abuff], aoutid.length + abuff.length);\n    const bsort = buffer_1.Buffer.concat([boutid, bbuff], boutid.length + bbuff.length);\n    return buffer_1.Buffer.compare(asort, bsort);\n};\n/**\n * A class which contains an [[Operation]] for transfers.\n *\n */\nclass TransferableOperation extends serialization_1.Serializable {\n    constructor(assetid = undefined, utxoids = undefined, operation = undefined) {\n        super();\n        this._typeName = \"TransferableOperation\";\n        this._typeID = undefined;\n        this.assetid = buffer_1.Buffer.alloc(32);\n        this.utxoIDs = [];\n        /**\n         * Returns the assetID as a {@link https://github.com/feross/buffer|Buffer}.\n         */\n        this.getAssetID = () => this.assetid;\n        /**\n         * Returns an array of UTXOIDs in this operation.\n         */\n        this.getUTXOIDs = () => this.utxoIDs;\n        /**\n         * Returns the operation\n         */\n        this.getOperation = () => this.operation;\n        if (typeof assetid !== 'undefined' && assetid.length === constants_1.AVMConstants.ASSETIDLEN\n            && operation instanceof Operation && typeof utxoids !== 'undefined'\n            && Array.isArray(utxoids)) {\n            this.assetid = assetid;\n            this.operation = operation;\n            for (let i = 0; i < utxoids.length; i++) {\n                const utxoid = new UTXOID();\n                if (typeof utxoids[i] === 'string') {\n                    utxoid.fromString(utxoids[i]);\n                }\n                else if (utxoids[i] instanceof buffer_1.Buffer) {\n                    utxoid.fromBuffer(utxoids[i]);\n                }\n                else if (utxoids[i] instanceof UTXOID) {\n                    utxoid.fromString(utxoids[i].toString()); // clone\n                }\n                this.utxoIDs.push(utxoid);\n            }\n        }\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { \"assetid\": serializer.encoder(this.assetid, encoding, \"Buffer\", \"cb58\", 32), \"utxoIDs\": this.utxoIDs.map((u) => u.serialize(encoding)), \"operation\": this.operation.serialize(encoding) });\n    }\n    ;\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.assetid = serializer.decoder(fields[\"assetid\"], encoding, \"cb58\", \"Buffer\", 32);\n        this.utxoIDs = fields[\"utxoIDs\"].map((u) => {\n            let utxoid = new UTXOID();\n            utxoid.deserialize(u, encoding);\n            return utxoid;\n        });\n        this.operation = exports.SelectOperationClass(fields[\"operation\"][\"_typeID\"]);\n        this.operation.deserialize(fields[\"operation\"], encoding);\n    }\n    fromBuffer(bytes, offset = 0) {\n        this.assetid = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        const numutxoIDs = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);\n        offset += 4;\n        this.utxoIDs = [];\n        for (let i = 0; i < numutxoIDs; i++) {\n            const utxoid = new UTXOID();\n            offset = utxoid.fromBuffer(bytes, offset);\n            this.utxoIDs.push(utxoid);\n        }\n        const opid = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);\n        offset += 4;\n        this.operation = exports.SelectOperationClass(opid);\n        return this.operation.fromBuffer(bytes, offset);\n    }\n    toBuffer() {\n        const numutxoIDs = buffer_1.Buffer.alloc(4);\n        numutxoIDs.writeUInt32BE(this.utxoIDs.length, 0);\n        let bsize = this.assetid.length + numutxoIDs.length;\n        const barr = [this.assetid, numutxoIDs];\n        this.utxoIDs = this.utxoIDs.sort(UTXOID.comparator());\n        for (let i = 0; i < this.utxoIDs.length; i++) {\n            const b = this.utxoIDs[i].toBuffer();\n            barr.push(b);\n            bsize += b.length;\n        }\n        const opid = buffer_1.Buffer.alloc(4);\n        opid.writeUInt32BE(this.operation.getOperationID(), 0);\n        barr.push(opid);\n        bsize += opid.length;\n        const b = this.operation.toBuffer();\n        bsize += b.length;\n        barr.push(b);\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n}\nexports.TransferableOperation = TransferableOperation;\n/**\n * Returns a function used to sort an array of [[TransferableOperation]]s\n */\nTransferableOperation.comparator = () => {\n    return function (a, b) {\n        return buffer_1.Buffer.compare(a.toBuffer(), b.toBuffer());\n    };\n};\n/**\n * An [[Operation]] class which specifies a SECP256k1 Mint Op.\n */\nclass SECPMintOperation extends Operation {\n    /**\n     * An [[Operation]] class which mints new tokens on an assetID.\n     *\n     * @param mintOutput The [[SECPMintOutput]] that will be produced by this transaction.\n     * @param transferOutput A [[SECPTransferOutput]] that will be produced from this minting operation.\n     */\n    constructor(mintOutput = undefined, transferOutput = undefined) {\n        super();\n        this._typeName = \"SECPMintOperation\";\n        this._typeID = constants_1.AVMConstants.SECPMINTOPID;\n        this.mintOutput = undefined;\n        this.transferOutput = undefined;\n        if (typeof mintOutput !== 'undefined') {\n            this.mintOutput = mintOutput;\n        }\n        if (typeof transferOutput !== 'undefined') {\n            this.transferOutput = transferOutput;\n        }\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { \"mintOutput\": this.mintOutput.serialize(encoding), \"transferOutputs\": this.transferOutput.serialize(encoding) });\n    }\n    ;\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.mintOutput = new outputs_1.SECPMintOutput();\n        this.mintOutput.deserialize(fields[\"mintOutput\"], encoding);\n        this.transferOutput = new outputs_1.SECPTransferOutput();\n        this.transferOutput.deserialize(fields[\"transferOutputs\"], encoding);\n    }\n    /**\n     * Returns the operation ID.\n     */\n    getOperationID() {\n        return this._typeID;\n    }\n    /**\n     * Returns the credential ID.\n     */\n    getCredentialID() {\n        return constants_1.AVMConstants.SECPCREDENTIAL;\n    }\n    /**\n     * Returns the [[SECPMintOutput]] to be produced by this operation.\n     */\n    getMintOutput() {\n        return this.mintOutput;\n    }\n    /**\n     * Returns [[SECPTransferOutput]] to be produced by this operation.\n     */\n    getTransferOutput() {\n        return this.transferOutput;\n    }\n    /**\n     * Popuates the instance from a {@link https://github.com/feross/buffer|Buffer} representing the [[SECPMintOperation]] and returns the updated offset.\n     */\n    fromBuffer(bytes, offset = 0) {\n        offset = super.fromBuffer(bytes, offset);\n        this.mintOutput = new outputs_1.SECPMintOutput();\n        offset = this.mintOutput.fromBuffer(bytes, offset);\n        this.transferOutput = new outputs_1.SECPTransferOutput();\n        offset = this.transferOutput.fromBuffer(bytes, offset);\n        return offset;\n    }\n    /**\n     * Returns the buffer representing the [[SECPMintOperation]] instance.\n     */\n    toBuffer() {\n        let superbuff = super.toBuffer();\n        let mintoutBuff = this.mintOutput.toBuffer();\n        let transferOutBuff = this.transferOutput.toBuffer();\n        let bsize = superbuff.length +\n            mintoutBuff.length +\n            transferOutBuff.length;\n        let barr = [\n            superbuff,\n            mintoutBuff,\n            transferOutBuff\n        ];\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n}\nexports.SECPMintOperation = SECPMintOperation;\n/**\n * An [[Operation]] class which specifies a NFT Mint Op.\n */\nclass NFTMintOperation extends Operation {\n    /**\n     * An [[Operation]] class which contains an NFT on an assetID.\n     *\n     * @param groupID The group to which to issue the NFT Output\n     * @param payload A {@link https://github.com/feross/buffer|Buffer} of the NFT payload\n     * @param outputOwners An array of outputOwners\n     */\n    constructor(groupID = undefined, payload = undefined, outputOwners = undefined) {\n        super();\n        this._typeName = \"NFTMintOperation\";\n        this._typeID = constants_1.AVMConstants.NFTMINTOPID;\n        this.groupID = buffer_1.Buffer.alloc(4);\n        this.outputOwners = [];\n        /**\n         * Returns the payload.\n         */\n        this.getPayload = () => {\n            return bintools.copyFrom(this.payload, 0);\n        };\n        /**\n         * Returns the payload's raw {@link https://github.com/feross/buffer|Buffer} with length prepended, for use with [[PayloadBase]]'s fromBuffer\n         */\n        this.getPayloadBuffer = () => {\n            let payloadlen = buffer_1.Buffer.alloc(4);\n            payloadlen.writeUInt32BE(this.payload.length, 0);\n            return buffer_1.Buffer.concat([payloadlen, bintools.copyFrom(this.payload, 0)]);\n        };\n        /**\n         * Returns the outputOwners.\n         */\n        this.getOutputOwners = () => {\n            return this.outputOwners;\n        };\n        if (typeof groupID !== 'undefined' && typeof payload !== 'undefined' && outputOwners.length) {\n            this.groupID.writeUInt32BE((groupID ? groupID : 0), 0);\n            this.payload = payload;\n            this.outputOwners = outputOwners;\n        }\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { \"groupID\": serializer.encoder(this.groupID, encoding, \"Buffer\", \"decimalString\", 4), \"payload\": serializer.encoder(this.payload, encoding, \"Buffer\", \"hex\"), \"outputOwners\": this.outputOwners.map((o) => o.serialize(encoding)) });\n    }\n    ;\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.groupID = serializer.decoder(fields[\"groupID\"], encoding, \"decimalString\", \"Buffer\", 4);\n        this.payload = serializer.decoder(fields[\"payload\"], encoding, \"hex\", \"Buffer\");\n        this.outputOwners = fields[\"outputOwners\"].map((o) => {\n            let oo = new output_1.OutputOwners();\n            oo.deserialize(o, encoding);\n            return oo;\n        });\n    }\n    /**\n     * Returns the operation ID.\n     */\n    getOperationID() {\n        return this._typeID;\n    }\n    /**\n     * Returns the credential ID.\n     */\n    getCredentialID() {\n        return constants_1.AVMConstants.NFTCREDENTIAL;\n    }\n    /**\n     * Popuates the instance from a {@link https://github.com/feross/buffer|Buffer} representing the [[NFTMintOperation]] and returns the updated offset.\n     */\n    fromBuffer(bytes, offset = 0) {\n        offset = super.fromBuffer(bytes, offset);\n        this.groupID = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        let payloadLen = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);\n        offset += 4;\n        this.payload = bintools.copyFrom(bytes, offset, offset + payloadLen);\n        offset += payloadLen;\n        let numoutputs = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);\n        offset += 4;\n        this.outputOwners = [];\n        for (let i = 0; i < numoutputs; i++) {\n            let outputOwner = new output_1.OutputOwners();\n            offset = outputOwner.fromBuffer(bytes, offset);\n            this.outputOwners.push(outputOwner);\n        }\n        return offset;\n    }\n    /**\n     * Returns the buffer representing the [[NFTMintOperation]] instance.\n     */\n    toBuffer() {\n        let superbuff = super.toBuffer();\n        let payloadlen = buffer_1.Buffer.alloc(4);\n        payloadlen.writeUInt32BE(this.payload.length, 0);\n        let outputownerslen = buffer_1.Buffer.alloc(4);\n        outputownerslen.writeUInt32BE(this.outputOwners.length, 0);\n        let bsize = superbuff.length +\n            this.groupID.length +\n            payloadlen.length +\n            this.payload.length +\n            outputownerslen.length;\n        let barr = [\n            superbuff,\n            this.groupID,\n            payloadlen,\n            this.payload,\n            outputownerslen\n        ];\n        for (let i = 0; i < this.outputOwners.length; i++) {\n            let b = this.outputOwners[i].toBuffer();\n            barr.push(b);\n            bsize += b.length;\n        }\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n    /**\n     * Returns a base-58 string representing the [[NFTMintOperation]].\n     */\n    toString() {\n        return bintools.bufferToB58(this.toBuffer());\n    }\n}\nexports.NFTMintOperation = NFTMintOperation;\n/**\n * A [[Operation]] class which specifies a NFT Transfer Op.\n */\nclass NFTTransferOperation extends Operation {\n    /**\n       * An [[Operation]] class which contains an NFT on an assetID.\n       *\n       * @param output An [[NFTTransferOutput]]\n       */\n    constructor(output = undefined) {\n        super();\n        this._typeName = \"NFTTransferOperation\";\n        this._typeID = constants_1.AVMConstants.NFTXFEROPID;\n        this.getOutput = () => this.output;\n        if (typeof output !== 'undefined') {\n            this.output = output;\n        }\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { \"output\": this.output.serialize(encoding) });\n    }\n    ;\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.output = new outputs_1.NFTTransferOutput();\n        this.output.deserialize(fields[\"output\"], encoding);\n    }\n    /**\n     * Returns the operation ID.\n     */\n    getOperationID() {\n        return this._typeID;\n    }\n    /**\n     * Returns the credential ID.\n     */\n    getCredentialID() {\n        return constants_1.AVMConstants.NFTCREDENTIAL;\n    }\n    /**\n       * Popuates the instance from a {@link https://github.com/feross/buffer|Buffer} representing the [[NFTTransferOperation]] and returns the updated offset.\n       */\n    fromBuffer(bytes, offset = 0) {\n        offset = super.fromBuffer(bytes, offset);\n        this.output = new outputs_1.NFTTransferOutput();\n        return this.output.fromBuffer(bytes, offset);\n    }\n    /**\n       * Returns the buffer representing the [[NFTTransferOperation]] instance.\n       */\n    toBuffer() {\n        const superbuff = super.toBuffer();\n        const outbuff = this.output.toBuffer();\n        const bsize = superbuff.length + outbuff.length;\n        const barr = [superbuff, outbuff];\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n    /**\n       * Returns a base-58 string representing the [[NFTTransferOperation]].\n       */\n    toString() {\n        return bintools.bufferToB58(this.toBuffer());\n    }\n}\nexports.NFTTransferOperation = NFTTransferOperation;\n/**\n * CKC - Make generic, use everywhere.\n */\n/**\n * Class for representing a UTXOID used in [[TransferableOp]] types\n */\nclass UTXOID extends nbytes_1.NBytes {\n    /**\n       * Class for representing a UTXOID used in [[TransferableOp]] types\n       */\n    constructor() {\n        super();\n        this._typeName = \"UTXOID\";\n        this._typeID = undefined;\n        //serialize and deserialize both are inherited\n        this.bytes = buffer_1.Buffer.alloc(36);\n        this.bsize = 36;\n    }\n    /**\n       * Returns a base-58 representation of the [[UTXOID]].\n       */\n    toString() {\n        return bintools.cb58Encode(this.toBuffer());\n    }\n    /**\n       * Takes a base-58 string containing an [[UTXOID]], parses it, populates the class, and returns the length of the UTXOID in bytes.\n       *\n       * @param bytes A base-58 string containing a raw [[UTXOID]]\n       *\n       * @returns The length of the raw [[UTXOID]]\n       */\n    fromString(utxoid) {\n        const utxoidbuff = bintools.b58ToBuffer(utxoid);\n        if (utxoidbuff.length === 40 && bintools.validateChecksum(utxoidbuff)) {\n            const newbuff = bintools.copyFrom(utxoidbuff, 0, utxoidbuff.length - 4);\n            if (newbuff.length === 36) {\n                this.bytes = newbuff;\n            }\n        }\n        else if (utxoidbuff.length === 40) {\n            throw new Error('Error - UTXOID.fromString: invalid checksum on address');\n        }\n        else if (utxoidbuff.length === 36) {\n            this.bytes = utxoidbuff;\n        }\n        else {\n            /* istanbul ignore next */\n            throw new Error('Error - UTXOID.fromString: invalid address');\n        }\n        return this.getSize();\n    }\n    clone() {\n        let newbase = new UTXOID();\n        newbase.fromBuffer(this.toBuffer());\n        return newbase;\n    }\n    create(...args) {\n        return new UTXOID();\n    }\n}\nexports.UTXOID = UTXOID;\n/**\n   * Returns a function used to sort an array of [[UTXOID]]s\n   */\nUTXOID.comparator = () => (a, b) => buffer_1.Buffer.compare(a.toBuffer(), b.toBuffer());\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\n/**\n * @packageDocumentation\n * @module API-EVM-Credentials\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SECPCredential = exports.SelectCredentialClass = void 0;\nconst constants_1 = require(\"./constants\");\nconst credentials_1 = require(\"../../common/credentials\");\n/**\n * Takes a buffer representing the credential and returns the proper [[Credential]] instance.\n *\n * @param credid A number representing the credential ID parsed prior to the bytes passed in\n *\n * @returns An instance of an [[Credential]]-extended class.\n */\nexports.SelectCredentialClass = (credid, ...args) => {\n    if (credid === constants_1.EVMConstants.SECPCREDENTIAL) {\n        return new SECPCredential(...args);\n    }\n    /* istanbul ignore next */\n    throw new Error(`Error - SelectCredentialClass: unknown credid ${credid}`);\n};\nclass SECPCredential extends credentials_1.Credential {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"SECPCredential\";\n        this._typeID = constants_1.EVMConstants.SECPCREDENTIAL;\n    }\n    //serialize and deserialize both are inherited\n    getCredentialID() {\n        return this._typeID;\n    }\n    clone() {\n        let newbase = new SECPCredential();\n        newbase.fromBuffer(this.toBuffer());\n        return newbase;\n    }\n    create(...args) {\n        return new SECPCredential(...args);\n    }\n    select(id, ...args) {\n        let credential = exports.SelectCredentialClass(id, ...args);\n        return credential;\n    }\n}\nexports.SECPCredential = SECPCredential;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlZGVudGlhbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpcy9ldm0vY3JlZGVudGlhbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7R0FHRzs7O0FBRUgsMkNBQTJDO0FBQzNDLDBEQUFzRDtBQUV0RDs7Ozs7O0dBTUc7QUFDVSxRQUFBLHFCQUFxQixHQUFHLENBQUMsTUFBYyxFQUFFLEdBQUcsSUFBVyxFQUFjLEVBQUU7SUFDbEYsSUFBSSxNQUFNLEtBQUssd0JBQVksQ0FBQyxjQUFjLEVBQUU7UUFDMUMsT0FBTyxJQUFJLGNBQWMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDO0tBQ3BDO0lBQ0QsMEJBQTBCO0lBQzFCLE1BQU0sSUFBSSxLQUFLLENBQUMsaURBQWlELE1BQU0sRUFBRSxDQUFDLENBQUM7QUFDN0UsQ0FBQyxDQUFDO0FBRUYsTUFBYSxjQUFlLFNBQVEsd0JBQVU7SUFBOUM7O1FBQ1ksY0FBUyxHQUFXLGdCQUFnQixDQUFDO1FBQ3JDLFlBQU8sR0FBVyx3QkFBWSxDQUFDLGNBQWMsQ0FBQztJQXNCMUQsQ0FBQztJQXBCQyw4Q0FBOEM7SUFFOUMsZUFBZTtRQUNiLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUN0QixDQUFDO0lBRUQsS0FBSztRQUNILElBQUksT0FBTyxHQUFtQixJQUFJLGNBQWMsRUFBRSxDQUFDO1FBQ25ELE9BQU8sQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7UUFDcEMsT0FBTyxPQUFlLENBQUM7SUFDekIsQ0FBQztJQUVELE1BQU0sQ0FBQyxHQUFHLElBQVc7UUFDbkIsT0FBTyxJQUFJLGNBQWMsQ0FBQyxHQUFHLElBQUksQ0FBUyxDQUFDO0lBQzdDLENBQUM7SUFFRCxNQUFNLENBQUMsRUFBVSxFQUFFLEdBQUcsSUFBVztRQUMvQixJQUFJLFVBQVUsR0FBZSw2QkFBcUIsQ0FBQyxFQUFFLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQztRQUNoRSxPQUFPLFVBQVUsQ0FBQztJQUNwQixDQUFDO0NBQ0Y7QUF4QkQsd0NBd0JDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAcGFja2FnZURvY3VtZW50YXRpb25cbiAqIEBtb2R1bGUgQVBJLUVWTS1DcmVkZW50aWFsc1xuICovXG5cbmltcG9ydCB7IEVWTUNvbnN0YW50cyB9IGZyb20gJy4vY29uc3RhbnRzJztcbmltcG9ydCB7IENyZWRlbnRpYWwgfSBmcm9tICcuLi8uLi9jb21tb24vY3JlZGVudGlhbHMnO1xuXG4vKipcbiAqIFRha2VzIGEgYnVmZmVyIHJlcHJlc2VudGluZyB0aGUgY3JlZGVudGlhbCBhbmQgcmV0dXJucyB0aGUgcHJvcGVyIFtbQ3JlZGVudGlhbF1dIGluc3RhbmNlLlxuICpcbiAqIEBwYXJhbSBjcmVkaWQgQSBudW1iZXIgcmVwcmVzZW50aW5nIHRoZSBjcmVkZW50aWFsIElEIHBhcnNlZCBwcmlvciB0byB0aGUgYnl0ZXMgcGFzc2VkIGluXG4gKlxuICogQHJldHVybnMgQW4gaW5zdGFuY2Ugb2YgYW4gW1tDcmVkZW50aWFsXV0tZXh0ZW5kZWQgY2xhc3MuXG4gKi9cbmV4cG9ydCBjb25zdCBTZWxlY3RDcmVkZW50aWFsQ2xhc3MgPSAoY3JlZGlkOiBudW1iZXIsIC4uLmFyZ3M6IGFueVtdKTogQ3JlZGVudGlhbCA9PiB7XG4gIGlmIChjcmVkaWQgPT09IEVWTUNvbnN0YW50cy5TRUNQQ1JFREVOVElBTCkge1xuICAgIHJldHVybiBuZXcgU0VDUENyZWRlbnRpYWwoLi4uYXJncyk7XG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgdGhyb3cgbmV3IEVycm9yKGBFcnJvciAtIFNlbGVjdENyZWRlbnRpYWxDbGFzczogdW5rbm93biBjcmVkaWQgJHtjcmVkaWR9YCk7XG59O1xuXG5leHBvcnQgY2xhc3MgU0VDUENyZWRlbnRpYWwgZXh0ZW5kcyBDcmVkZW50aWFsIHtcbiAgcHJvdGVjdGVkIF90eXBlTmFtZTogc3RyaW5nID0gXCJTRUNQQ3JlZGVudGlhbFwiO1xuICBwcm90ZWN0ZWQgX3R5cGVJRDogbnVtYmVyID0gRVZNQ29uc3RhbnRzLlNFQ1BDUkVERU5USUFMO1xuXG4gIC8vc2VyaWFsaXplIGFuZCBkZXNlcmlhbGl6ZSBib3RoIGFyZSBpbmhlcml0ZWRcblxuICBnZXRDcmVkZW50aWFsSUQoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fdHlwZUlEO1xuICB9XG5cbiAgY2xvbmUoKTogdGhpcyB7XG4gICAgbGV0IG5ld2Jhc2U6IFNFQ1BDcmVkZW50aWFsID0gbmV3IFNFQ1BDcmVkZW50aWFsKCk7XG4gICAgbmV3YmFzZS5mcm9tQnVmZmVyKHRoaXMudG9CdWZmZXIoKSk7XG4gICAgcmV0dXJuIG5ld2Jhc2UgYXMgdGhpcztcbiAgfVxuXG4gIGNyZWF0ZSguLi5hcmdzOiBhbnlbXSk6IHRoaXMge1xuICAgIHJldHVybiBuZXcgU0VDUENyZWRlbnRpYWwoLi4uYXJncykgYXMgdGhpcztcbiAgfVxuXG4gIHNlbGVjdChpZDogbnVtYmVyLCAuLi5hcmdzOiBhbnlbXSk6IENyZWRlbnRpYWwge1xuICAgIGxldCBjcmVkZW50aWFsOiBDcmVkZW50aWFsID0gU2VsZWN0Q3JlZGVudGlhbENsYXNzKGlkLCAuLi5hcmdzKTtcbiAgICByZXR1cm4gY3JlZGVudGlhbDtcbiAgfVxufVxuXG4iXX0=","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CreateAssetTx = void 0;\n/**\n * @packageDocumentation\n * @module API-AVM-CreateAssetTx\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst initialstates_1 = require(\"./initialstates\");\nconst basetx_1 = require(\"./basetx\");\nconst constants_2 = require(\"../../utils/constants\");\nconst serialization_1 = require(\"../../utils/serialization\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serializer = serialization_1.Serialization.getInstance();\nclass CreateAssetTx extends basetx_1.BaseTx {\n    /**\n     * Class representing an unsigned Create Asset transaction.\n     *\n     * @param networkid Optional networkid, [[DefaultNetworkID]]\n     * @param blockchainid Optional blockchainid, default Buffer.alloc(32, 16)\n     * @param outs Optional array of the [[TransferableOutput]]s\n     * @param ins Optional array of the [[TransferableInput]]s\n     * @param memo Optional {@link https://github.com/feross/buffer|Buffer} for the memo field\n     * @param name String for the descriptive name of the asset\n     * @param symbol String for the ticker symbol of the asset\n     * @param denomination Optional number for the denomination which is 10^D. D must be >= 0 and <= 32. Ex: $1 AVAX = 10^9 $nAVAX\n     * @param initialstate Optional [[InitialStates]] that represent the intial state of a created asset\n     */\n    constructor(networkid = constants_2.DefaultNetworkID, blockchainid = buffer_1.Buffer.alloc(32, 16), outs = undefined, ins = undefined, memo = undefined, name = undefined, symbol = undefined, denomination = undefined, initialstate = undefined) {\n        super(networkid, blockchainid, outs, ins, memo);\n        this._typeName = \"CreateAssetTx\";\n        this._typeID = constants_1.AVMConstants.CREATEASSETTX;\n        this.name = '';\n        this.symbol = '';\n        this.denomination = buffer_1.Buffer.alloc(1);\n        this.initialstate = new initialstates_1.InitialStates();\n        /**\n         * Returns the id of the [[CreateAssetTx]]\n         */\n        this.getTxType = () => {\n            return this._typeID;\n        };\n        /**\n         * Returns the array of array of [[Output]]s for the initial state\n         */\n        this.getInitialStates = () => this.initialstate;\n        /**\n         * Returns the string representation of the name\n         */\n        this.getName = () => this.name;\n        /**\n         * Returns the string representation of the symbol\n         */\n        this.getSymbol = () => this.symbol;\n        /**\n         * Returns the numeric representation of the denomination\n         */\n        this.getDenomination = () => this.denomination.readUInt8(0);\n        /**\n         * Returns the {@link https://github.com/feross/buffer|Buffer} representation of the denomination\n         */\n        this.getDenominationBuffer = () => {\n            return this.denomination;\n        };\n        if (typeof name === 'string' && typeof symbol === 'string' && typeof denomination === 'number'\n            && denomination >= 0 && denomination <= 32 && typeof initialstate !== 'undefined') {\n            this.initialstate = initialstate;\n            this.name = name;\n            this.symbol = symbol;\n            this.denomination.writeUInt8(denomination, 0);\n        }\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { \"name\": serializer.encoder(this.name, encoding, \"utf8\", \"utf8\"), \"symbol\": serializer.encoder(this.symbol, encoding, \"utf8\", \"utf8\"), \"denomination\": serializer.encoder(this.denomination, encoding, \"Buffer\", \"decimalString\", 1), \"initialstate\": this.initialstate.serialize(encoding) });\n    }\n    ;\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.name = serializer.decoder(fields[\"name\"], encoding, \"utf8\", \"utf8\");\n        this.symbol = serializer.decoder(fields[\"symbol\"], encoding, \"utf8\", \"utf8\");\n        this.denomination = serializer.decoder(fields[\"denomination\"], encoding, \"decimalString\", \"Buffer\", 1);\n        this.initialstate = new initialstates_1.InitialStates();\n        this.initialstate.deserialize(fields[\"initialstate\"], encoding);\n    }\n    /**\n     * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[CreateAssetTx]], parses it, populates the class, and returns the length of the [[CreateAssetTx]] in bytes.\n     *\n     * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[CreateAssetTx]]\n     *\n     * @returns The length of the raw [[CreateAssetTx]]\n     *\n     * @remarks assume not-checksummed\n     */\n    fromBuffer(bytes, offset = 0) {\n        offset = super.fromBuffer(bytes, offset);\n        const namesize = bintools.copyFrom(bytes, offset, offset + 2).readUInt16BE(0);\n        offset += 2;\n        this.name = bintools.copyFrom(bytes, offset, offset + namesize).toString('utf8');\n        offset += namesize;\n        const symsize = bintools.copyFrom(bytes, offset, offset + 2).readUInt16BE(0);\n        offset += 2;\n        this.symbol = bintools.copyFrom(bytes, offset, offset + symsize).toString('utf8');\n        offset += symsize;\n        this.denomination = bintools.copyFrom(bytes, offset, offset + 1);\n        offset += 1;\n        const inits = new initialstates_1.InitialStates();\n        offset = inits.fromBuffer(bytes, offset);\n        this.initialstate = inits;\n        return offset;\n    }\n    /**\n       * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[CreateAssetTx]].\n       */\n    toBuffer() {\n        const superbuff = super.toBuffer();\n        const initstatebuff = this.initialstate.toBuffer();\n        const namebuff = buffer_1.Buffer.alloc(this.name.length);\n        namebuff.write(this.name, 0, this.name.length, 'utf8');\n        const namesize = buffer_1.Buffer.alloc(2);\n        namesize.writeUInt16BE(this.name.length, 0);\n        const symbuff = buffer_1.Buffer.alloc(this.symbol.length);\n        symbuff.write(this.symbol, 0, this.symbol.length, 'utf8');\n        const symsize = buffer_1.Buffer.alloc(2);\n        symsize.writeUInt16BE(this.symbol.length, 0);\n        const bsize = superbuff.length + namesize.length + namebuff.length + symsize.length + symbuff.length + this.denomination.length + initstatebuff.length;\n        const barr = [superbuff, namesize, namebuff, symsize, symbuff, this.denomination, initstatebuff];\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n    clone() {\n        let newbase = new CreateAssetTx();\n        newbase.fromBuffer(this.toBuffer());\n        return newbase;\n    }\n    create(...args) {\n        return new CreateAssetTx(...args);\n    }\n}\nexports.CreateAssetTx = CreateAssetTx;\n//# sourceMappingURL=data:application/json;base64,","'use strict';\n\nconst inherits = require('inherits');\nconst Reporter = require('../base/reporter').Reporter;\nconst Buffer = require('safer-buffer').Buffer;\n\nfunction DecoderBuffer(base, options) {\n  Reporter.call(this, options);\n  if (!Buffer.isBuffer(base)) {\n    this.error('Input not Buffer');\n    return;\n  }\n\n  this.base = base;\n  this.offset = 0;\n  this.length = base.length;\n}\ninherits(DecoderBuffer, Reporter);\nexports.DecoderBuffer = DecoderBuffer;\n\nDecoderBuffer.isDecoderBuffer = function isDecoderBuffer(data) {\n  if (data instanceof DecoderBuffer) {\n    return true;\n  }\n\n  // Or accept compatible API\n  const isCompatible = typeof data === 'object' &&\n    Buffer.isBuffer(data.base) &&\n    data.constructor.name === 'DecoderBuffer' &&\n    typeof data.offset === 'number' &&\n    typeof data.length === 'number' &&\n    typeof data.save === 'function' &&\n    typeof data.restore === 'function' &&\n    typeof data.isEmpty === 'function' &&\n    typeof data.readUInt8 === 'function' &&\n    typeof data.skip === 'function' &&\n    typeof data.raw === 'function';\n\n  return isCompatible;\n};\n\nDecoderBuffer.prototype.save = function save() {\n  return { offset: this.offset, reporter: Reporter.prototype.save.call(this) };\n};\n\nDecoderBuffer.prototype.restore = function restore(save) {\n  // Return skipped data\n  const res = new DecoderBuffer(this.base);\n  res.offset = save.offset;\n  res.length = this.offset;\n\n  this.offset = save.offset;\n  Reporter.prototype.restore.call(this, save.reporter);\n\n  return res;\n};\n\nDecoderBuffer.prototype.isEmpty = function isEmpty() {\n  return this.offset === this.length;\n};\n\nDecoderBuffer.prototype.readUInt8 = function readUInt8(fail) {\n  if (this.offset + 1 <= this.length)\n    return this.base.readUInt8(this.offset++, true);\n  else\n    return this.error(fail || 'DecoderBuffer overrun');\n};\n\nDecoderBuffer.prototype.skip = function skip(bytes, fail) {\n  if (!(this.offset + bytes <= this.length))\n    return this.error(fail || 'DecoderBuffer overrun');\n\n  const res = new DecoderBuffer(this.base);\n\n  // Share reporter state\n  res._reporterState = this._reporterState;\n\n  res.offset = this.offset;\n  res.length = this.offset + bytes;\n  this.offset += bytes;\n  return res;\n};\n\nDecoderBuffer.prototype.raw = function raw(save) {\n  return this.base.slice(save ? save.offset : this.offset, this.length);\n};\n\nfunction EncoderBuffer(value, reporter) {\n  if (Array.isArray(value)) {\n    this.length = 0;\n    this.value = value.map(function(item) {\n      if (!EncoderBuffer.isEncoderBuffer(item))\n        item = new EncoderBuffer(item, reporter);\n      this.length += item.length;\n      return item;\n    }, this);\n  } else if (typeof value === 'number') {\n    if (!(0 <= value && value <= 0xff))\n      return reporter.error('non-byte EncoderBuffer value');\n    this.value = value;\n    this.length = 1;\n  } else if (typeof value === 'string') {\n    this.value = value;\n    this.length = Buffer.byteLength(value);\n  } else if (Buffer.isBuffer(value)) {\n    this.value = value;\n    this.length = value.length;\n  } else {\n    return reporter.error('Unsupported type: ' + typeof value);\n  }\n}\nexports.EncoderBuffer = EncoderBuffer;\n\nEncoderBuffer.isEncoderBuffer = function isEncoderBuffer(data) {\n  if (data instanceof EncoderBuffer) {\n    return true;\n  }\n\n  // Or accept compatible API\n  const isCompatible = typeof data === 'object' &&\n    data.constructor.name === 'EncoderBuffer' &&\n    typeof data.length === 'number' &&\n    typeof data.join === 'function';\n\n  return isCompatible;\n};\n\nEncoderBuffer.prototype.join = function join(out, offset) {\n  if (!out)\n    out = Buffer.alloc(this.length);\n  if (!offset)\n    offset = 0;\n\n  if (this.length === 0)\n    return out;\n\n  if (Array.isArray(this.value)) {\n    this.value.forEach(function(item) {\n      item.join(out, offset);\n      offset += item.length;\n    });\n  } else {\n    if (typeof this.value === 'number')\n      out[offset] = this.value;\n    else if (typeof this.value === 'string')\n      out.write(this.value, offset);\n    else if (Buffer.isBuffer(this.value))\n      this.value.copy(out, offset);\n    offset += this.length;\n  }\n\n  return out;\n};\n","\"use strict\";\n/**\n * @packageDocumentation\n * @module API-AVM-InitialStates\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.InitialStates = void 0;\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst output_1 = require(\"../../common/output\");\nconst outputs_1 = require(\"./outputs\");\nconst constants_1 = require(\"./constants\");\nconst serialization_1 = require(\"../../utils/serialization\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serializer = serialization_1.Serialization.getInstance();\n/**\n * Class for creating initial output states used in asset creation\n */\nclass InitialStates extends serialization_1.Serializable {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"AmountInput\";\n        this._typeID = undefined;\n        this.fxs = {};\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        let flatfxs = {};\n        for (let fxid in this.fxs) {\n            flatfxs[fxid] = this.fxs[fxid].map((o) => o.serialize(encoding));\n        }\n        return Object.assign(Object.assign({}, fields), { \"fxs\": flatfxs });\n    }\n    ;\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        let unflat = {};\n        for (let fxid in fields[\"fxs\"]) {\n            unflat[fxid] = fields[\"fxs\"][fxid].map((o) => {\n                let out = outputs_1.SelectOutputClass(o[\"_typeID\"]);\n                out.deserialize(o, encoding);\n                return out;\n            });\n        }\n        this.fxs = unflat;\n    }\n    /**\n       *\n       * @param out The output state to add to the collection\n       * @param fxid The FxID that will be used for this output, default AVMConstants.SECPFXID\n       */\n    addOutput(out, fxid = constants_1.AVMConstants.SECPFXID) {\n        if (!(fxid in this.fxs)) {\n            this.fxs[fxid] = [];\n        }\n        this.fxs[fxid].push(out);\n    }\n    fromBuffer(bytes, offset = 0) {\n        const result = [];\n        const klen = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const klennum = klen.readUInt32BE(0);\n        for (let i = 0; i < klennum; i++) {\n            const fxidbuff = bintools.copyFrom(bytes, offset, offset + 4);\n            offset += 4;\n            const fxid = fxidbuff.readUInt32BE(0);\n            result[fxid] = [];\n            const statelenbuff = bintools.copyFrom(bytes, offset, offset + 4);\n            offset += 4;\n            const statelen = statelenbuff.readUInt32BE(0);\n            for (let j = 0; j < statelen; j++) {\n                const outputid = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);\n                offset += 4;\n                const out = outputs_1.SelectOutputClass(outputid);\n                offset = out.fromBuffer(bytes, offset);\n                result[fxid].push(out);\n            }\n        }\n        this.fxs = result;\n        return offset;\n    }\n    toBuffer() {\n        const buff = [];\n        const keys = Object.keys(this.fxs).map((k) => parseInt(k, 10)).sort();\n        const klen = buffer_1.Buffer.alloc(4);\n        klen.writeUInt32BE(keys.length, 0);\n        buff.push(klen);\n        for (let i = 0; i < keys.length; i++) {\n            const fxid = keys[i];\n            const fxidbuff = buffer_1.Buffer.alloc(4);\n            fxidbuff.writeUInt32BE(fxid, 0);\n            buff.push(fxidbuff);\n            const initialState = this.fxs[fxid].sort(output_1.Output.comparator());\n            const statelen = buffer_1.Buffer.alloc(4);\n            statelen.writeUInt32BE(initialState.length, 0);\n            buff.push(statelen);\n            for (let j = 0; j < initialState.length; j++) {\n                const outputid = buffer_1.Buffer.alloc(4);\n                outputid.writeInt32BE(initialState[j].getOutputID(), 0);\n                buff.push(outputid);\n                buff.push(initialState[j].toBuffer());\n            }\n        }\n        return buffer_1.Buffer.concat(buff);\n    }\n}\nexports.InitialStates = InitialStates;\n//# sourceMappingURL=data:application/json;base64,","'use strict';\n\nconst asn1 = exports;\n\nasn1.bignum = require('bn.js');\n\nasn1.define = require('./asn1/api').define;\nasn1.base = require('./asn1/base');\nasn1.constants = require('./asn1/constants');\nasn1.decoders = require('./asn1/decoders');\nasn1.encoders = require('./asn1/encoders');\n","'use strict';\n\nconst Reporter = require('../base/reporter').Reporter;\nconst EncoderBuffer = require('../base/buffer').EncoderBuffer;\nconst DecoderBuffer = require('../base/buffer').DecoderBuffer;\nconst assert = require('minimalistic-assert');\n\n// Supported tags\nconst tags = [\n  'seq', 'seqof', 'set', 'setof', 'objid', 'bool',\n  'gentime', 'utctime', 'null_', 'enum', 'int', 'objDesc',\n  'bitstr', 'bmpstr', 'charstr', 'genstr', 'graphstr', 'ia5str', 'iso646str',\n  'numstr', 'octstr', 'printstr', 't61str', 'unistr', 'utf8str', 'videostr'\n];\n\n// Public methods list\nconst methods = [\n  'key', 'obj', 'use', 'optional', 'explicit', 'implicit', 'def', 'choice',\n  'any', 'contains'\n].concat(tags);\n\n// Overrided methods list\nconst overrided = [\n  '_peekTag', '_decodeTag', '_use',\n  '_decodeStr', '_decodeObjid', '_decodeTime',\n  '_decodeNull', '_decodeInt', '_decodeBool', '_decodeList',\n\n  '_encodeComposite', '_encodeStr', '_encodeObjid', '_encodeTime',\n  '_encodeNull', '_encodeInt', '_encodeBool'\n];\n\nfunction Node(enc, parent, name) {\n  const state = {};\n  this._baseState = state;\n\n  state.name = name;\n  state.enc = enc;\n\n  state.parent = parent || null;\n  state.children = null;\n\n  // State\n  state.tag = null;\n  state.args = null;\n  state.reverseArgs = null;\n  state.choice = null;\n  state.optional = false;\n  state.any = false;\n  state.obj = false;\n  state.use = null;\n  state.useDecoder = null;\n  state.key = null;\n  state['default'] = null;\n  state.explicit = null;\n  state.implicit = null;\n  state.contains = null;\n\n  // Should create new instance on each method\n  if (!state.parent) {\n    state.children = [];\n    this._wrap();\n  }\n}\nmodule.exports = Node;\n\nconst stateProps = [\n  'enc', 'parent', 'children', 'tag', 'args', 'reverseArgs', 'choice',\n  'optional', 'any', 'obj', 'use', 'alteredUse', 'key', 'default', 'explicit',\n  'implicit', 'contains'\n];\n\nNode.prototype.clone = function clone() {\n  const state = this._baseState;\n  const cstate = {};\n  stateProps.forEach(function(prop) {\n    cstate[prop] = state[prop];\n  });\n  const res = new this.constructor(cstate.parent);\n  res._baseState = cstate;\n  return res;\n};\n\nNode.prototype._wrap = function wrap() {\n  const state = this._baseState;\n  methods.forEach(function(method) {\n    this[method] = function _wrappedMethod() {\n      const clone = new this.constructor(this);\n      state.children.push(clone);\n      return clone[method].apply(clone, arguments);\n    };\n  }, this);\n};\n\nNode.prototype._init = function init(body) {\n  const state = this._baseState;\n\n  assert(state.parent === null);\n  body.call(this);\n\n  // Filter children\n  state.children = state.children.filter(function(child) {\n    return child._baseState.parent === this;\n  }, this);\n  assert.equal(state.children.length, 1, 'Root node can have only one child');\n};\n\nNode.prototype._useArgs = function useArgs(args) {\n  const state = this._baseState;\n\n  // Filter children and args\n  const children = args.filter(function(arg) {\n    return arg instanceof this.constructor;\n  }, this);\n  args = args.filter(function(arg) {\n    return !(arg instanceof this.constructor);\n  }, this);\n\n  if (children.length !== 0) {\n    assert(state.children === null);\n    state.children = children;\n\n    // Replace parent to maintain backward link\n    children.forEach(function(child) {\n      child._baseState.parent = this;\n    }, this);\n  }\n  if (args.length !== 0) {\n    assert(state.args === null);\n    state.args = args;\n    state.reverseArgs = args.map(function(arg) {\n      if (typeof arg !== 'object' || arg.constructor !== Object)\n        return arg;\n\n      const res = {};\n      Object.keys(arg).forEach(function(key) {\n        if (key == (key | 0))\n          key |= 0;\n        const value = arg[key];\n        res[value] = key;\n      });\n      return res;\n    });\n  }\n};\n\n//\n// Overrided methods\n//\n\noverrided.forEach(function(method) {\n  Node.prototype[method] = function _overrided() {\n    const state = this._baseState;\n    throw new Error(method + ' not implemented for encoding: ' + state.enc);\n  };\n});\n\n//\n// Public methods\n//\n\ntags.forEach(function(tag) {\n  Node.prototype[tag] = function _tagMethod() {\n    const state = this._baseState;\n    const args = Array.prototype.slice.call(arguments);\n\n    assert(state.tag === null);\n    state.tag = tag;\n\n    this._useArgs(args);\n\n    return this;\n  };\n});\n\nNode.prototype.use = function use(item) {\n  assert(item);\n  const state = this._baseState;\n\n  assert(state.use === null);\n  state.use = item;\n\n  return this;\n};\n\nNode.prototype.optional = function optional() {\n  const state = this._baseState;\n\n  state.optional = true;\n\n  return this;\n};\n\nNode.prototype.def = function def(val) {\n  const state = this._baseState;\n\n  assert(state['default'] === null);\n  state['default'] = val;\n  state.optional = true;\n\n  return this;\n};\n\nNode.prototype.explicit = function explicit(num) {\n  const state = this._baseState;\n\n  assert(state.explicit === null && state.implicit === null);\n  state.explicit = num;\n\n  return this;\n};\n\nNode.prototype.implicit = function implicit(num) {\n  const state = this._baseState;\n\n  assert(state.explicit === null && state.implicit === null);\n  state.implicit = num;\n\n  return this;\n};\n\nNode.prototype.obj = function obj() {\n  const state = this._baseState;\n  const args = Array.prototype.slice.call(arguments);\n\n  state.obj = true;\n\n  if (args.length !== 0)\n    this._useArgs(args);\n\n  return this;\n};\n\nNode.prototype.key = function key(newKey) {\n  const state = this._baseState;\n\n  assert(state.key === null);\n  state.key = newKey;\n\n  return this;\n};\n\nNode.prototype.any = function any() {\n  const state = this._baseState;\n\n  state.any = true;\n\n  return this;\n};\n\nNode.prototype.choice = function choice(obj) {\n  const state = this._baseState;\n\n  assert(state.choice === null);\n  state.choice = obj;\n  this._useArgs(Object.keys(obj).map(function(key) {\n    return obj[key];\n  }));\n\n  return this;\n};\n\nNode.prototype.contains = function contains(item) {\n  const state = this._baseState;\n\n  assert(state.use === null);\n  state.contains = item;\n\n  return this;\n};\n\n//\n// Decoding\n//\n\nNode.prototype._decode = function decode(input, options) {\n  const state = this._baseState;\n\n  // Decode root node\n  if (state.parent === null)\n    return input.wrapResult(state.children[0]._decode(input, options));\n\n  let result = state['default'];\n  let present = true;\n\n  let prevKey = null;\n  if (state.key !== null)\n    prevKey = input.enterKey(state.key);\n\n  // Check if tag is there\n  if (state.optional) {\n    let tag = null;\n    if (state.explicit !== null)\n      tag = state.explicit;\n    else if (state.implicit !== null)\n      tag = state.implicit;\n    else if (state.tag !== null)\n      tag = state.tag;\n\n    if (tag === null && !state.any) {\n      // Trial and Error\n      const save = input.save();\n      try {\n        if (state.choice === null)\n          this._decodeGeneric(state.tag, input, options);\n        else\n          this._decodeChoice(input, options);\n        present = true;\n      } catch (e) {\n        present = false;\n      }\n      input.restore(save);\n    } else {\n      present = this._peekTag(input, tag, state.any);\n\n      if (input.isError(present))\n        return present;\n    }\n  }\n\n  // Push object on stack\n  let prevObj;\n  if (state.obj && present)\n    prevObj = input.enterObject();\n\n  if (present) {\n    // Unwrap explicit values\n    if (state.explicit !== null) {\n      const explicit = this._decodeTag(input, state.explicit);\n      if (input.isError(explicit))\n        return explicit;\n      input = explicit;\n    }\n\n    const start = input.offset;\n\n    // Unwrap implicit and normal values\n    if (state.use === null && state.choice === null) {\n      let save;\n      if (state.any)\n        save = input.save();\n      const body = this._decodeTag(\n        input,\n        state.implicit !== null ? state.implicit : state.tag,\n        state.any\n      );\n      if (input.isError(body))\n        return body;\n\n      if (state.any)\n        result = input.raw(save);\n      else\n        input = body;\n    }\n\n    if (options && options.track && state.tag !== null)\n      options.track(input.path(), start, input.length, 'tagged');\n\n    if (options && options.track && state.tag !== null)\n      options.track(input.path(), input.offset, input.length, 'content');\n\n    // Select proper method for tag\n    if (state.any) {\n      // no-op\n    } else if (state.choice === null) {\n      result = this._decodeGeneric(state.tag, input, options);\n    } else {\n      result = this._decodeChoice(input, options);\n    }\n\n    if (input.isError(result))\n      return result;\n\n    // Decode children\n    if (!state.any && state.choice === null && state.children !== null) {\n      state.children.forEach(function decodeChildren(child) {\n        // NOTE: We are ignoring errors here, to let parser continue with other\n        // parts of encoded data\n        child._decode(input, options);\n      });\n    }\n\n    // Decode contained/encoded by schema, only in bit or octet strings\n    if (state.contains && (state.tag === 'octstr' || state.tag === 'bitstr')) {\n      const data = new DecoderBuffer(result);\n      result = this._getUse(state.contains, input._reporterState.obj)\n        ._decode(data, options);\n    }\n  }\n\n  // Pop object\n  if (state.obj && present)\n    result = input.leaveObject(prevObj);\n\n  // Set key\n  if (state.key !== null && (result !== null || present === true))\n    input.leaveKey(prevKey, state.key, result);\n  else if (prevKey !== null)\n    input.exitKey(prevKey);\n\n  return result;\n};\n\nNode.prototype._decodeGeneric = function decodeGeneric(tag, input, options) {\n  const state = this._baseState;\n\n  if (tag === 'seq' || tag === 'set')\n    return null;\n  if (tag === 'seqof' || tag === 'setof')\n    return this._decodeList(input, tag, state.args[0], options);\n  else if (/str$/.test(tag))\n    return this._decodeStr(input, tag, options);\n  else if (tag === 'objid' && state.args)\n    return this._decodeObjid(input, state.args[0], state.args[1], options);\n  else if (tag === 'objid')\n    return this._decodeObjid(input, null, null, options);\n  else if (tag === 'gentime' || tag === 'utctime')\n    return this._decodeTime(input, tag, options);\n  else if (tag === 'null_')\n    return this._decodeNull(input, options);\n  else if (tag === 'bool')\n    return this._decodeBool(input, options);\n  else if (tag === 'objDesc')\n    return this._decodeStr(input, tag, options);\n  else if (tag === 'int' || tag === 'enum')\n    return this._decodeInt(input, state.args && state.args[0], options);\n\n  if (state.use !== null) {\n    return this._getUse(state.use, input._reporterState.obj)\n      ._decode(input, options);\n  } else {\n    return input.error('unknown tag: ' + tag);\n  }\n};\n\nNode.prototype._getUse = function _getUse(entity, obj) {\n\n  const state = this._baseState;\n  // Create altered use decoder if implicit is set\n  state.useDecoder = this._use(entity, obj);\n  assert(state.useDecoder._baseState.parent === null);\n  state.useDecoder = state.useDecoder._baseState.children[0];\n  if (state.implicit !== state.useDecoder._baseState.implicit) {\n    state.useDecoder = state.useDecoder.clone();\n    state.useDecoder._baseState.implicit = state.implicit;\n  }\n  return state.useDecoder;\n};\n\nNode.prototype._decodeChoice = function decodeChoice(input, options) {\n  const state = this._baseState;\n  let result = null;\n  let match = false;\n\n  Object.keys(state.choice).some(function(key) {\n    const save = input.save();\n    const node = state.choice[key];\n    try {\n      const value = node._decode(input, options);\n      if (input.isError(value))\n        return false;\n\n      result = { type: key, value: value };\n      match = true;\n    } catch (e) {\n      input.restore(save);\n      return false;\n    }\n    return true;\n  }, this);\n\n  if (!match)\n    return input.error('Choice not matched');\n\n  return result;\n};\n\n//\n// Encoding\n//\n\nNode.prototype._createEncoderBuffer = function createEncoderBuffer(data) {\n  return new EncoderBuffer(data, this.reporter);\n};\n\nNode.prototype._encode = function encode(data, reporter, parent) {\n  const state = this._baseState;\n  if (state['default'] !== null && state['default'] === data)\n    return;\n\n  const result = this._encodeValue(data, reporter, parent);\n  if (result === undefined)\n    return;\n\n  if (this._skipDefault(result, reporter, parent))\n    return;\n\n  return result;\n};\n\nNode.prototype._encodeValue = function encode(data, reporter, parent) {\n  const state = this._baseState;\n\n  // Decode root node\n  if (state.parent === null)\n    return state.children[0]._encode(data, reporter || new Reporter());\n\n  let result = null;\n\n  // Set reporter to share it with a child class\n  this.reporter = reporter;\n\n  // Check if data is there\n  if (state.optional && data === undefined) {\n    if (state['default'] !== null)\n      data = state['default'];\n    else\n      return;\n  }\n\n  // Encode children first\n  let content = null;\n  let primitive = false;\n  if (state.any) {\n    // Anything that was given is translated to buffer\n    result = this._createEncoderBuffer(data);\n  } else if (state.choice) {\n    result = this._encodeChoice(data, reporter);\n  } else if (state.contains) {\n    content = this._getUse(state.contains, parent)._encode(data, reporter);\n    primitive = true;\n  } else if (state.children) {\n    content = state.children.map(function(child) {\n      if (child._baseState.tag === 'null_')\n        return child._encode(null, reporter, data);\n\n      if (child._baseState.key === null)\n        return reporter.error('Child should have a key');\n      const prevKey = reporter.enterKey(child._baseState.key);\n\n      if (typeof data !== 'object')\n        return reporter.error('Child expected, but input is not object');\n\n      const res = child._encode(data[child._baseState.key], reporter, data);\n      reporter.leaveKey(prevKey);\n\n      return res;\n    }, this).filter(function(child) {\n      return child;\n    });\n    content = this._createEncoderBuffer(content);\n  } else {\n    if (state.tag === 'seqof' || state.tag === 'setof') {\n      // TODO(indutny): this should be thrown on DSL level\n      if (!(state.args && state.args.length === 1))\n        return reporter.error('Too many args for : ' + state.tag);\n\n      if (!Array.isArray(data))\n        return reporter.error('seqof/setof, but data is not Array');\n\n      const child = this.clone();\n      child._baseState.implicit = null;\n      content = this._createEncoderBuffer(data.map(function(item) {\n        const state = this._baseState;\n\n        return this._getUse(state.args[0], data)._encode(item, reporter);\n      }, child));\n    } else if (state.use !== null) {\n      result = this._getUse(state.use, parent)._encode(data, reporter);\n    } else {\n      content = this._encodePrimitive(state.tag, data);\n      primitive = true;\n    }\n  }\n\n  // Encode data itself\n  if (!state.any && state.choice === null) {\n    const tag = state.implicit !== null ? state.implicit : state.tag;\n    const cls = state.implicit === null ? 'universal' : 'context';\n\n    if (tag === null) {\n      if (state.use === null)\n        reporter.error('Tag could be omitted only for .use()');\n    } else {\n      if (state.use === null)\n        result = this._encodeComposite(tag, primitive, cls, content);\n    }\n  }\n\n  // Wrap in explicit\n  if (state.explicit !== null)\n    result = this._encodeComposite(state.explicit, false, 'context', result);\n\n  return result;\n};\n\nNode.prototype._encodeChoice = function encodeChoice(data, reporter) {\n  const state = this._baseState;\n\n  const node = state.choice[data.type];\n  if (!node) {\n    assert(\n      false,\n      data.type + ' not found in ' +\n            JSON.stringify(Object.keys(state.choice)));\n  }\n  return node._encode(data.value, reporter);\n};\n\nNode.prototype._encodePrimitive = function encodePrimitive(tag, data) {\n  const state = this._baseState;\n\n  if (/str$/.test(tag))\n    return this._encodeStr(data, tag);\n  else if (tag === 'objid' && state.args)\n    return this._encodeObjid(data, state.reverseArgs[0], state.args[1]);\n  else if (tag === 'objid')\n    return this._encodeObjid(data, null, null);\n  else if (tag === 'gentime' || tag === 'utctime')\n    return this._encodeTime(data, tag);\n  else if (tag === 'null_')\n    return this._encodeNull();\n  else if (tag === 'int' || tag === 'enum')\n    return this._encodeInt(data, state.args && state.reverseArgs[0]);\n  else if (tag === 'bool')\n    return this._encodeBool(data);\n  else if (tag === 'objDesc')\n    return this._encodeStr(data, tag);\n  else\n    throw new Error('Unsupported tag: ' + tag);\n};\n\nNode.prototype._isNumstr = function isNumstr(str) {\n  return /^[0-9 ]*$/.test(str);\n};\n\nNode.prototype._isPrintstr = function isPrintstr(str) {\n  return /^[A-Za-z0-9 '()+,-./:=?]*$/.test(str);\n};\n","'use strict';\n\nconst inherits = require('inherits');\n\nconst DEREncoder = require('./der');\n\nfunction PEMEncoder(entity) {\n  DEREncoder.call(this, entity);\n  this.enc = 'pem';\n}\ninherits(PEMEncoder, DEREncoder);\nmodule.exports = PEMEncoder;\n\nPEMEncoder.prototype.encode = function encode(data, options) {\n  const buf = DEREncoder.prototype.encode.call(this, data);\n\n  const p = buf.toString('base64');\n  const out = [ '-----BEGIN ' + options.label + '-----' ];\n  for (let i = 0; i < p.length; i += 64)\n    out.push(p.slice(i, i + 64));\n  out.push('-----END ' + options.label + '-----');\n  return out.join('\\n');\n};\n","'use strict';\n\n// Helper\nfunction reverse(map) {\n  const res = {};\n\n  Object.keys(map).forEach(function(key) {\n    // Convert key to integer if it is stringified\n    if ((key | 0) == key)\n      key = key | 0;\n\n    const value = map[key];\n    res[value] = key;\n  });\n\n  return res;\n}\n\nexports.tagClass = {\n  0: 'universal',\n  1: 'application',\n  2: 'context',\n  3: 'private'\n};\nexports.tagClassByName = reverse(exports.tagClass);\n\nexports.tag = {\n  0x00: 'end',\n  0x01: 'bool',\n  0x02: 'int',\n  0x03: 'bitstr',\n  0x04: 'octstr',\n  0x05: 'null_',\n  0x06: 'objid',\n  0x07: 'objDesc',\n  0x08: 'external',\n  0x09: 'real',\n  0x0a: 'enum',\n  0x0b: 'embed',\n  0x0c: 'utf8str',\n  0x0d: 'relativeOid',\n  0x10: 'seq',\n  0x11: 'set',\n  0x12: 'numstr',\n  0x13: 'printstr',\n  0x14: 't61str',\n  0x15: 'videostr',\n  0x16: 'ia5str',\n  0x17: 'utctime',\n  0x18: 'gentime',\n  0x19: 'graphstr',\n  0x1a: 'iso646str',\n  0x1b: 'genstr',\n  0x1c: 'unistr',\n  0x1d: 'charstr',\n  0x1e: 'bmpstr'\n};\nexports.tagByName = reverse(exports.tag);\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.KeyChain = exports.KeyPair = void 0;\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst secp256k1_1 = require(\"../../common/secp256k1\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\n/**\n * Class for representing a private and public keypair on an AVM Chain.\n */\nclass KeyPair extends secp256k1_1.SECP256k1KeyPair {\n    constructor(hrp, chainid) {\n        super();\n        this.chainid = '';\n        this.hrp = '';\n        /**\n         * Returns the address's string representation.\n         *\n         * @returns A string representation of the address\n         */\n        this.getAddressString = () => {\n            const addr = this.addressFromPublicKey(this.pubk);\n            return bintools.addressToString(this.hrp, this.chainid, addr);\n        };\n        /**\n           * Returns the chainID associated with this key.\n           *\n           * @returns The [[KeyPair]]'s chainID\n           */\n        this.getChainID = () => this.chainid;\n        /**\n         * Sets the the chainID associated with this key.\n         *\n         * @param chainid String for the chainID\n         */\n        this.setChainID = (chainid) => {\n            this.chainid = chainid;\n        };\n        /**\n         * Returns the Human-Readable-Part of the network associated with this key.\n         *\n         * @returns The [[KeyPair]]'s Human-Readable-Part of the network's Bech32 addressing scheme\n         */\n        this.getHRP = () => this.hrp;\n        /**\n         * Sets the the Human-Readable-Part of the network associated with this key.\n         *\n         * @param hrp String for the Human-Readable-Part of Bech32 addresses\n         */\n        this.setHRP = (hrp) => {\n            this.hrp = hrp;\n        };\n        this.chainid = chainid;\n        this.hrp = hrp;\n        this.generateKey();\n    }\n    clone() {\n        let newkp = new KeyPair(this.hrp, this.chainid);\n        newkp.importKey(bintools.copyFrom(this.getPrivateKey()));\n        return newkp;\n    }\n    create(...args) {\n        if (args.length == 2) {\n            return new KeyPair(args[0], args[1]);\n        }\n        return new KeyPair(this.hrp, this.chainid);\n    }\n}\nexports.KeyPair = KeyPair;\n/**\n * Class for representing a key chain in Avalanche.\n *\n * @typeparam KeyPair Class extending [[SECP256k1KeyChain]] which is used as the key in [[KeyChain]]\n */\nclass KeyChain extends secp256k1_1.SECP256k1KeyChain {\n    /**\n     * Returns instance of KeyChain.\n     */\n    constructor(hrp, chainid) {\n        super();\n        this.hrp = '';\n        this.chainid = '';\n        /**\n         * Makes a new key pair, returns the address.\n         *\n         * @returns The new key pair\n         */\n        this.makeKey = () => {\n            let keypair = new KeyPair(this.hrp, this.chainid);\n            this.addKey(keypair);\n            return keypair;\n        };\n        this.addKey = (newKey) => {\n            newKey.setChainID(this.chainid);\n            super.addKey(newKey);\n        };\n        /**\n         * Given a private key, makes a new key pair, returns the address.\n         *\n         * @param privk A {@link https://github.com/feross/buffer|Buffer} or cb58 serialized string representing the private key\n         *\n         * @returns The new key pair\n         */\n        this.importKey = (privk) => {\n            let keypair = new KeyPair(this.hrp, this.chainid);\n            let pk;\n            if (typeof privk === 'string') {\n                pk = bintools.cb58Decode(privk.split('-')[1]);\n            }\n            else {\n                pk = bintools.copyFrom(privk);\n            }\n            keypair.importKey(pk);\n            if (!(keypair.getAddress().toString(\"hex\") in this.keys)) {\n                this.addKey(keypair);\n            }\n            return keypair;\n        };\n        this.hrp = hrp;\n        this.chainid = chainid;\n    }\n    create(...args) {\n        if (args.length == 2) {\n            return new KeyChain(args[0], args[1]);\n        }\n        return new KeyChain(this.hrp, this.chainid);\n    }\n    ;\n    clone() {\n        const newkc = new KeyChain(this.hrp, this.chainid);\n        for (let k in this.keys) {\n            newkc.addKey(this.keys[k].clone());\n        }\n        return newkc;\n    }\n    ;\n    union(kc) {\n        let newkc = kc.clone();\n        for (let k in this.keys) {\n            newkc.addKey(this.keys[k].clone());\n        }\n        return newkc;\n    }\n}\nexports.KeyChain = KeyChain;\n//# sourceMappingURL=data:application/json;base64,","'use strict';\n\nconst inherits = require('inherits');\nconst Buffer = require('safer-buffer').Buffer;\n\nconst DERDecoder = require('./der');\n\nfunction PEMDecoder(entity) {\n  DERDecoder.call(this, entity);\n  this.enc = 'pem';\n}\ninherits(PEMDecoder, DERDecoder);\nmodule.exports = PEMDecoder;\n\nPEMDecoder.prototype.decode = function decode(data, options) {\n  const lines = data.toString().split(/[\\r\\n]+/g);\n\n  const label = options.label.toUpperCase();\n\n  const re = /^-----(BEGIN|END) ([^-]+)-----$/;\n  let start = -1;\n  let end = -1;\n  for (let i = 0; i < lines.length; i++) {\n    const match = lines[i].match(re);\n    if (match === null)\n      continue;\n\n    if (match[2] !== label)\n      continue;\n\n    if (start === -1) {\n      if (match[1] !== 'BEGIN')\n        break;\n      start = i;\n    } else {\n      if (match[1] !== 'END')\n        break;\n      end = i;\n      break;\n    }\n  }\n  if (start === -1 || end === -1)\n    throw new Error('PEM section not found for: ' + label);\n\n  const base64 = lines.slice(start + 1, end).join('');\n  // Remove excessive symbols\n  base64.replace(/[^a-z0-9+/=]+/gi, '');\n\n  const input = Buffer.from(base64, 'base64');\n  return DERDecoder.prototype.decode.call(this, input, options);\n};\n","\"use strict\";\n/**\n * @packageDocumentation\n * @module API-AVM-Constants\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AVMConstants = void 0;\nclass AVMConstants {\n}\nexports.AVMConstants = AVMConstants;\nAVMConstants.LATESTCODEC = 0;\nAVMConstants.SECPFXID = 0;\nAVMConstants.NFTFXID = 1;\nAVMConstants.SECPMINTOUTPUTID = 6;\nAVMConstants.SECPXFEROUTPUTID = 7;\nAVMConstants.NFTXFEROUTPUTID = 11;\nAVMConstants.NFTMINTOUTPUTID = 10;\nAVMConstants.SECPINPUTID = 5;\nAVMConstants.SECPMINTOPID = 8;\nAVMConstants.NFTMINTOPID = 12;\nAVMConstants.NFTXFEROPID = 13;\nAVMConstants.BASETX = 0;\nAVMConstants.CREATEASSETTX = 1;\nAVMConstants.OPERATIONTX = 2;\nAVMConstants.IMPORTTX = 3;\nAVMConstants.EXPORTTX = 4;\nAVMConstants.SECPCREDENTIAL = 9;\nAVMConstants.NFTCREDENTIAL = 14;\nAVMConstants.ASSETIDLEN = 32;\nAVMConstants.BLOCKCHAINIDLEN = 32;\nAVMConstants.SYMBOLMAXLEN = 4;\nAVMConstants.ASSETNAMELEN = 128;\nAVMConstants.ADDRESSLENGTH = 20;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3RhbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2FwaXMvYXZtL2NvbnN0YW50cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7OztHQUdHOzs7QUFFSCxNQUFhLFlBQVk7O0FBQXpCLG9DQThDQztBQTdDUSx3QkFBVyxHQUFVLENBQUMsQ0FBQztBQUV2QixxQkFBUSxHQUFVLENBQUMsQ0FBQztBQUVwQixvQkFBTyxHQUFVLENBQUMsQ0FBQztBQUVuQiw2QkFBZ0IsR0FBVSxDQUFDLENBQUM7QUFFNUIsNkJBQWdCLEdBQVUsQ0FBQyxDQUFDO0FBRTVCLDRCQUFlLEdBQVUsRUFBRSxDQUFDO0FBRTVCLDRCQUFlLEdBQVUsRUFBRSxDQUFDO0FBRTVCLHdCQUFXLEdBQVUsQ0FBQyxDQUFDO0FBRXZCLHlCQUFZLEdBQVUsQ0FBQyxDQUFDO0FBRXhCLHdCQUFXLEdBQVUsRUFBRSxDQUFDO0FBRXhCLHdCQUFXLEdBQVUsRUFBRSxDQUFDO0FBRXhCLG1CQUFNLEdBQVUsQ0FBQyxDQUFDO0FBRWxCLDBCQUFhLEdBQVUsQ0FBQyxDQUFDO0FBRXpCLHdCQUFXLEdBQVUsQ0FBQyxDQUFDO0FBRXZCLHFCQUFRLEdBQVUsQ0FBQyxDQUFDO0FBRXBCLHFCQUFRLEdBQVUsQ0FBQyxDQUFDO0FBRXBCLDJCQUFjLEdBQVUsQ0FBQyxDQUFDO0FBRTFCLDBCQUFhLEdBQVUsRUFBRSxDQUFDO0FBRTFCLHVCQUFVLEdBQVUsRUFBRSxDQUFDO0FBRXZCLDRCQUFlLEdBQVUsRUFBRSxDQUFDO0FBRTVCLHlCQUFZLEdBQVUsQ0FBQyxDQUFDO0FBRXhCLHlCQUFZLEdBQVUsR0FBRyxDQUFDO0FBRTFCLDBCQUFhLEdBQVUsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAcGFja2FnZURvY3VtZW50YXRpb25cbiAqIEBtb2R1bGUgQVBJLUFWTS1Db25zdGFudHNcbiAqL1xuXG5leHBvcnQgY2xhc3MgQVZNQ29uc3RhbnRzIHtcbiAgc3RhdGljIExBVEVTVENPREVDOm51bWJlciA9IDA7XG5cbiAgc3RhdGljIFNFQ1BGWElEOm51bWJlciA9IDA7XG5cbiAgc3RhdGljIE5GVEZYSUQ6bnVtYmVyID0gMTtcblxuICBzdGF0aWMgU0VDUE1JTlRPVVRQVVRJRDpudW1iZXIgPSA2O1xuXG4gIHN0YXRpYyBTRUNQWEZFUk9VVFBVVElEOm51bWJlciA9IDc7XG5cbiAgc3RhdGljIE5GVFhGRVJPVVRQVVRJRDpudW1iZXIgPSAxMTtcblxuICBzdGF0aWMgTkZUTUlOVE9VVFBVVElEOm51bWJlciA9IDEwO1xuXG4gIHN0YXRpYyBTRUNQSU5QVVRJRDpudW1iZXIgPSA1O1xuXG4gIHN0YXRpYyBTRUNQTUlOVE9QSUQ6bnVtYmVyID0gODtcblxuICBzdGF0aWMgTkZUTUlOVE9QSUQ6bnVtYmVyID0gMTI7XG5cbiAgc3RhdGljIE5GVFhGRVJPUElEOm51bWJlciA9IDEzO1xuXG4gIHN0YXRpYyBCQVNFVFg6bnVtYmVyID0gMDtcblxuICBzdGF0aWMgQ1JFQVRFQVNTRVRUWDpudW1iZXIgPSAxO1xuXG4gIHN0YXRpYyBPUEVSQVRJT05UWDpudW1iZXIgPSAyO1xuXG4gIHN0YXRpYyBJTVBPUlRUWDpudW1iZXIgPSAzO1xuXG4gIHN0YXRpYyBFWFBPUlRUWDpudW1iZXIgPSA0O1xuXG4gIHN0YXRpYyBTRUNQQ1JFREVOVElBTDpudW1iZXIgPSA5O1xuXG4gIHN0YXRpYyBORlRDUkVERU5USUFMOm51bWJlciA9IDE0O1xuXG4gIHN0YXRpYyBBU1NFVElETEVOOm51bWJlciA9IDMyO1xuXG4gIHN0YXRpYyBCTE9DS0NIQUlOSURMRU46bnVtYmVyID0gMzI7XG5cbiAgc3RhdGljIFNZTUJPTE1BWExFTjpudW1iZXIgPSA0O1xuXG4gIHN0YXRpYyBBU1NFVE5BTUVMRU46bnVtYmVyID0gMTI4O1xuXG4gIHN0YXRpYyBBRERSRVNTTEVOR1RIOm51bWJlciA9IDIwO1xufVxuXG4iXX0=","\"use strict\";\n/**\n * @packageDocumentation\n * @module API-EVM-KeyChain\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.KeyChain = exports.KeyPair = void 0;\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst secp256k1_1 = require(\"../../common/secp256k1\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\n/**\n * Class for representing a private and public keypair on an AVM Chain.\n */\nclass KeyPair extends secp256k1_1.SECP256k1KeyPair {\n    constructor(hrp, chainid) {\n        super();\n        this.chainID = '';\n        this.hrp = '';\n        /**\n         * Returns the address's string representation.\n          *\n          * @returns A string representation of the address\n          */\n        this.getAddressString = () => {\n            const addr = this.addressFromPublicKey(this.pubk);\n            return bintools.addressToString(this.hrp, this.chainID, addr);\n        };\n        /**\n          * Returns the chainID associated with this key.\n          *\n          * @returns The [[KeyPair]]'s chainID\n          */\n        this.getChainID = () => this.chainID;\n        /**\n          * Sets the the chainID associated with this key.\n          *\n          * @param chainID String for the chainID\n          */\n        this.setChainID = (chainID) => {\n            this.chainID = chainID;\n        };\n        /**\n          * Returns the Human-Readable-Part of the network associated with this key.\n          *\n          * @returns The [[KeyPair]]'s Human-Readable-Part of the network's Bech32 addressing scheme\n          */\n        this.getHRP = () => this.hrp;\n        /**\n          * Sets the the Human-Readable-Part of the network associated with this key.\n          *\n          * @param hrp String for the Human-Readable-Part of Bech32 addresses\n          */\n        this.setHRP = (hrp) => {\n            this.hrp = hrp;\n        };\n        this.chainID = chainid;\n        this.hrp = hrp;\n        this.generateKey();\n    }\n    clone() {\n        let newkp = new KeyPair(this.hrp, this.chainID);\n        newkp.importKey(bintools.copyFrom(this.getPrivateKey()));\n        return newkp;\n    }\n    create(...args) {\n        if (args.length == 2) {\n            return new KeyPair(args[0], args[1]);\n        }\n        return new KeyPair(this.hrp, this.chainID);\n    }\n}\nexports.KeyPair = KeyPair;\n/**\n  * Class for representing a key chain in Avalanche.\n  *\n  * @typeparam KeyPair Class extending [[SECP256k1KeyChain]] which is used as the key in [[KeyChain]]\n  */\nclass KeyChain extends secp256k1_1.SECP256k1KeyChain {\n    /**\n      * Returns instance of KeyChain.\n      */\n    constructor(hrp, chainID) {\n        super();\n        this.hrp = '';\n        this.chainID = '';\n        /**\n          * Makes a new key pair, returns the address.\n          *\n          * @returns The new key pair\n          */\n        this.makeKey = () => {\n            let keypair = new KeyPair(this.hrp, this.chainID);\n            this.addKey(keypair);\n            return keypair;\n        };\n        this.addKey = (newKey) => {\n            newKey.setChainID(this.chainID);\n            super.addKey(newKey);\n        };\n        /**\n          * Given a private key, makes a new key pair, returns the address.\n          *\n          * @param privk A {@link https://github.com/feross/buffer|Buffer}\n          * or cb58 serialized string representing the private key\n          *\n          * @returns The new key pair\n          */\n        this.importKey = (privk) => {\n            let keypair = new KeyPair(this.hrp, this.chainID);\n            let pk;\n            if (typeof privk === 'string') {\n                pk = bintools.cb58Decode(privk.split('-')[1]);\n            }\n            else {\n                pk = bintools.copyFrom(privk);\n            }\n            keypair.importKey(pk);\n            if (!(keypair.getAddress().toString(\"hex\") in this.keys)) {\n                this.addKey(keypair);\n            }\n            return keypair;\n        };\n        this.hrp = hrp;\n        this.chainID = chainID;\n    }\n    create(...args) {\n        if (args.length == 2) {\n            return new KeyChain(args[0], args[1]);\n        }\n        return new KeyChain(this.hrp, this.chainID);\n    }\n    ;\n    clone() {\n        const newkc = new KeyChain(this.hrp, this.chainID);\n        for (let k in this.keys) {\n            newkc.addKey(this.keys[k].clone());\n        }\n        return newkc;\n    }\n    ;\n    union(kc) {\n        let newkc = kc.clone();\n        for (let k in this.keys) {\n            newkc.addKey(this.keys[k].clone());\n        }\n        return newkc;\n    }\n}\nexports.KeyChain = KeyChain;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AuthAPI = void 0;\nconst jrpcapi_1 = require(\"../../common/jrpcapi\");\n/**\n * Class for interacting with a node's AuthAPI.\n *\n * @category RPCAPIs\n *\n * @remarks This extends the [[JRPCAPI]] class. This class should not be directly called. Instead, use the [[Avalanche.addAPI]] function to register this interface with Avalanche.\n */\nclass AuthAPI extends jrpcapi_1.JRPCAPI {\n    constructor(core, baseurl = '/ext/auth') {\n        super(core, baseurl);\n        /**\n         * Creates a new authorization token that grants access to one or more API endpoints.\n         *\n         * @param password This node's authorization token password, set through the CLI when the node was launched.\n         * @param endpoints A list of endpoints that will be accessible using the generated token. If there's an element that is \"*\", this token can reach any endpoint.\n         *\n         * @returns Returns a Promise<string> containing the authorization token.\n         */\n        this.newToken = (password, endpoints) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                password,\n                endpoints\n            };\n            return this.callMethod('auth.newToken', params)\n                .then((response) => response.data.result.token);\n        });\n        /**\n         * Revokes an authorization token, removing all of its rights to access endpoints.\n         *\n         * @param password This node's authorization token password, set through the CLI when the node was launched.\n         * @param token An authorization token whose access should be revoked.\n         *\n         * @returns Returns a Promise<boolean> indicating if a token was successfully revoked.\n         */\n        this.revokeToken = (password, token) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                password,\n                token\n            };\n            return this.callMethod('auth.revokeToken', params)\n                .then((response) => response.data.result.success);\n        });\n        /**\n         * Change this node's authorization token password. **Any authorization tokens created under an old password will become invalid.**\n         *\n         * @param oldPassword This node's authorization token password, set through the CLI when the node was launched.\n         * @param newPassword A new password for this node's authorization token issuance.\n         *\n         * @returns Returns a Promise<boolean> indicating if the password was successfully changed.\n         */\n        this.changePassword = (oldPassword, newPassword) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                oldPassword,\n                newPassword\n            };\n            return this.callMethod('auth.changePassword', params)\n                .then((response) => response.data.result.success);\n        });\n    }\n}\nexports.AuthAPI = AuthAPI;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2FwaXMvYXV0aC9hcGkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBS0Esa0RBQStDO0FBRy9DOzs7Ozs7R0FNRztBQUNILE1BQWEsT0FBUSxTQUFRLGlCQUFPO0lBcURoQyxZQUFZLElBQWtCLEVBQUUsVUFBaUIsV0FBVztRQUFJLEtBQUssQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFwRHJGOzs7Ozs7O1dBT0c7UUFDSCxhQUFRLEdBQUcsQ0FBTyxRQUFlLEVBQUUsU0FBdUIsRUFBa0IsRUFBRTtZQUMxRSxNQUFNLE1BQU0sR0FBTztnQkFDZixRQUFRO2dCQUNSLFNBQVM7YUFDWixDQUFDO1lBQ0YsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLGVBQWUsRUFBRSxNQUFNLENBQUM7aUJBQzFDLElBQUksQ0FBQyxDQUFDLFFBQTRCLEVBQUUsRUFBRSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzVFLENBQUMsQ0FBQSxDQUFDO1FBR0Y7Ozs7Ozs7V0FPRztRQUNILGdCQUFXLEdBQUcsQ0FBTyxRQUFlLEVBQUUsS0FBWSxFQUFtQixFQUFFO1lBQ25FLE1BQU0sTUFBTSxHQUFPO2dCQUNmLFFBQVE7Z0JBQ1IsS0FBSzthQUNSLENBQUM7WUFDRixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsa0JBQWtCLEVBQUUsTUFBTSxDQUFDO2lCQUM3QyxJQUFJLENBQUMsQ0FBQyxRQUE0QixFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUM5RSxDQUFDLENBQUEsQ0FBQztRQUVGOzs7Ozs7O1dBT0c7UUFDSCxtQkFBYyxHQUFHLENBQU8sV0FBa0IsRUFBRSxXQUFrQixFQUFtQixFQUFFO1lBQy9FLE1BQU0sTUFBTSxHQUFPO2dCQUNmLFdBQVc7Z0JBQ1gsV0FBVzthQUNkLENBQUM7WUFDRixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMscUJBQXFCLEVBQUUsTUFBTSxDQUFDO2lCQUNoRCxJQUFJLENBQUMsQ0FBQyxRQUE0QixFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUM5RSxDQUFDLENBQUEsQ0FBQztJQUVvRixDQUFDO0NBQzFGO0FBdERELDBCQXNEQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHBhY2thZ2VEb2N1bWVudGF0aW9uXG4gKiBAbW9kdWxlIEFQSS1BdXRoXG4gKi9cbmltcG9ydCBBdmFsYW5jaGVDb3JlIGZyb20gJy4uLy4uL2F2YWxhbmNoZSc7XG5pbXBvcnQgeyBKUlBDQVBJIH0gZnJvbSAnLi4vLi4vY29tbW9uL2pycGNhcGknO1xuaW1wb3J0IHsgUmVxdWVzdFJlc3BvbnNlRGF0YSB9IGZyb20gJy4uLy4uL2NvbW1vbi9hcGliYXNlJztcblxuLyoqXG4gKiBDbGFzcyBmb3IgaW50ZXJhY3Rpbmcgd2l0aCBhIG5vZGUncyBBdXRoQVBJLlxuICpcbiAqIEBjYXRlZ29yeSBSUENBUElzXG4gKlxuICogQHJlbWFya3MgVGhpcyBleHRlbmRzIHRoZSBbW0pSUENBUEldXSBjbGFzcy4gVGhpcyBjbGFzcyBzaG91bGQgbm90IGJlIGRpcmVjdGx5IGNhbGxlZC4gSW5zdGVhZCwgdXNlIHRoZSBbW0F2YWxhbmNoZS5hZGRBUEldXSBmdW5jdGlvbiB0byByZWdpc3RlciB0aGlzIGludGVyZmFjZSB3aXRoIEF2YWxhbmNoZS5cbiAqL1xuZXhwb3J0IGNsYXNzIEF1dGhBUEkgZXh0ZW5kcyBKUlBDQVBJIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IGF1dGhvcml6YXRpb24gdG9rZW4gdGhhdCBncmFudHMgYWNjZXNzIHRvIG9uZSBvciBtb3JlIEFQSSBlbmRwb2ludHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcGFzc3dvcmQgVGhpcyBub2RlJ3MgYXV0aG9yaXphdGlvbiB0b2tlbiBwYXNzd29yZCwgc2V0IHRocm91Z2ggdGhlIENMSSB3aGVuIHRoZSBub2RlIHdhcyBsYXVuY2hlZC5cbiAgICAgKiBAcGFyYW0gZW5kcG9pbnRzIEEgbGlzdCBvZiBlbmRwb2ludHMgdGhhdCB3aWxsIGJlIGFjY2Vzc2libGUgdXNpbmcgdGhlIGdlbmVyYXRlZCB0b2tlbi4gSWYgdGhlcmUncyBhbiBlbGVtZW50IHRoYXQgaXMgXCIqXCIsIHRoaXMgdG9rZW4gY2FuIHJlYWNoIGFueSBlbmRwb2ludC5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIFJldHVybnMgYSBQcm9taXNlPHN0cmluZz4gY29udGFpbmluZyB0aGUgYXV0aG9yaXphdGlvbiB0b2tlbi5cbiAgICAgKi9cbiAgICBuZXdUb2tlbiA9IGFzeW5jIChwYXNzd29yZDpzdHJpbmcsIGVuZHBvaW50czpBcnJheTxzdHJpbmc+KTpQcm9taXNlPHN0cmluZz4gPT4ge1xuICAgICAgICBjb25zdCBwYXJhbXM6YW55ID0ge1xuICAgICAgICAgICAgcGFzc3dvcmQsXG4gICAgICAgICAgICBlbmRwb2ludHNcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FsbE1ldGhvZCgnYXV0aC5uZXdUb2tlbicsIHBhcmFtcylcbiAgICAgICAgICAgIC50aGVuKChyZXNwb25zZTpSZXF1ZXN0UmVzcG9uc2VEYXRhKSA9PiByZXNwb25zZS5kYXRhLnJlc3VsdC50b2tlbik7XG4gICAgfTtcblxuXG4gICAgLyoqXG4gICAgICogUmV2b2tlcyBhbiBhdXRob3JpemF0aW9uIHRva2VuLCByZW1vdmluZyBhbGwgb2YgaXRzIHJpZ2h0cyB0byBhY2Nlc3MgZW5kcG9pbnRzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHBhc3N3b3JkIFRoaXMgbm9kZSdzIGF1dGhvcml6YXRpb24gdG9rZW4gcGFzc3dvcmQsIHNldCB0aHJvdWdoIHRoZSBDTEkgd2hlbiB0aGUgbm9kZSB3YXMgbGF1bmNoZWQuXG4gICAgICogQHBhcmFtIHRva2VuIEFuIGF1dGhvcml6YXRpb24gdG9rZW4gd2hvc2UgYWNjZXNzIHNob3VsZCBiZSByZXZva2VkLlxuICAgICAqXG4gICAgICogQHJldHVybnMgUmV0dXJucyBhIFByb21pc2U8Ym9vbGVhbj4gaW5kaWNhdGluZyBpZiBhIHRva2VuIHdhcyBzdWNjZXNzZnVsbHkgcmV2b2tlZC5cbiAgICAgKi9cbiAgICByZXZva2VUb2tlbiA9IGFzeW5jIChwYXNzd29yZDpzdHJpbmcsIHRva2VuOnN0cmluZyk6UHJvbWlzZTxib29sZWFuPiA9PiB7XG4gICAgICAgIGNvbnN0IHBhcmFtczphbnkgPSB7XG4gICAgICAgICAgICBwYXNzd29yZCxcbiAgICAgICAgICAgIHRva2VuXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB0aGlzLmNhbGxNZXRob2QoJ2F1dGgucmV2b2tlVG9rZW4nLCBwYXJhbXMpXG4gICAgICAgICAgICAudGhlbigocmVzcG9uc2U6UmVxdWVzdFJlc3BvbnNlRGF0YSkgPT4gcmVzcG9uc2UuZGF0YS5yZXN1bHQuc3VjY2Vzcyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENoYW5nZSB0aGlzIG5vZGUncyBhdXRob3JpemF0aW9uIHRva2VuIHBhc3N3b3JkLiAqKkFueSBhdXRob3JpemF0aW9uIHRva2VucyBjcmVhdGVkIHVuZGVyIGFuIG9sZCBwYXNzd29yZCB3aWxsIGJlY29tZSBpbnZhbGlkLioqXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb2xkUGFzc3dvcmQgVGhpcyBub2RlJ3MgYXV0aG9yaXphdGlvbiB0b2tlbiBwYXNzd29yZCwgc2V0IHRocm91Z2ggdGhlIENMSSB3aGVuIHRoZSBub2RlIHdhcyBsYXVuY2hlZC5cbiAgICAgKiBAcGFyYW0gbmV3UGFzc3dvcmQgQSBuZXcgcGFzc3dvcmQgZm9yIHRoaXMgbm9kZSdzIGF1dGhvcml6YXRpb24gdG9rZW4gaXNzdWFuY2UuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBSZXR1cm5zIGEgUHJvbWlzZTxib29sZWFuPiBpbmRpY2F0aW5nIGlmIHRoZSBwYXNzd29yZCB3YXMgc3VjY2Vzc2Z1bGx5IGNoYW5nZWQuXG4gICAgICovXG4gICAgY2hhbmdlUGFzc3dvcmQgPSBhc3luYyAob2xkUGFzc3dvcmQ6c3RyaW5nLCBuZXdQYXNzd29yZDpzdHJpbmcpOlByb21pc2U8Ym9vbGVhbj4gPT4ge1xuICAgICAgICBjb25zdCBwYXJhbXM6YW55ID0ge1xuICAgICAgICAgICAgb2xkUGFzc3dvcmQsXG4gICAgICAgICAgICBuZXdQYXNzd29yZFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gdGhpcy5jYWxsTWV0aG9kKCdhdXRoLmNoYW5nZVBhc3N3b3JkJywgcGFyYW1zKVxuICAgICAgICAgICAgLnRoZW4oKHJlc3BvbnNlOlJlcXVlc3RSZXNwb25zZURhdGEpID0+IHJlc3BvbnNlLmRhdGEucmVzdWx0LnN1Y2Nlc3MpO1xuICAgIH07XG5cbiAgICBjb25zdHJ1Y3Rvcihjb3JlOkF2YWxhbmNoZUNvcmUsIGJhc2V1cmw6c3RyaW5nID0gJy9leHQvYXV0aCcpIHsgc3VwZXIoY29yZSwgYmFzZXVybCk7IH1cbn1cbiJdfQ==","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./api\"), exports);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpcy9hdXRoL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBLHdDQUFzQiIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gJy4vYXBpJztcbiJdfQ==","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NFTTransferOutput = exports.NFTMintOutput = exports.SECPMintOutput = exports.SECPTransferOutput = exports.NFTOutput = exports.AmountOutput = exports.TransferableOutput = exports.SelectOutputClass = void 0;\n/**\n * @packageDocumentation\n * @module API-AVM-Outputs\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst output_1 = require(\"../../common/output\");\nconst serialization_1 = require(\"../../utils/serialization\");\nconst bintools = bintools_1.default.getInstance();\nconst serializer = serialization_1.Serialization.getInstance();\n/**\n * Takes a buffer representing the output and returns the proper Output instance.\n *\n * @param outputid A number representing the inputID parsed prior to the bytes passed in\n *\n * @returns An instance of an [[Output]]-extended class.\n */\nexports.SelectOutputClass = (outputid, ...args) => {\n    if (outputid == constants_1.AVMConstants.SECPXFEROUTPUTID) {\n        return new SECPTransferOutput(...args);\n    }\n    else if (outputid == constants_1.AVMConstants.SECPMINTOUTPUTID) {\n        return new SECPMintOutput(...args);\n    }\n    else if (outputid == constants_1.AVMConstants.NFTMINTOUTPUTID) {\n        return new NFTMintOutput(...args);\n    }\n    else if (outputid == constants_1.AVMConstants.NFTXFEROUTPUTID) {\n        return new NFTTransferOutput(...args);\n    }\n    throw new Error(\"Error - SelectOutputClass: unknown outputid \" + outputid);\n};\nclass TransferableOutput extends output_1.StandardTransferableOutput {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"TransferableOutput\";\n        this._typeID = undefined;\n    }\n    //serialize is inherited\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.output = exports.SelectOutputClass(fields[\"output\"][\"_typeID\"]);\n        this.output.deserialize(fields[\"output\"], encoding);\n    }\n    fromBuffer(bytes, offset = 0) {\n        this.assetID = bintools.copyFrom(bytes, offset, offset + constants_1.AVMConstants.ASSETIDLEN);\n        offset += constants_1.AVMConstants.ASSETIDLEN;\n        const outputid = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);\n        offset += 4;\n        this.output = exports.SelectOutputClass(outputid);\n        return this.output.fromBuffer(bytes, offset);\n    }\n}\nexports.TransferableOutput = TransferableOutput;\nclass AmountOutput extends output_1.StandardAmountOutput {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"AmountOutput\";\n        this._typeID = undefined;\n    }\n    //serialize and deserialize both are inherited\n    /**\n     *\n     * @param assetID An assetID which is wrapped around the Buffer of the Output\n     */\n    makeTransferable(assetID) {\n        return new TransferableOutput(assetID, this);\n    }\n    select(id, ...args) {\n        return exports.SelectOutputClass(id, ...args);\n    }\n}\nexports.AmountOutput = AmountOutput;\nclass NFTOutput extends output_1.BaseNFTOutput {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"NFTOutput\";\n        this._typeID = undefined;\n    }\n    //serialize and deserialize both are inherited\n    /**\n     *\n     * @param assetID An assetID which is wrapped around the Buffer of the Output\n     */\n    makeTransferable(assetID) {\n        return new TransferableOutput(assetID, this);\n    }\n    select(id, ...args) {\n        return exports.SelectOutputClass(id, ...args);\n    }\n}\nexports.NFTOutput = NFTOutput;\n/**\n * An [[Output]] class which specifies an Output that carries an ammount for an assetID and uses secp256k1 signature scheme.\n */\nclass SECPTransferOutput extends AmountOutput {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"SECPTransferOutput\";\n        this._typeID = constants_1.AVMConstants.SECPXFEROUTPUTID;\n    }\n    //serialize and deserialize both are inherited\n    /**\n       * Returns the outputID for this output\n       */\n    getOutputID() {\n        return this._typeID;\n    }\n    create(...args) {\n        return new SECPTransferOutput(...args);\n    }\n    clone() {\n        const newout = this.create();\n        newout.fromBuffer(this.toBuffer());\n        return newout;\n    }\n}\nexports.SECPTransferOutput = SECPTransferOutput;\n/**\n * An [[Output]] class which specifies an Output that carries an ammount for an assetID and uses secp256k1 signature scheme.\n */\nclass SECPMintOutput extends output_1.Output {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"SECPMintOutput\";\n        this._typeID = constants_1.AVMConstants.SECPMINTOUTPUTID;\n    }\n    //serialize and deserialize both are inherited\n    /**\n     * Returns the outputID for this output\n     */\n    getOutputID() {\n        return this._typeID;\n    }\n    /**\n     *\n     * @param assetID An assetID which is wrapped around the Buffer of the Output\n     */\n    makeTransferable(assetID) {\n        return new TransferableOutput(assetID, this);\n    }\n    create(...args) {\n        return new SECPMintOutput(...args);\n    }\n    clone() {\n        const newout = this.create();\n        newout.fromBuffer(this.toBuffer());\n        return newout;\n    }\n    select(id, ...args) {\n        return exports.SelectOutputClass(id, ...args);\n    }\n}\nexports.SECPMintOutput = SECPMintOutput;\n/**\n * An [[Output]] class which specifies an Output that carries an NFT Mint and uses secp256k1 signature scheme.\n */\nclass NFTMintOutput extends NFTOutput {\n    /**\n     * An [[Output]] class which contains an NFT mint for an assetID.\n     *\n     * @param groupID A number specifies the group this NFT is issued to\n     * @param locktime A {@link https://github.com/indutny/bn.js/|BN} representing the locktime\n     * @param threshold A number representing the the threshold number of signers required to sign the transaction\n     * @param addresses An array of {@link https://github.com/feross/buffer|Buffer}s representing addresses\n     */\n    constructor(groupID = undefined, addresses = undefined, locktime = undefined, threshold = undefined) {\n        super(addresses, locktime, threshold);\n        this._typeName = \"NFTMintOutput\";\n        this._typeID = constants_1.AVMConstants.NFTMINTOUTPUTID;\n        if (typeof groupID !== 'undefined') {\n            this.groupID.writeUInt32BE(groupID, 0);\n        }\n    }\n    //serialize and deserialize both are inherited\n    /**\n     * Returns the outputID for this output\n     */\n    getOutputID() {\n        return this._typeID;\n    }\n    /**\n     * Popuates the instance from a {@link https://github.com/feross/buffer|Buffer} representing the [[NFTMintOutput]] and returns the size of the output.\n     */\n    fromBuffer(utxobuff, offset = 0) {\n        this.groupID = bintools.copyFrom(utxobuff, offset, offset + 4);\n        offset += 4;\n        return super.fromBuffer(utxobuff, offset);\n    }\n    /**\n     * Returns the buffer representing the [[NFTMintOutput]] instance.\n     */\n    toBuffer() {\n        let superbuff = super.toBuffer();\n        let bsize = this.groupID.length + superbuff.length;\n        let barr = [this.groupID, superbuff];\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n    create(...args) {\n        return new NFTMintOutput(...args);\n    }\n    clone() {\n        const newout = this.create();\n        newout.fromBuffer(this.toBuffer());\n        return newout;\n    }\n}\nexports.NFTMintOutput = NFTMintOutput;\n/**\n * An [[Output]] class which specifies an Output that carries an NFT and uses secp256k1 signature scheme.\n */\nclass NFTTransferOutput extends NFTOutput {\n    /**\n       * An [[Output]] class which contains an NFT on an assetID.\n       *\n       * @param groupID A number representing the amount in the output\n       * @param payload A {@link https://github.com/feross/buffer|Buffer} of max length 1024\n       * @param addresses An array of {@link https://github.com/feross/buffer|Buffer}s representing addresses\n       * @param locktime A {@link https://github.com/indutny/bn.js/|BN} representing the locktime\n       * @param threshold A number representing the the threshold number of signers required to sign the transaction\n  \n       */\n    constructor(groupID = undefined, payload = undefined, addresses = undefined, locktime = undefined, threshold = undefined) {\n        super(addresses, locktime, threshold);\n        this._typeName = \"NFTTransferOutput\";\n        this._typeID = constants_1.AVMConstants.NFTXFEROUTPUTID;\n        this.sizePayload = buffer_1.Buffer.alloc(4);\n        /**\n         * Returns the payload as a {@link https://github.com/feross/buffer|Buffer} with content only.\n         */\n        this.getPayload = () => bintools.copyFrom(this.payload);\n        /**\n         * Returns the payload as a {@link https://github.com/feross/buffer|Buffer} with length of payload prepended.\n         */\n        this.getPayloadBuffer = () => buffer_1.Buffer.concat([bintools.copyFrom(this.sizePayload), bintools.copyFrom(this.payload)]);\n        if (typeof groupID !== 'undefined' && typeof payload !== 'undefined') {\n            this.groupID.writeUInt32BE(groupID, 0);\n            this.sizePayload.writeUInt32BE(payload.length, 0);\n            this.payload = bintools.copyFrom(payload, 0, payload.length);\n        }\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { \"payload\": serializer.encoder(this.payload, encoding, \"Buffer\", \"hex\", this.payload.length) });\n    }\n    ;\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.payload = serializer.decoder(fields[\"payload\"], encoding, \"hex\", \"Buffer\");\n        this.sizePayload = buffer_1.Buffer.alloc(4);\n        this.sizePayload.writeUInt32BE(this.payload.length, 0);\n    }\n    /**\n     * Returns the outputID for this output\n     */\n    getOutputID() {\n        return this._typeID;\n    }\n    /**\n     * Popuates the instance from a {@link https://github.com/feross/buffer|Buffer} representing the [[NFTTransferOutput]] and returns the size of the output.\n     */\n    fromBuffer(utxobuff, offset = 0) {\n        this.groupID = bintools.copyFrom(utxobuff, offset, offset + 4);\n        offset += 4;\n        this.sizePayload = bintools.copyFrom(utxobuff, offset, offset + 4);\n        let psize = this.sizePayload.readUInt32BE(0);\n        offset += 4;\n        this.payload = bintools.copyFrom(utxobuff, offset, offset + psize);\n        offset = offset + psize;\n        return super.fromBuffer(utxobuff, offset);\n    }\n    /**\n     * Returns the buffer representing the [[NFTTransferOutput]] instance.\n     */\n    toBuffer() {\n        const superbuff = super.toBuffer();\n        const bsize = this.groupID.length + this.sizePayload.length + this.payload.length + superbuff.length;\n        this.sizePayload.writeUInt32BE(this.payload.length, 0);\n        const barr = [this.groupID, this.sizePayload, this.payload, superbuff];\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n    create(...args) {\n        return new NFTTransferOutput(...args);\n    }\n    clone() {\n        const newout = this.create();\n        newout.fromBuffer(this.toBuffer());\n        return newout;\n    }\n}\nexports.NFTTransferOutput = NFTTransferOutput;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\n/**\n * @packageDocumentation\n * @module API-EVM-Constants\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EVMConstants = void 0;\nclass EVMConstants {\n}\nexports.EVMConstants = EVMConstants;\nEVMConstants.SECPCREDENTIAL = 9;\nEVMConstants.IMPORTTX = 0;\nEVMConstants.EXPORTTX = 1;\nEVMConstants.SECPINPUTID = 5;\nEVMConstants.ASSETIDLEN = 32;\nEVMConstants.SECPXFEROUTPUTID = 7;\nEVMConstants.LATESTCODEC = 0;\nEVMConstants.ADDRESSLENGTH = 20;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3RhbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2FwaXMvZXZtL2NvbnN0YW50cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7OztHQUdHOzs7QUFFSCxNQUFhLFlBQVk7O0FBQXpCLG9DQWdCQztBQWZRLDJCQUFjLEdBQVcsQ0FBQyxDQUFDO0FBRTNCLHFCQUFRLEdBQVcsQ0FBQyxDQUFDO0FBRXJCLHFCQUFRLEdBQVcsQ0FBQyxDQUFDO0FBRXJCLHdCQUFXLEdBQVcsQ0FBQyxDQUFDO0FBRXhCLHVCQUFVLEdBQVcsRUFBRSxDQUFDO0FBRXhCLDZCQUFnQixHQUFXLENBQUMsQ0FBQztBQUU3Qix3QkFBVyxHQUFXLENBQUMsQ0FBQztBQUV4QiwwQkFBYSxHQUFVLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHBhY2thZ2VEb2N1bWVudGF0aW9uXG4gKiBAbW9kdWxlIEFQSS1FVk0tQ29uc3RhbnRzXG4gKi9cblxuZXhwb3J0IGNsYXNzIEVWTUNvbnN0YW50cyB7XG4gIHN0YXRpYyBTRUNQQ1JFREVOVElBTDogbnVtYmVyID0gOTtcblxuICBzdGF0aWMgSU1QT1JUVFg6IG51bWJlciA9IDA7XG5cbiAgc3RhdGljIEVYUE9SVFRYOiBudW1iZXIgPSAxO1xuXG4gIHN0YXRpYyBTRUNQSU5QVVRJRDogbnVtYmVyID0gNTtcblxuICBzdGF0aWMgQVNTRVRJRExFTjogbnVtYmVyID0gMzI7XG5cbiAgc3RhdGljIFNFQ1BYRkVST1VUUFVUSUQ6IG51bWJlciA9IDc7XG5cbiAgc3RhdGljIExBVEVTVENPREVDOiBudW1iZXIgPSAwO1xuXG4gIHN0YXRpYyBBRERSRVNTTEVOR1RIOm51bWJlciA9IDIwO1xufVxuIl19","\"use strict\";\n/**\n * @packageDocumentation\n * @module API-EVM-ExportTx\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ExportTx = void 0;\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst basetx_1 = require(\"./basetx\");\nconst credentials_1 = require(\"./credentials\");\nconst credentials_2 = require(\"../../common/credentials\");\nconst inputs_1 = require(\"./inputs\");\nconst serialization_1 = require(\"../../utils/serialization\");\nconst outputs_1 = require(\"./outputs\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serializer = serialization_1.Serialization.getInstance();\nclass ExportTx extends basetx_1.EVMBaseTx {\n    /**\n     * Class representing a ExportTx.\n     *\n     * @param networkid Optional networkid\n     * @param blockchainid Optional blockchainid, default Buffer.alloc(32, 16)\n     * @param destinationChain Optional destinationChain, default Buffer.alloc(32, 16)\n     * @param inputs Optional array of the [[EVMInputs]]s\n     * @param exportedOutputs Optional array of the [[EVMOutputs]]s\n     */\n    constructor(networkid = undefined, blockchainid = buffer_1.Buffer.alloc(32, 16), destinationChain = buffer_1.Buffer.alloc(32, 16), inputs = undefined, exportedOutputs = undefined) {\n        super(networkid, blockchainid);\n        this._typeName = \"ExportTx\";\n        this._typeID = constants_1.EVMConstants.EXPORTTX;\n        this.destinationChain = buffer_1.Buffer.alloc(32);\n        this.numInputs = buffer_1.Buffer.alloc(4);\n        this.inputs = [];\n        this.numExportedOutputs = buffer_1.Buffer.alloc(4);\n        this.exportedOutputs = [];\n        /**\n         * Returns the destinationChain of the input as {@link https://github.com/feross/buffer|Buffer}\n         */\n        this.getDestinationChain = () => this.destinationChain;\n        /**\n         * Returns the inputs as an array of [[EVMInputs]]\n         */\n        this.getInputs = () => this.inputs;\n        /**\n         * Returns the outs as an array of [[EVMOutputs]]\n         */\n        this.getExportedOutputs = () => this.exportedOutputs;\n        this.destinationChain = destinationChain;\n        if (typeof inputs !== 'undefined' && Array.isArray(inputs)) {\n            inputs.forEach((input) => {\n                if (!(input instanceof inputs_1.EVMInput)) {\n                    throw new Error(\"Error - ExportTx.constructor: invalid EVMInput in array parameter 'inputs'\");\n                }\n            });\n            this.inputs = inputs;\n        }\n        if (typeof exportedOutputs !== 'undefined' && Array.isArray(exportedOutputs)) {\n            exportedOutputs.forEach((exportedOutput) => {\n                if (!(exportedOutput instanceof outputs_1.TransferableOutput)) {\n                    throw new Error(\"Error - ExportTx.constructor: TransferableOutput EVMInput in array parameter 'exportedOutputs'\");\n                }\n            });\n            this.exportedOutputs = exportedOutputs;\n        }\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { \"destinationChain\": serializer.encoder(this.destinationChain, encoding, \"Buffer\", \"cb58\"), \"exportedOutputs\": this.exportedOutputs.map((i) => i.serialize(encoding)) });\n    }\n    ;\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.destinationChain = serializer.decoder(fields[\"destinationChain\"], encoding, \"cb58\", \"Buffer\", 32);\n        this.exportedOutputs = fields[\"exportedOutputs\"].map((i) => {\n            let eo = new outputs_1.TransferableOutput();\n            eo.deserialize(i, encoding);\n            return eo;\n        });\n        this.numExportedOutputs = buffer_1.Buffer.alloc(4);\n        this.numExportedOutputs.writeUInt32BE(this.exportedOutputs.length, 0);\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[ExportTx]].\n     */\n    toBuffer() {\n        if (typeof this.destinationChain === \"undefined\") {\n            throw new Error(\"ExportTx.toBuffer -- this.destinationChain is undefined\");\n        }\n        this.numInputs.writeUInt32BE(this.inputs.length, 0);\n        this.numExportedOutputs.writeUInt32BE(this.exportedOutputs.length, 0);\n        let barr = [super.toBuffer(), this.destinationChain, this.numInputs];\n        let bsize = super.toBuffer().length + this.destinationChain.length + this.numInputs.length;\n        this.inputs.forEach((importIn) => {\n            bsize += importIn.toBuffer().length;\n            barr.push(importIn.toBuffer());\n        });\n        bsize += this.numExportedOutputs.length;\n        barr.push(this.numExportedOutputs);\n        this.exportedOutputs.forEach((out) => {\n            bsize += out.toBuffer().length;\n            barr.push(out.toBuffer());\n        });\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n    /**\n     * Decodes the [[ExportTx]] as a {@link https://github.com/feross/buffer|Buffer} and returns the size.\n     */\n    fromBuffer(bytes, offset = 0) {\n        offset = super.fromBuffer(bytes, offset);\n        this.destinationChain = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        this.numInputs = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const numInputs = this.numInputs.readUInt32BE(0);\n        for (let i = 0; i < numInputs; i++) {\n            const anIn = new inputs_1.EVMInput();\n            offset = anIn.fromBuffer(bytes, offset);\n            this.inputs.push(anIn);\n        }\n        this.numExportedOutputs = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const numExportedOutputs = this.numExportedOutputs.readUInt32BE(0);\n        for (let i = 0; i < numExportedOutputs; i++) {\n            const anOut = new outputs_1.TransferableOutput();\n            offset = anOut.fromBuffer(bytes, offset);\n            this.exportedOutputs.push(anOut);\n        }\n        return offset;\n    }\n    /**\n     * Returns a base-58 representation of the [[ExportTx]].\n     */\n    toString() {\n        return bintools.bufferToB58(this.toBuffer());\n    }\n    /**\n     * Takes the bytes of an [[UnsignedTx]] and returns an array of [[Credential]]s\n        *\n        * @param msg A Buffer for the [[UnsignedTx]]\n        * @param kc An [[KeyChain]] used in signing\n        *\n        * @returns An array of [[Credential]]s\n        */\n    sign(msg, kc) {\n        const sigs = super.sign(msg, kc);\n        this.inputs.forEach((input) => {\n            const cred = credentials_1.SelectCredentialClass(input.getCredentialID());\n            const sigidxs = input.getSigIdxs();\n            sigidxs.forEach((sigidx) => {\n                const keypair = kc.getKey(sigidx.getSource());\n                const signval = keypair.sign(msg);\n                const sig = new credentials_2.Signature();\n                sig.fromBuffer(signval);\n                cred.addSignature(sig);\n            });\n            sigs.push(cred);\n        });\n        return sigs;\n    }\n}\nexports.ExportTx = ExportTx;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\n/**\n * @packageDocumentation\n * @module API-AVM-MinterSet\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MinterSet = void 0;\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst serialization_1 = require(\"../../utils/serialization\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serializer = serialization_1.Serialization.getInstance();\n/**\n * Class for representing a threshold and set of minting addresses in Avalanche.\n *\n * @typeparam MinterSet including a threshold and array of addresses\n */\nclass MinterSet extends serialization_1.Serializable {\n    /**\n     *\n     * @param threshold The number of signatures required to mint more of an asset by signing a minting transaction\n     * @param minters Array of addresss which are authorized to sign a minting transaction\n     */\n    constructor(threshold, minters) {\n        super();\n        this._typeName = \"MinterSet\";\n        this._typeID = undefined;\n        this.minters = [];\n        /**\n         * Returns the threshold.\n         */\n        this.getThreshold = () => {\n            return this.threshold;\n        };\n        /**\n         * Returns the minters.\n         */\n        this.getMinters = () => {\n            return this.minters;\n        };\n        this._cleanAddresses = (addresses) => {\n            let addrs = [];\n            for (let i = 0; i < addresses.length; i++) {\n                if (typeof addresses[i] === \"string\") {\n                    addrs.push(bintools.stringToAddress(addresses[i]));\n                }\n                else if (addresses[i] instanceof buffer_1.Buffer) {\n                    addrs.push(addresses[i]);\n                }\n            }\n            return addrs;\n        };\n        this.threshold = threshold;\n        this.minters = this._cleanAddresses(minters);\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { \"threshold\": serializer.encoder(this.threshold, encoding, \"number\", \"decimalString\", 4), \"minters\": this.minters.map((m) => serializer.encoder(m, encoding, \"Buffer\", \"cb58\", 20)) });\n    }\n    ;\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.threshold = serializer.decoder(fields[\"threshold\"], encoding, \"decimalString\", \"number\", 4);\n        this.minters = fields[\"minters\"].map((m) => serializer.decoder(m, encoding, \"cb58\", \"Buffer\", 20));\n    }\n}\nexports.MinterSet = MinterSet;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWludGVyc2V0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2FwaXMvYXZtL21pbnRlcnNldC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7OztHQUdHOzs7Ozs7QUFFSCxvQ0FBaUM7QUFDakMsb0VBQTZDO0FBQzdDLDZEQUE0RjtBQUU1Rjs7R0FFRztBQUNILE1BQU0sUUFBUSxHQUFHLGtCQUFRLENBQUMsV0FBVyxFQUFFLENBQUM7QUFDeEMsTUFBTSxVQUFVLEdBQUcsNkJBQWEsQ0FBQyxXQUFXLEVBQUUsQ0FBQztBQUUvQzs7OztHQUlHO0FBQ0gsTUFBYSxTQUFVLFNBQVEsNEJBQVk7SUErQ3ZDOzs7O09BSUc7SUFDSCxZQUFZLFNBQWdCLEVBQUUsT0FBNEI7UUFDdEQsS0FBSyxFQUFFLENBQUM7UUFwREYsY0FBUyxHQUFHLFdBQVcsQ0FBQztRQUN4QixZQUFPLEdBQUcsU0FBUyxDQUFDO1FBaUJwQixZQUFPLEdBQWlCLEVBQUUsQ0FBQztRQUVyQzs7V0FFRztRQUNILGlCQUFZLEdBQUcsR0FBVSxFQUFFO1lBQ3ZCLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztRQUMxQixDQUFDLENBQUE7UUFFRDs7V0FFRztRQUNILGVBQVUsR0FBRyxHQUFpQixFQUFFO1lBQzVCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztRQUN4QixDQUFDLENBQUE7UUFFVSxvQkFBZSxHQUFHLENBQUMsU0FBOEIsRUFBZ0IsRUFBRTtZQUMxRSxJQUFJLEtBQUssR0FBaUIsRUFBRSxDQUFDO1lBQzdCLEtBQUksSUFBSSxDQUFDLEdBQVUsQ0FBQyxFQUFFLENBQUMsR0FBRyxTQUFTLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO2dCQUM3QyxJQUFHLE9BQU8sU0FBUyxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVEsRUFBRTtvQkFDakMsS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQVcsQ0FBQyxDQUFDLENBQUM7aUJBQ2hFO3FCQUFNLElBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxZQUFZLGVBQU0sRUFBRTtvQkFDdEMsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFXLENBQUMsQ0FBQztpQkFDdEM7YUFDSjtZQUNELE9BQU8sS0FBSyxDQUFDO1FBQ2pCLENBQUMsQ0FBQTtRQVNHLElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO1FBQzNCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNqRCxDQUFDO0lBcERELFNBQVMsQ0FBQyxXQUE4QixLQUFLO1FBQ3pDLElBQUksTUFBTSxHQUFVLEtBQUssQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDOUMsdUNBQ08sTUFBTSxLQUNULFdBQVcsRUFBRSxVQUFVLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxlQUFlLEVBQUUsQ0FBQyxDQUFDLEVBQ3ZGLFNBQVMsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsRUFBRSxDQUFDLENBQUMsSUFDNUY7SUFDTCxDQUFDO0lBQUEsQ0FBQztJQUNGLFdBQVcsQ0FBQyxNQUFhLEVBQUUsV0FBOEIsS0FBSztRQUMxRCxLQUFLLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FBQztRQUNwQyxJQUFJLENBQUMsU0FBUyxHQUFHLFVBQVUsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxFQUFFLFFBQVEsRUFBRSxlQUFlLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ2pHLElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQVEsRUFBRSxFQUFFLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUM5RyxDQUFDO0NBeUNKO0FBekRELDhCQXlEQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHBhY2thZ2VEb2N1bWVudGF0aW9uXG4gKiBAbW9kdWxlIEFQSS1BVk0tTWludGVyU2V0XG4gKi9cblxuaW1wb3J0IHsgQnVmZmVyIH0gZnJvbSBcImJ1ZmZlci9cIjtcbmltcG9ydCBCaW5Ub29scyAgZnJvbSAnLi4vLi4vdXRpbHMvYmludG9vbHMnO1xuaW1wb3J0IHsgU2VyaWFsaXphYmxlLCBTZXJpYWxpemF0aW9uLCBTZXJpYWxpemVkRW5jb2RpbmcgfSBmcm9tICcuLi8uLi91dGlscy9zZXJpYWxpemF0aW9uJztcblxuLyoqXG4gKiBAaWdub3JlXG4gKi9cbmNvbnN0IGJpbnRvb2xzID0gQmluVG9vbHMuZ2V0SW5zdGFuY2UoKTtcbmNvbnN0IHNlcmlhbGl6ZXIgPSBTZXJpYWxpemF0aW9uLmdldEluc3RhbmNlKCk7XG5cbi8qKlxuICogQ2xhc3MgZm9yIHJlcHJlc2VudGluZyBhIHRocmVzaG9sZCBhbmQgc2V0IG9mIG1pbnRpbmcgYWRkcmVzc2VzIGluIEF2YWxhbmNoZS4gXG4gKiBcbiAqIEB0eXBlcGFyYW0gTWludGVyU2V0IGluY2x1ZGluZyBhIHRocmVzaG9sZCBhbmQgYXJyYXkgb2YgYWRkcmVzc2VzXG4gKi9cbmV4cG9ydCBjbGFzcyBNaW50ZXJTZXQgZXh0ZW5kcyBTZXJpYWxpemFibGV7XG4gICAgcHJvdGVjdGVkIF90eXBlTmFtZSA9IFwiTWludGVyU2V0XCI7XG4gICAgcHJvdGVjdGVkIF90eXBlSUQgPSB1bmRlZmluZWQ7XG5cbiAgICBzZXJpYWxpemUoZW5jb2Rpbmc6U2VyaWFsaXplZEVuY29kaW5nID0gXCJoZXhcIik6b2JqZWN0IHtcbiAgICAgICAgbGV0IGZpZWxkczpvYmplY3QgPSBzdXBlci5zZXJpYWxpemUoZW5jb2RpbmcpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLi4uZmllbGRzLFxuICAgICAgICAgICAgXCJ0aHJlc2hvbGRcIjogc2VyaWFsaXplci5lbmNvZGVyKHRoaXMudGhyZXNob2xkLCBlbmNvZGluZywgXCJudW1iZXJcIiwgXCJkZWNpbWFsU3RyaW5nXCIsIDQpLFxuICAgICAgICAgICAgXCJtaW50ZXJzXCI6IHRoaXMubWludGVycy5tYXAoKG0pID0+IHNlcmlhbGl6ZXIuZW5jb2RlcihtLCBlbmNvZGluZywgXCJCdWZmZXJcIiwgXCJjYjU4XCIsIDIwKSlcbiAgICAgICAgfVxuICAgIH07XG4gICAgZGVzZXJpYWxpemUoZmllbGRzOm9iamVjdCwgZW5jb2Rpbmc6U2VyaWFsaXplZEVuY29kaW5nID0gXCJoZXhcIikge1xuICAgICAgICBzdXBlci5kZXNlcmlhbGl6ZShmaWVsZHMsIGVuY29kaW5nKTtcbiAgICAgICAgdGhpcy50aHJlc2hvbGQgPSBzZXJpYWxpemVyLmRlY29kZXIoZmllbGRzW1widGhyZXNob2xkXCJdLCBlbmNvZGluZywgXCJkZWNpbWFsU3RyaW5nXCIsIFwibnVtYmVyXCIsIDQpO1xuICAgICAgICB0aGlzLm1pbnRlcnMgPSBmaWVsZHNbXCJtaW50ZXJzXCJdLm1hcCgobTpzdHJpbmcpID0+IHNlcmlhbGl6ZXIuZGVjb2RlcihtLCBlbmNvZGluZywgXCJjYjU4XCIsIFwiQnVmZmVyXCIsIDIwKSk7XG4gICAgfVxuICBcbiAgICBwcm90ZWN0ZWQgdGhyZXNob2xkOm51bWJlcjtcbiAgICBwcm90ZWN0ZWQgbWludGVyczpBcnJheTxCdWZmZXI+ID0gW107XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSB0aHJlc2hvbGQuXG4gICAgICovXG4gICAgZ2V0VGhyZXNob2xkID0gKCk6bnVtYmVyID0+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGhyZXNob2xkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIG1pbnRlcnMuXG4gICAgICovXG4gICAgZ2V0TWludGVycyA9ICgpOkFycmF5PEJ1ZmZlcj4gPT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5taW50ZXJzO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCAgX2NsZWFuQWRkcmVzc2VzID0gKGFkZHJlc3NlczpBcnJheTxzdHJpbmd8QnVmZmVyPik6QXJyYXk8QnVmZmVyPiA9PiB7XG4gICAgICAgIGxldCBhZGRyczpBcnJheTxCdWZmZXI+ID0gW107XG4gICAgICAgIGZvcihsZXQgaTpudW1iZXIgPSAwOyBpIDwgYWRkcmVzc2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZih0eXBlb2YgYWRkcmVzc2VzW2ldID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgYWRkcnMucHVzaChiaW50b29scy5zdHJpbmdUb0FkZHJlc3MoYWRkcmVzc2VzW2ldIGFzIHN0cmluZykpO1xuICAgICAgICAgICAgfSBlbHNlIGlmKGFkZHJlc3Nlc1tpXSBpbnN0YW5jZW9mIEJ1ZmZlcikge1xuICAgICAgICAgICAgICAgIGFkZHJzLnB1c2goYWRkcmVzc2VzW2ldIGFzIEJ1ZmZlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFkZHJzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEBwYXJhbSB0aHJlc2hvbGQgVGhlIG51bWJlciBvZiBzaWduYXR1cmVzIHJlcXVpcmVkIHRvIG1pbnQgbW9yZSBvZiBhbiBhc3NldCBieSBzaWduaW5nIGEgbWludGluZyB0cmFuc2FjdGlvblxuICAgICAqIEBwYXJhbSBtaW50ZXJzIEFycmF5IG9mIGFkZHJlc3NzIHdoaWNoIGFyZSBhdXRob3JpemVkIHRvIHNpZ24gYSBtaW50aW5nIHRyYW5zYWN0aW9uXG4gICAgICovXG4gICAgY29uc3RydWN0b3IodGhyZXNob2xkOm51bWJlciwgbWludGVyczpBcnJheTxzdHJpbmd8QnVmZmVyPikge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLnRocmVzaG9sZCA9IHRocmVzaG9sZDtcbiAgICAgICAgdGhpcy5taW50ZXJzID0gdGhpcy5fY2xlYW5BZGRyZXNzZXMobWludGVycyk7XG4gICAgfVxufSJdfQ==","(function (module, exports) {\n  'use strict';\n\n  // Utils\n  function assert (val, msg) {\n    if (!val) throw new Error(msg || 'Assertion failed');\n  }\n\n  // Could use `inherits` module, but don't want to move from single file\n  // architecture yet.\n  function inherits (ctor, superCtor) {\n    ctor.super_ = superCtor;\n    var TempCtor = function () {};\n    TempCtor.prototype = superCtor.prototype;\n    ctor.prototype = new TempCtor();\n    ctor.prototype.constructor = ctor;\n  }\n\n  // BN\n\n  function BN (number, base, endian) {\n    if (BN.isBN(number)) {\n      return number;\n    }\n\n    this.negative = 0;\n    this.words = null;\n    this.length = 0;\n\n    // Reduction context\n    this.red = null;\n\n    if (number !== null) {\n      if (base === 'le' || base === 'be') {\n        endian = base;\n        base = 10;\n      }\n\n      this._init(number || 0, base || 10, endian || 'be');\n    }\n  }\n  if (typeof module === 'object') {\n    module.exports = BN;\n  } else {\n    exports.BN = BN;\n  }\n\n  BN.BN = BN;\n  BN.wordSize = 26;\n\n  var Buffer;\n  try {\n    Buffer = require('buffer').Buffer;\n  } catch (e) {\n  }\n\n  BN.isBN = function isBN (num) {\n    if (num instanceof BN) {\n      return true;\n    }\n\n    return num !== null && typeof num === 'object' &&\n      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);\n  };\n\n  BN.max = function max (left, right) {\n    if (left.cmp(right) > 0) return left;\n    return right;\n  };\n\n  BN.min = function min (left, right) {\n    if (left.cmp(right) < 0) return left;\n    return right;\n  };\n\n  BN.prototype._init = function init (number, base, endian) {\n    if (typeof number === 'number') {\n      return this._initNumber(number, base, endian);\n    }\n\n    if (typeof number === 'object') {\n      return this._initArray(number, base, endian);\n    }\n\n    if (base === 'hex') {\n      base = 16;\n    }\n    assert(base === (base | 0) && base >= 2 && base <= 36);\n\n    number = number.toString().replace(/\\s+/g, '');\n    var start = 0;\n    if (number[0] === '-') {\n      start++;\n    }\n\n    if (base === 16) {\n      this._parseHex(number, start);\n    } else {\n      this._parseBase(number, base, start);\n    }\n\n    if (number[0] === '-') {\n      this.negative = 1;\n    }\n\n    this.strip();\n\n    if (endian !== 'le') return;\n\n    this._initArray(this.toArray(), base, endian);\n  };\n\n  BN.prototype._initNumber = function _initNumber (number, base, endian) {\n    if (number < 0) {\n      this.negative = 1;\n      number = -number;\n    }\n    if (number < 0x4000000) {\n      this.words = [ number & 0x3ffffff ];\n      this.length = 1;\n    } else if (number < 0x10000000000000) {\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff\n      ];\n      this.length = 2;\n    } else {\n      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff,\n        1\n      ];\n      this.length = 3;\n    }\n\n    if (endian !== 'le') return;\n\n    // Reverse the bytes\n    this._initArray(this.toArray(), base, endian);\n  };\n\n  BN.prototype._initArray = function _initArray (number, base, endian) {\n    // Perhaps a Uint8Array\n    assert(typeof number.length === 'number');\n    if (number.length <= 0) {\n      this.words = [ 0 ];\n      this.length = 1;\n      return this;\n    }\n\n    this.length = Math.ceil(number.length / 3);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    var j, w;\n    var off = 0;\n    if (endian === 'be') {\n      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {\n        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    } else if (endian === 'le') {\n      for (i = 0, j = 0; i < number.length; i += 3) {\n        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    }\n    return this.strip();\n  };\n\n  function parseHex (str, start, end) {\n    var r = 0;\n    var len = Math.min(str.length, end);\n    for (var i = start; i < len; i++) {\n      var c = str.charCodeAt(i) - 48;\n\n      r <<= 4;\n\n      // 'a' - 'f'\n      if (c >= 49 && c <= 54) {\n        r |= c - 49 + 0xa;\n\n      // 'A' - 'F'\n      } else if (c >= 17 && c <= 22) {\n        r |= c - 17 + 0xa;\n\n      // '0' - '9'\n      } else {\n        r |= c & 0xf;\n      }\n    }\n    return r;\n  }\n\n  BN.prototype._parseHex = function _parseHex (number, start) {\n    // Create possibly bigger array to ensure that it fits the number\n    this.length = Math.ceil((number.length - start) / 6);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    var j, w;\n    // Scan 24-bit chunks and add them to the number\n    var off = 0;\n    for (i = number.length - 6, j = 0; i >= start; i -= 6) {\n      w = parseHex(number, i, i + 6);\n      this.words[j] |= (w << off) & 0x3ffffff;\n      // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb\n      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;\n      off += 24;\n      if (off >= 26) {\n        off -= 26;\n        j++;\n      }\n    }\n    if (i + 6 !== start) {\n      w = parseHex(number, start, i + 6);\n      this.words[j] |= (w << off) & 0x3ffffff;\n      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;\n    }\n    this.strip();\n  };\n\n  function parseBase (str, start, end, mul) {\n    var r = 0;\n    var len = Math.min(str.length, end);\n    for (var i = start; i < len; i++) {\n      var c = str.charCodeAt(i) - 48;\n\n      r *= mul;\n\n      // 'a'\n      if (c >= 49) {\n        r += c - 49 + 0xa;\n\n      // 'A'\n      } else if (c >= 17) {\n        r += c - 17 + 0xa;\n\n      // '0' - '9'\n      } else {\n        r += c;\n      }\n    }\n    return r;\n  }\n\n  BN.prototype._parseBase = function _parseBase (number, base, start) {\n    // Initialize as zero\n    this.words = [ 0 ];\n    this.length = 1;\n\n    // Find length of limb in base\n    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {\n      limbLen++;\n    }\n    limbLen--;\n    limbPow = (limbPow / base) | 0;\n\n    var total = number.length - start;\n    var mod = total % limbLen;\n    var end = Math.min(total, total - mod) + start;\n\n    var word = 0;\n    for (var i = start; i < end; i += limbLen) {\n      word = parseBase(number, i, i + limbLen, base);\n\n      this.imuln(limbPow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n\n    if (mod !== 0) {\n      var pow = 1;\n      word = parseBase(number, i, number.length, base);\n\n      for (i = 0; i < mod; i++) {\n        pow *= base;\n      }\n\n      this.imuln(pow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n  };\n\n  BN.prototype.copy = function copy (dest) {\n    dest.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      dest.words[i] = this.words[i];\n    }\n    dest.length = this.length;\n    dest.negative = this.negative;\n    dest.red = this.red;\n  };\n\n  BN.prototype.clone = function clone () {\n    var r = new BN(null);\n    this.copy(r);\n    return r;\n  };\n\n  BN.prototype._expand = function _expand (size) {\n    while (this.length < size) {\n      this.words[this.length++] = 0;\n    }\n    return this;\n  };\n\n  // Remove leading `0` from `this`\n  BN.prototype.strip = function strip () {\n    while (this.length > 1 && this.words[this.length - 1] === 0) {\n      this.length--;\n    }\n    return this._normSign();\n  };\n\n  BN.prototype._normSign = function _normSign () {\n    // -0 = 0\n    if (this.length === 1 && this.words[0] === 0) {\n      this.negative = 0;\n    }\n    return this;\n  };\n\n  BN.prototype.inspect = function inspect () {\n    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';\n  };\n\n  /*\n\n  var zeros = [];\n  var groupSizes = [];\n  var groupBases = [];\n\n  var s = '';\n  var i = -1;\n  while (++i < BN.wordSize) {\n    zeros[i] = s;\n    s += '0';\n  }\n  groupSizes[0] = 0;\n  groupSizes[1] = 0;\n  groupBases[0] = 0;\n  groupBases[1] = 0;\n  var base = 2 - 1;\n  while (++base < 36 + 1) {\n    var groupSize = 0;\n    var groupBase = 1;\n    while (groupBase < (1 << BN.wordSize) / base) {\n      groupBase *= base;\n      groupSize += 1;\n    }\n    groupSizes[base] = groupSize;\n    groupBases[base] = groupBase;\n  }\n\n  */\n\n  var zeros = [\n    '',\n    '0',\n    '00',\n    '000',\n    '0000',\n    '00000',\n    '000000',\n    '0000000',\n    '00000000',\n    '000000000',\n    '0000000000',\n    '00000000000',\n    '000000000000',\n    '0000000000000',\n    '00000000000000',\n    '000000000000000',\n    '0000000000000000',\n    '00000000000000000',\n    '000000000000000000',\n    '0000000000000000000',\n    '00000000000000000000',\n    '000000000000000000000',\n    '0000000000000000000000',\n    '00000000000000000000000',\n    '000000000000000000000000',\n    '0000000000000000000000000'\n  ];\n\n  var groupSizes = [\n    0, 0,\n    25, 16, 12, 11, 10, 9, 8,\n    8, 7, 7, 7, 7, 6, 6,\n    6, 6, 6, 6, 6, 5, 5,\n    5, 5, 5, 5, 5, 5, 5,\n    5, 5, 5, 5, 5, 5, 5\n  ];\n\n  var groupBases = [\n    0, 0,\n    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,\n    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,\n    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,\n    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,\n    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176\n  ];\n\n  BN.prototype.toString = function toString (base, padding) {\n    base = base || 10;\n    padding = padding | 0 || 1;\n\n    var out;\n    if (base === 16 || base === 'hex') {\n      out = '';\n      var off = 0;\n      var carry = 0;\n      for (var i = 0; i < this.length; i++) {\n        var w = this.words[i];\n        var word = (((w << off) | carry) & 0xffffff).toString(16);\n        carry = (w >>> (24 - off)) & 0xffffff;\n        if (carry !== 0 || i !== this.length - 1) {\n          out = zeros[6 - word.length] + word + out;\n        } else {\n          out = word + out;\n        }\n        off += 2;\n        if (off >= 26) {\n          off -= 26;\n          i--;\n        }\n      }\n      if (carry !== 0) {\n        out = carry.toString(16) + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    if (base === (base | 0) && base >= 2 && base <= 36) {\n      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));\n      var groupSize = groupSizes[base];\n      // var groupBase = Math.pow(base, groupSize);\n      var groupBase = groupBases[base];\n      out = '';\n      var c = this.clone();\n      c.negative = 0;\n      while (!c.isZero()) {\n        var r = c.modn(groupBase).toString(base);\n        c = c.idivn(groupBase);\n\n        if (!c.isZero()) {\n          out = zeros[groupSize - r.length] + r + out;\n        } else {\n          out = r + out;\n        }\n      }\n      if (this.isZero()) {\n        out = '0' + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    assert(false, 'Base should be between 2 and 36');\n  };\n\n  BN.prototype.toNumber = function toNumber () {\n    var ret = this.words[0];\n    if (this.length === 2) {\n      ret += this.words[1] * 0x4000000;\n    } else if (this.length === 3 && this.words[2] === 0x01) {\n      // NOTE: at this stage it is known that the top bit is set\n      ret += 0x10000000000000 + (this.words[1] * 0x4000000);\n    } else if (this.length > 2) {\n      assert(false, 'Number can only safely store up to 53 bits');\n    }\n    return (this.negative !== 0) ? -ret : ret;\n  };\n\n  BN.prototype.toJSON = function toJSON () {\n    return this.toString(16);\n  };\n\n  BN.prototype.toBuffer = function toBuffer (endian, length) {\n    assert(typeof Buffer !== 'undefined');\n    return this.toArrayLike(Buffer, endian, length);\n  };\n\n  BN.prototype.toArray = function toArray (endian, length) {\n    return this.toArrayLike(Array, endian, length);\n  };\n\n  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {\n    var byteLength = this.byteLength();\n    var reqLength = length || Math.max(1, byteLength);\n    assert(byteLength <= reqLength, 'byte array longer than desired length');\n    assert(reqLength > 0, 'Requested array length <= 0');\n\n    this.strip();\n    var littleEndian = endian === 'le';\n    var res = new ArrayType(reqLength);\n\n    var b, i;\n    var q = this.clone();\n    if (!littleEndian) {\n      // Assume big-endian\n      for (i = 0; i < reqLength - byteLength; i++) {\n        res[i] = 0;\n      }\n\n      for (i = 0; !q.isZero(); i++) {\n        b = q.andln(0xff);\n        q.iushrn(8);\n\n        res[reqLength - i - 1] = b;\n      }\n    } else {\n      for (i = 0; !q.isZero(); i++) {\n        b = q.andln(0xff);\n        q.iushrn(8);\n\n        res[i] = b;\n      }\n\n      for (; i < reqLength; i++) {\n        res[i] = 0;\n      }\n    }\n\n    return res;\n  };\n\n  if (Math.clz32) {\n    BN.prototype._countBits = function _countBits (w) {\n      return 32 - Math.clz32(w);\n    };\n  } else {\n    BN.prototype._countBits = function _countBits (w) {\n      var t = w;\n      var r = 0;\n      if (t >= 0x1000) {\n        r += 13;\n        t >>>= 13;\n      }\n      if (t >= 0x40) {\n        r += 7;\n        t >>>= 7;\n      }\n      if (t >= 0x8) {\n        r += 4;\n        t >>>= 4;\n      }\n      if (t >= 0x02) {\n        r += 2;\n        t >>>= 2;\n      }\n      return r + t;\n    };\n  }\n\n  BN.prototype._zeroBits = function _zeroBits (w) {\n    // Short-cut\n    if (w === 0) return 26;\n\n    var t = w;\n    var r = 0;\n    if ((t & 0x1fff) === 0) {\n      r += 13;\n      t >>>= 13;\n    }\n    if ((t & 0x7f) === 0) {\n      r += 7;\n      t >>>= 7;\n    }\n    if ((t & 0xf) === 0) {\n      r += 4;\n      t >>>= 4;\n    }\n    if ((t & 0x3) === 0) {\n      r += 2;\n      t >>>= 2;\n    }\n    if ((t & 0x1) === 0) {\n      r++;\n    }\n    return r;\n  };\n\n  // Return number of used bits in a BN\n  BN.prototype.bitLength = function bitLength () {\n    var w = this.words[this.length - 1];\n    var hi = this._countBits(w);\n    return (this.length - 1) * 26 + hi;\n  };\n\n  function toBitArray (num) {\n    var w = new Array(num.bitLength());\n\n    for (var bit = 0; bit < w.length; bit++) {\n      var off = (bit / 26) | 0;\n      var wbit = bit % 26;\n\n      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;\n    }\n\n    return w;\n  }\n\n  // Number of trailing zero bits\n  BN.prototype.zeroBits = function zeroBits () {\n    if (this.isZero()) return 0;\n\n    var r = 0;\n    for (var i = 0; i < this.length; i++) {\n      var b = this._zeroBits(this.words[i]);\n      r += b;\n      if (b !== 26) break;\n    }\n    return r;\n  };\n\n  BN.prototype.byteLength = function byteLength () {\n    return Math.ceil(this.bitLength() / 8);\n  };\n\n  BN.prototype.toTwos = function toTwos (width) {\n    if (this.negative !== 0) {\n      return this.abs().inotn(width).iaddn(1);\n    }\n    return this.clone();\n  };\n\n  BN.prototype.fromTwos = function fromTwos (width) {\n    if (this.testn(width - 1)) {\n      return this.notn(width).iaddn(1).ineg();\n    }\n    return this.clone();\n  };\n\n  BN.prototype.isNeg = function isNeg () {\n    return this.negative !== 0;\n  };\n\n  // Return negative clone of `this`\n  BN.prototype.neg = function neg () {\n    return this.clone().ineg();\n  };\n\n  BN.prototype.ineg = function ineg () {\n    if (!this.isZero()) {\n      this.negative ^= 1;\n    }\n\n    return this;\n  };\n\n  // Or `num` with `this` in-place\n  BN.prototype.iuor = function iuor (num) {\n    while (this.length < num.length) {\n      this.words[this.length++] = 0;\n    }\n\n    for (var i = 0; i < num.length; i++) {\n      this.words[i] = this.words[i] | num.words[i];\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ior = function ior (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuor(num);\n  };\n\n  // Or `num` with `this`\n  BN.prototype.or = function or (num) {\n    if (this.length > num.length) return this.clone().ior(num);\n    return num.clone().ior(this);\n  };\n\n  BN.prototype.uor = function uor (num) {\n    if (this.length > num.length) return this.clone().iuor(num);\n    return num.clone().iuor(this);\n  };\n\n  // And `num` with `this` in-place\n  BN.prototype.iuand = function iuand (num) {\n    // b = min-length(num, this)\n    var b;\n    if (this.length > num.length) {\n      b = num;\n    } else {\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = this.words[i] & num.words[i];\n    }\n\n    this.length = b.length;\n\n    return this.strip();\n  };\n\n  BN.prototype.iand = function iand (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuand(num);\n  };\n\n  // And `num` with `this`\n  BN.prototype.and = function and (num) {\n    if (this.length > num.length) return this.clone().iand(num);\n    return num.clone().iand(this);\n  };\n\n  BN.prototype.uand = function uand (num) {\n    if (this.length > num.length) return this.clone().iuand(num);\n    return num.clone().iuand(this);\n  };\n\n  // Xor `num` with `this` in-place\n  BN.prototype.iuxor = function iuxor (num) {\n    // a.length > b.length\n    var a;\n    var b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = a.words[i] ^ b.words[i];\n    }\n\n    if (this !== a) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = a.length;\n\n    return this.strip();\n  };\n\n  BN.prototype.ixor = function ixor (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuxor(num);\n  };\n\n  // Xor `num` with `this`\n  BN.prototype.xor = function xor (num) {\n    if (this.length > num.length) return this.clone().ixor(num);\n    return num.clone().ixor(this);\n  };\n\n  BN.prototype.uxor = function uxor (num) {\n    if (this.length > num.length) return this.clone().iuxor(num);\n    return num.clone().iuxor(this);\n  };\n\n  // Not ``this`` with ``width`` bitwidth\n  BN.prototype.inotn = function inotn (width) {\n    assert(typeof width === 'number' && width >= 0);\n\n    var bytesNeeded = Math.ceil(width / 26) | 0;\n    var bitsLeft = width % 26;\n\n    // Extend the buffer with leading zeroes\n    this._expand(bytesNeeded);\n\n    if (bitsLeft > 0) {\n      bytesNeeded--;\n    }\n\n    // Handle complete words\n    for (var i = 0; i < bytesNeeded; i++) {\n      this.words[i] = ~this.words[i] & 0x3ffffff;\n    }\n\n    // Handle the residue\n    if (bitsLeft > 0) {\n      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));\n    }\n\n    // And remove leading zeroes\n    return this.strip();\n  };\n\n  BN.prototype.notn = function notn (width) {\n    return this.clone().inotn(width);\n  };\n\n  // Set `bit` of `this`\n  BN.prototype.setn = function setn (bit, val) {\n    assert(typeof bit === 'number' && bit >= 0);\n\n    var off = (bit / 26) | 0;\n    var wbit = bit % 26;\n\n    this._expand(off + 1);\n\n    if (val) {\n      this.words[off] = this.words[off] | (1 << wbit);\n    } else {\n      this.words[off] = this.words[off] & ~(1 << wbit);\n    }\n\n    return this.strip();\n  };\n\n  // Add `num` to `this` in-place\n  BN.prototype.iadd = function iadd (num) {\n    var r;\n\n    // negative + positive\n    if (this.negative !== 0 && num.negative === 0) {\n      this.negative = 0;\n      r = this.isub(num);\n      this.negative ^= 1;\n      return this._normSign();\n\n    // positive + negative\n    } else if (this.negative === 0 && num.negative !== 0) {\n      num.negative = 0;\n      r = this.isub(num);\n      num.negative = 1;\n      return r._normSign();\n    }\n\n    // a.length > b.length\n    var a, b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n\n    this.length = a.length;\n    if (carry !== 0) {\n      this.words[this.length] = carry;\n      this.length++;\n    // Copy the rest of the words\n    } else if (a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    return this;\n  };\n\n  // Add `num` to `this`\n  BN.prototype.add = function add (num) {\n    var res;\n    if (num.negative !== 0 && this.negative === 0) {\n      num.negative = 0;\n      res = this.sub(num);\n      num.negative ^= 1;\n      return res;\n    } else if (num.negative === 0 && this.negative !== 0) {\n      this.negative = 0;\n      res = num.sub(this);\n      this.negative = 1;\n      return res;\n    }\n\n    if (this.length > num.length) return this.clone().iadd(num);\n\n    return num.clone().iadd(this);\n  };\n\n  // Subtract `num` from `this` in-place\n  BN.prototype.isub = function isub (num) {\n    // this - (-num) = this + num\n    if (num.negative !== 0) {\n      num.negative = 0;\n      var r = this.iadd(num);\n      num.negative = 1;\n      return r._normSign();\n\n    // -this - num = -(this + num)\n    } else if (this.negative !== 0) {\n      this.negative = 0;\n      this.iadd(num);\n      this.negative = 1;\n      return this._normSign();\n    }\n\n    // At this point both numbers are positive\n    var cmp = this.cmp(num);\n\n    // Optimization - zeroify\n    if (cmp === 0) {\n      this.negative = 0;\n      this.length = 1;\n      this.words[0] = 0;\n      return this;\n    }\n\n    // a > b\n    var a, b;\n    if (cmp > 0) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n\n    // Copy rest of the words\n    if (carry === 0 && i < a.length && a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = Math.max(this.length, i);\n\n    if (a !== this) {\n      this.negative = 1;\n    }\n\n    return this.strip();\n  };\n\n  // Subtract `num` from `this`\n  BN.prototype.sub = function sub (num) {\n    return this.clone().isub(num);\n  };\n\n  function smallMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    var len = (self.length + num.length) | 0;\n    out.length = len;\n    len = (len - 1) | 0;\n\n    // Peel one iteration (compiler can't do it, because of code complexity)\n    var a = self.words[0] | 0;\n    var b = num.words[0] | 0;\n    var r = a * b;\n\n    var lo = r & 0x3ffffff;\n    var carry = (r / 0x4000000) | 0;\n    out.words[0] = lo;\n\n    for (var k = 1; k < len; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = carry >>> 26;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = (k - j) | 0;\n        a = self.words[i] | 0;\n        b = num.words[j] | 0;\n        r = a * b + rword;\n        ncarry += (r / 0x4000000) | 0;\n        rword = r & 0x3ffffff;\n      }\n      out.words[k] = rword | 0;\n      carry = ncarry | 0;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry | 0;\n    } else {\n      out.length--;\n    }\n\n    return out.strip();\n  }\n\n  // TODO(indutny): it may be reasonable to omit it for users who don't need\n  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit\n  // multiplication (like elliptic secp256k1).\n  var comb10MulTo = function comb10MulTo (self, num, out) {\n    var a = self.words;\n    var b = num.words;\n    var o = out.words;\n    var c = 0;\n    var lo;\n    var mid;\n    var hi;\n    var a0 = a[0] | 0;\n    var al0 = a0 & 0x1fff;\n    var ah0 = a0 >>> 13;\n    var a1 = a[1] | 0;\n    var al1 = a1 & 0x1fff;\n    var ah1 = a1 >>> 13;\n    var a2 = a[2] | 0;\n    var al2 = a2 & 0x1fff;\n    var ah2 = a2 >>> 13;\n    var a3 = a[3] | 0;\n    var al3 = a3 & 0x1fff;\n    var ah3 = a3 >>> 13;\n    var a4 = a[4] | 0;\n    var al4 = a4 & 0x1fff;\n    var ah4 = a4 >>> 13;\n    var a5 = a[5] | 0;\n    var al5 = a5 & 0x1fff;\n    var ah5 = a5 >>> 13;\n    var a6 = a[6] | 0;\n    var al6 = a6 & 0x1fff;\n    var ah6 = a6 >>> 13;\n    var a7 = a[7] | 0;\n    var al7 = a7 & 0x1fff;\n    var ah7 = a7 >>> 13;\n    var a8 = a[8] | 0;\n    var al8 = a8 & 0x1fff;\n    var ah8 = a8 >>> 13;\n    var a9 = a[9] | 0;\n    var al9 = a9 & 0x1fff;\n    var ah9 = a9 >>> 13;\n    var b0 = b[0] | 0;\n    var bl0 = b0 & 0x1fff;\n    var bh0 = b0 >>> 13;\n    var b1 = b[1] | 0;\n    var bl1 = b1 & 0x1fff;\n    var bh1 = b1 >>> 13;\n    var b2 = b[2] | 0;\n    var bl2 = b2 & 0x1fff;\n    var bh2 = b2 >>> 13;\n    var b3 = b[3] | 0;\n    var bl3 = b3 & 0x1fff;\n    var bh3 = b3 >>> 13;\n    var b4 = b[4] | 0;\n    var bl4 = b4 & 0x1fff;\n    var bh4 = b4 >>> 13;\n    var b5 = b[5] | 0;\n    var bl5 = b5 & 0x1fff;\n    var bh5 = b5 >>> 13;\n    var b6 = b[6] | 0;\n    var bl6 = b6 & 0x1fff;\n    var bh6 = b6 >>> 13;\n    var b7 = b[7] | 0;\n    var bl7 = b7 & 0x1fff;\n    var bh7 = b7 >>> 13;\n    var b8 = b[8] | 0;\n    var bl8 = b8 & 0x1fff;\n    var bh8 = b8 >>> 13;\n    var b9 = b[9] | 0;\n    var bl9 = b9 & 0x1fff;\n    var bh9 = b9 >>> 13;\n\n    out.negative = self.negative ^ num.negative;\n    out.length = 19;\n    /* k = 0 */\n    lo = Math.imul(al0, bl0);\n    mid = Math.imul(al0, bh0);\n    mid = (mid + Math.imul(ah0, bl0)) | 0;\n    hi = Math.imul(ah0, bh0);\n    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;\n    w0 &= 0x3ffffff;\n    /* k = 1 */\n    lo = Math.imul(al1, bl0);\n    mid = Math.imul(al1, bh0);\n    mid = (mid + Math.imul(ah1, bl0)) | 0;\n    hi = Math.imul(ah1, bh0);\n    lo = (lo + Math.imul(al0, bl1)) | 0;\n    mid = (mid + Math.imul(al0, bh1)) | 0;\n    mid = (mid + Math.imul(ah0, bl1)) | 0;\n    hi = (hi + Math.imul(ah0, bh1)) | 0;\n    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;\n    w1 &= 0x3ffffff;\n    /* k = 2 */\n    lo = Math.imul(al2, bl0);\n    mid = Math.imul(al2, bh0);\n    mid = (mid + Math.imul(ah2, bl0)) | 0;\n    hi = Math.imul(ah2, bh0);\n    lo = (lo + Math.imul(al1, bl1)) | 0;\n    mid = (mid + Math.imul(al1, bh1)) | 0;\n    mid = (mid + Math.imul(ah1, bl1)) | 0;\n    hi = (hi + Math.imul(ah1, bh1)) | 0;\n    lo = (lo + Math.imul(al0, bl2)) | 0;\n    mid = (mid + Math.imul(al0, bh2)) | 0;\n    mid = (mid + Math.imul(ah0, bl2)) | 0;\n    hi = (hi + Math.imul(ah0, bh2)) | 0;\n    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;\n    w2 &= 0x3ffffff;\n    /* k = 3 */\n    lo = Math.imul(al3, bl0);\n    mid = Math.imul(al3, bh0);\n    mid = (mid + Math.imul(ah3, bl0)) | 0;\n    hi = Math.imul(ah3, bh0);\n    lo = (lo + Math.imul(al2, bl1)) | 0;\n    mid = (mid + Math.imul(al2, bh1)) | 0;\n    mid = (mid + Math.imul(ah2, bl1)) | 0;\n    hi = (hi + Math.imul(ah2, bh1)) | 0;\n    lo = (lo + Math.imul(al1, bl2)) | 0;\n    mid = (mid + Math.imul(al1, bh2)) | 0;\n    mid = (mid + Math.imul(ah1, bl2)) | 0;\n    hi = (hi + Math.imul(ah1, bh2)) | 0;\n    lo = (lo + Math.imul(al0, bl3)) | 0;\n    mid = (mid + Math.imul(al0, bh3)) | 0;\n    mid = (mid + Math.imul(ah0, bl3)) | 0;\n    hi = (hi + Math.imul(ah0, bh3)) | 0;\n    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;\n    w3 &= 0x3ffffff;\n    /* k = 4 */\n    lo = Math.imul(al4, bl0);\n    mid = Math.imul(al4, bh0);\n    mid = (mid + Math.imul(ah4, bl0)) | 0;\n    hi = Math.imul(ah4, bh0);\n    lo = (lo + Math.imul(al3, bl1)) | 0;\n    mid = (mid + Math.imul(al3, bh1)) | 0;\n    mid = (mid + Math.imul(ah3, bl1)) | 0;\n    hi = (hi + Math.imul(ah3, bh1)) | 0;\n    lo = (lo + Math.imul(al2, bl2)) | 0;\n    mid = (mid + Math.imul(al2, bh2)) | 0;\n    mid = (mid + Math.imul(ah2, bl2)) | 0;\n    hi = (hi + Math.imul(ah2, bh2)) | 0;\n    lo = (lo + Math.imul(al1, bl3)) | 0;\n    mid = (mid + Math.imul(al1, bh3)) | 0;\n    mid = (mid + Math.imul(ah1, bl3)) | 0;\n    hi = (hi + Math.imul(ah1, bh3)) | 0;\n    lo = (lo + Math.imul(al0, bl4)) | 0;\n    mid = (mid + Math.imul(al0, bh4)) | 0;\n    mid = (mid + Math.imul(ah0, bl4)) | 0;\n    hi = (hi + Math.imul(ah0, bh4)) | 0;\n    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;\n    w4 &= 0x3ffffff;\n    /* k = 5 */\n    lo = Math.imul(al5, bl0);\n    mid = Math.imul(al5, bh0);\n    mid = (mid + Math.imul(ah5, bl0)) | 0;\n    hi = Math.imul(ah5, bh0);\n    lo = (lo + Math.imul(al4, bl1)) | 0;\n    mid = (mid + Math.imul(al4, bh1)) | 0;\n    mid = (mid + Math.imul(ah4, bl1)) | 0;\n    hi = (hi + Math.imul(ah4, bh1)) | 0;\n    lo = (lo + Math.imul(al3, bl2)) | 0;\n    mid = (mid + Math.imul(al3, bh2)) | 0;\n    mid = (mid + Math.imul(ah3, bl2)) | 0;\n    hi = (hi + Math.imul(ah3, bh2)) | 0;\n    lo = (lo + Math.imul(al2, bl3)) | 0;\n    mid = (mid + Math.imul(al2, bh3)) | 0;\n    mid = (mid + Math.imul(ah2, bl3)) | 0;\n    hi = (hi + Math.imul(ah2, bh3)) | 0;\n    lo = (lo + Math.imul(al1, bl4)) | 0;\n    mid = (mid + Math.imul(al1, bh4)) | 0;\n    mid = (mid + Math.imul(ah1, bl4)) | 0;\n    hi = (hi + Math.imul(ah1, bh4)) | 0;\n    lo = (lo + Math.imul(al0, bl5)) | 0;\n    mid = (mid + Math.imul(al0, bh5)) | 0;\n    mid = (mid + Math.imul(ah0, bl5)) | 0;\n    hi = (hi + Math.imul(ah0, bh5)) | 0;\n    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;\n    w5 &= 0x3ffffff;\n    /* k = 6 */\n    lo = Math.imul(al6, bl0);\n    mid = Math.imul(al6, bh0);\n    mid = (mid + Math.imul(ah6, bl0)) | 0;\n    hi = Math.imul(ah6, bh0);\n    lo = (lo + Math.imul(al5, bl1)) | 0;\n    mid = (mid + Math.imul(al5, bh1)) | 0;\n    mid = (mid + Math.imul(ah5, bl1)) | 0;\n    hi = (hi + Math.imul(ah5, bh1)) | 0;\n    lo = (lo + Math.imul(al4, bl2)) | 0;\n    mid = (mid + Math.imul(al4, bh2)) | 0;\n    mid = (mid + Math.imul(ah4, bl2)) | 0;\n    hi = (hi + Math.imul(ah4, bh2)) | 0;\n    lo = (lo + Math.imul(al3, bl3)) | 0;\n    mid = (mid + Math.imul(al3, bh3)) | 0;\n    mid = (mid + Math.imul(ah3, bl3)) | 0;\n    hi = (hi + Math.imul(ah3, bh3)) | 0;\n    lo = (lo + Math.imul(al2, bl4)) | 0;\n    mid = (mid + Math.imul(al2, bh4)) | 0;\n    mid = (mid + Math.imul(ah2, bl4)) | 0;\n    hi = (hi + Math.imul(ah2, bh4)) | 0;\n    lo = (lo + Math.imul(al1, bl5)) | 0;\n    mid = (mid + Math.imul(al1, bh5)) | 0;\n    mid = (mid + Math.imul(ah1, bl5)) | 0;\n    hi = (hi + Math.imul(ah1, bh5)) | 0;\n    lo = (lo + Math.imul(al0, bl6)) | 0;\n    mid = (mid + Math.imul(al0, bh6)) | 0;\n    mid = (mid + Math.imul(ah0, bl6)) | 0;\n    hi = (hi + Math.imul(ah0, bh6)) | 0;\n    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;\n    w6 &= 0x3ffffff;\n    /* k = 7 */\n    lo = Math.imul(al7, bl0);\n    mid = Math.imul(al7, bh0);\n    mid = (mid + Math.imul(ah7, bl0)) | 0;\n    hi = Math.imul(ah7, bh0);\n    lo = (lo + Math.imul(al6, bl1)) | 0;\n    mid = (mid + Math.imul(al6, bh1)) | 0;\n    mid = (mid + Math.imul(ah6, bl1)) | 0;\n    hi = (hi + Math.imul(ah6, bh1)) | 0;\n    lo = (lo + Math.imul(al5, bl2)) | 0;\n    mid = (mid + Math.imul(al5, bh2)) | 0;\n    mid = (mid + Math.imul(ah5, bl2)) | 0;\n    hi = (hi + Math.imul(ah5, bh2)) | 0;\n    lo = (lo + Math.imul(al4, bl3)) | 0;\n    mid = (mid + Math.imul(al4, bh3)) | 0;\n    mid = (mid + Math.imul(ah4, bl3)) | 0;\n    hi = (hi + Math.imul(ah4, bh3)) | 0;\n    lo = (lo + Math.imul(al3, bl4)) | 0;\n    mid = (mid + Math.imul(al3, bh4)) | 0;\n    mid = (mid + Math.imul(ah3, bl4)) | 0;\n    hi = (hi + Math.imul(ah3, bh4)) | 0;\n    lo = (lo + Math.imul(al2, bl5)) | 0;\n    mid = (mid + Math.imul(al2, bh5)) | 0;\n    mid = (mid + Math.imul(ah2, bl5)) | 0;\n    hi = (hi + Math.imul(ah2, bh5)) | 0;\n    lo = (lo + Math.imul(al1, bl6)) | 0;\n    mid = (mid + Math.imul(al1, bh6)) | 0;\n    mid = (mid + Math.imul(ah1, bl6)) | 0;\n    hi = (hi + Math.imul(ah1, bh6)) | 0;\n    lo = (lo + Math.imul(al0, bl7)) | 0;\n    mid = (mid + Math.imul(al0, bh7)) | 0;\n    mid = (mid + Math.imul(ah0, bl7)) | 0;\n    hi = (hi + Math.imul(ah0, bh7)) | 0;\n    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;\n    w7 &= 0x3ffffff;\n    /* k = 8 */\n    lo = Math.imul(al8, bl0);\n    mid = Math.imul(al8, bh0);\n    mid = (mid + Math.imul(ah8, bl0)) | 0;\n    hi = Math.imul(ah8, bh0);\n    lo = (lo + Math.imul(al7, bl1)) | 0;\n    mid = (mid + Math.imul(al7, bh1)) | 0;\n    mid = (mid + Math.imul(ah7, bl1)) | 0;\n    hi = (hi + Math.imul(ah7, bh1)) | 0;\n    lo = (lo + Math.imul(al6, bl2)) | 0;\n    mid = (mid + Math.imul(al6, bh2)) | 0;\n    mid = (mid + Math.imul(ah6, bl2)) | 0;\n    hi = (hi + Math.imul(ah6, bh2)) | 0;\n    lo = (lo + Math.imul(al5, bl3)) | 0;\n    mid = (mid + Math.imul(al5, bh3)) | 0;\n    mid = (mid + Math.imul(ah5, bl3)) | 0;\n    hi = (hi + Math.imul(ah5, bh3)) | 0;\n    lo = (lo + Math.imul(al4, bl4)) | 0;\n    mid = (mid + Math.imul(al4, bh4)) | 0;\n    mid = (mid + Math.imul(ah4, bl4)) | 0;\n    hi = (hi + Math.imul(ah4, bh4)) | 0;\n    lo = (lo + Math.imul(al3, bl5)) | 0;\n    mid = (mid + Math.imul(al3, bh5)) | 0;\n    mid = (mid + Math.imul(ah3, bl5)) | 0;\n    hi = (hi + Math.imul(ah3, bh5)) | 0;\n    lo = (lo + Math.imul(al2, bl6)) | 0;\n    mid = (mid + Math.imul(al2, bh6)) | 0;\n    mid = (mid + Math.imul(ah2, bl6)) | 0;\n    hi = (hi + Math.imul(ah2, bh6)) | 0;\n    lo = (lo + Math.imul(al1, bl7)) | 0;\n    mid = (mid + Math.imul(al1, bh7)) | 0;\n    mid = (mid + Math.imul(ah1, bl7)) | 0;\n    hi = (hi + Math.imul(ah1, bh7)) | 0;\n    lo = (lo + Math.imul(al0, bl8)) | 0;\n    mid = (mid + Math.imul(al0, bh8)) | 0;\n    mid = (mid + Math.imul(ah0, bl8)) | 0;\n    hi = (hi + Math.imul(ah0, bh8)) | 0;\n    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;\n    w8 &= 0x3ffffff;\n    /* k = 9 */\n    lo = Math.imul(al9, bl0);\n    mid = Math.imul(al9, bh0);\n    mid = (mid + Math.imul(ah9, bl0)) | 0;\n    hi = Math.imul(ah9, bh0);\n    lo = (lo + Math.imul(al8, bl1)) | 0;\n    mid = (mid + Math.imul(al8, bh1)) | 0;\n    mid = (mid + Math.imul(ah8, bl1)) | 0;\n    hi = (hi + Math.imul(ah8, bh1)) | 0;\n    lo = (lo + Math.imul(al7, bl2)) | 0;\n    mid = (mid + Math.imul(al7, bh2)) | 0;\n    mid = (mid + Math.imul(ah7, bl2)) | 0;\n    hi = (hi + Math.imul(ah7, bh2)) | 0;\n    lo = (lo + Math.imul(al6, bl3)) | 0;\n    mid = (mid + Math.imul(al6, bh3)) | 0;\n    mid = (mid + Math.imul(ah6, bl3)) | 0;\n    hi = (hi + Math.imul(ah6, bh3)) | 0;\n    lo = (lo + Math.imul(al5, bl4)) | 0;\n    mid = (mid + Math.imul(al5, bh4)) | 0;\n    mid = (mid + Math.imul(ah5, bl4)) | 0;\n    hi = (hi + Math.imul(ah5, bh4)) | 0;\n    lo = (lo + Math.imul(al4, bl5)) | 0;\n    mid = (mid + Math.imul(al4, bh5)) | 0;\n    mid = (mid + Math.imul(ah4, bl5)) | 0;\n    hi = (hi + Math.imul(ah4, bh5)) | 0;\n    lo = (lo + Math.imul(al3, bl6)) | 0;\n    mid = (mid + Math.imul(al3, bh6)) | 0;\n    mid = (mid + Math.imul(ah3, bl6)) | 0;\n    hi = (hi + Math.imul(ah3, bh6)) | 0;\n    lo = (lo + Math.imul(al2, bl7)) | 0;\n    mid = (mid + Math.imul(al2, bh7)) | 0;\n    mid = (mid + Math.imul(ah2, bl7)) | 0;\n    hi = (hi + Math.imul(ah2, bh7)) | 0;\n    lo = (lo + Math.imul(al1, bl8)) | 0;\n    mid = (mid + Math.imul(al1, bh8)) | 0;\n    mid = (mid + Math.imul(ah1, bl8)) | 0;\n    hi = (hi + Math.imul(ah1, bh8)) | 0;\n    lo = (lo + Math.imul(al0, bl9)) | 0;\n    mid = (mid + Math.imul(al0, bh9)) | 0;\n    mid = (mid + Math.imul(ah0, bl9)) | 0;\n    hi = (hi + Math.imul(ah0, bh9)) | 0;\n    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;\n    w9 &= 0x3ffffff;\n    /* k = 10 */\n    lo = Math.imul(al9, bl1);\n    mid = Math.imul(al9, bh1);\n    mid = (mid + Math.imul(ah9, bl1)) | 0;\n    hi = Math.imul(ah9, bh1);\n    lo = (lo + Math.imul(al8, bl2)) | 0;\n    mid = (mid + Math.imul(al8, bh2)) | 0;\n    mid = (mid + Math.imul(ah8, bl2)) | 0;\n    hi = (hi + Math.imul(ah8, bh2)) | 0;\n    lo = (lo + Math.imul(al7, bl3)) | 0;\n    mid = (mid + Math.imul(al7, bh3)) | 0;\n    mid = (mid + Math.imul(ah7, bl3)) | 0;\n    hi = (hi + Math.imul(ah7, bh3)) | 0;\n    lo = (lo + Math.imul(al6, bl4)) | 0;\n    mid = (mid + Math.imul(al6, bh4)) | 0;\n    mid = (mid + Math.imul(ah6, bl4)) | 0;\n    hi = (hi + Math.imul(ah6, bh4)) | 0;\n    lo = (lo + Math.imul(al5, bl5)) | 0;\n    mid = (mid + Math.imul(al5, bh5)) | 0;\n    mid = (mid + Math.imul(ah5, bl5)) | 0;\n    hi = (hi + Math.imul(ah5, bh5)) | 0;\n    lo = (lo + Math.imul(al4, bl6)) | 0;\n    mid = (mid + Math.imul(al4, bh6)) | 0;\n    mid = (mid + Math.imul(ah4, bl6)) | 0;\n    hi = (hi + Math.imul(ah4, bh6)) | 0;\n    lo = (lo + Math.imul(al3, bl7)) | 0;\n    mid = (mid + Math.imul(al3, bh7)) | 0;\n    mid = (mid + Math.imul(ah3, bl7)) | 0;\n    hi = (hi + Math.imul(ah3, bh7)) | 0;\n    lo = (lo + Math.imul(al2, bl8)) | 0;\n    mid = (mid + Math.imul(al2, bh8)) | 0;\n    mid = (mid + Math.imul(ah2, bl8)) | 0;\n    hi = (hi + Math.imul(ah2, bh8)) | 0;\n    lo = (lo + Math.imul(al1, bl9)) | 0;\n    mid = (mid + Math.imul(al1, bh9)) | 0;\n    mid = (mid + Math.imul(ah1, bl9)) | 0;\n    hi = (hi + Math.imul(ah1, bh9)) | 0;\n    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;\n    w10 &= 0x3ffffff;\n    /* k = 11 */\n    lo = Math.imul(al9, bl2);\n    mid = Math.imul(al9, bh2);\n    mid = (mid + Math.imul(ah9, bl2)) | 0;\n    hi = Math.imul(ah9, bh2);\n    lo = (lo + Math.imul(al8, bl3)) | 0;\n    mid = (mid + Math.imul(al8, bh3)) | 0;\n    mid = (mid + Math.imul(ah8, bl3)) | 0;\n    hi = (hi + Math.imul(ah8, bh3)) | 0;\n    lo = (lo + Math.imul(al7, bl4)) | 0;\n    mid = (mid + Math.imul(al7, bh4)) | 0;\n    mid = (mid + Math.imul(ah7, bl4)) | 0;\n    hi = (hi + Math.imul(ah7, bh4)) | 0;\n    lo = (lo + Math.imul(al6, bl5)) | 0;\n    mid = (mid + Math.imul(al6, bh5)) | 0;\n    mid = (mid + Math.imul(ah6, bl5)) | 0;\n    hi = (hi + Math.imul(ah6, bh5)) | 0;\n    lo = (lo + Math.imul(al5, bl6)) | 0;\n    mid = (mid + Math.imul(al5, bh6)) | 0;\n    mid = (mid + Math.imul(ah5, bl6)) | 0;\n    hi = (hi + Math.imul(ah5, bh6)) | 0;\n    lo = (lo + Math.imul(al4, bl7)) | 0;\n    mid = (mid + Math.imul(al4, bh7)) | 0;\n    mid = (mid + Math.imul(ah4, bl7)) | 0;\n    hi = (hi + Math.imul(ah4, bh7)) | 0;\n    lo = (lo + Math.imul(al3, bl8)) | 0;\n    mid = (mid + Math.imul(al3, bh8)) | 0;\n    mid = (mid + Math.imul(ah3, bl8)) | 0;\n    hi = (hi + Math.imul(ah3, bh8)) | 0;\n    lo = (lo + Math.imul(al2, bl9)) | 0;\n    mid = (mid + Math.imul(al2, bh9)) | 0;\n    mid = (mid + Math.imul(ah2, bl9)) | 0;\n    hi = (hi + Math.imul(ah2, bh9)) | 0;\n    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;\n    w11 &= 0x3ffffff;\n    /* k = 12 */\n    lo = Math.imul(al9, bl3);\n    mid = Math.imul(al9, bh3);\n    mid = (mid + Math.imul(ah9, bl3)) | 0;\n    hi = Math.imul(ah9, bh3);\n    lo = (lo + Math.imul(al8, bl4)) | 0;\n    mid = (mid + Math.imul(al8, bh4)) | 0;\n    mid = (mid + Math.imul(ah8, bl4)) | 0;\n    hi = (hi + Math.imul(ah8, bh4)) | 0;\n    lo = (lo + Math.imul(al7, bl5)) | 0;\n    mid = (mid + Math.imul(al7, bh5)) | 0;\n    mid = (mid + Math.imul(ah7, bl5)) | 0;\n    hi = (hi + Math.imul(ah7, bh5)) | 0;\n    lo = (lo + Math.imul(al6, bl6)) | 0;\n    mid = (mid + Math.imul(al6, bh6)) | 0;\n    mid = (mid + Math.imul(ah6, bl6)) | 0;\n    hi = (hi + Math.imul(ah6, bh6)) | 0;\n    lo = (lo + Math.imul(al5, bl7)) | 0;\n    mid = (mid + Math.imul(al5, bh7)) | 0;\n    mid = (mid + Math.imul(ah5, bl7)) | 0;\n    hi = (hi + Math.imul(ah5, bh7)) | 0;\n    lo = (lo + Math.imul(al4, bl8)) | 0;\n    mid = (mid + Math.imul(al4, bh8)) | 0;\n    mid = (mid + Math.imul(ah4, bl8)) | 0;\n    hi = (hi + Math.imul(ah4, bh8)) | 0;\n    lo = (lo + Math.imul(al3, bl9)) | 0;\n    mid = (mid + Math.imul(al3, bh9)) | 0;\n    mid = (mid + Math.imul(ah3, bl9)) | 0;\n    hi = (hi + Math.imul(ah3, bh9)) | 0;\n    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;\n    w12 &= 0x3ffffff;\n    /* k = 13 */\n    lo = Math.imul(al9, bl4);\n    mid = Math.imul(al9, bh4);\n    mid = (mid + Math.imul(ah9, bl4)) | 0;\n    hi = Math.imul(ah9, bh4);\n    lo = (lo + Math.imul(al8, bl5)) | 0;\n    mid = (mid + Math.imul(al8, bh5)) | 0;\n    mid = (mid + Math.imul(ah8, bl5)) | 0;\n    hi = (hi + Math.imul(ah8, bh5)) | 0;\n    lo = (lo + Math.imul(al7, bl6)) | 0;\n    mid = (mid + Math.imul(al7, bh6)) | 0;\n    mid = (mid + Math.imul(ah7, bl6)) | 0;\n    hi = (hi + Math.imul(ah7, bh6)) | 0;\n    lo = (lo + Math.imul(al6, bl7)) | 0;\n    mid = (mid + Math.imul(al6, bh7)) | 0;\n    mid = (mid + Math.imul(ah6, bl7)) | 0;\n    hi = (hi + Math.imul(ah6, bh7)) | 0;\n    lo = (lo + Math.imul(al5, bl8)) | 0;\n    mid = (mid + Math.imul(al5, bh8)) | 0;\n    mid = (mid + Math.imul(ah5, bl8)) | 0;\n    hi = (hi + Math.imul(ah5, bh8)) | 0;\n    lo = (lo + Math.imul(al4, bl9)) | 0;\n    mid = (mid + Math.imul(al4, bh9)) | 0;\n    mid = (mid + Math.imul(ah4, bl9)) | 0;\n    hi = (hi + Math.imul(ah4, bh9)) | 0;\n    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;\n    w13 &= 0x3ffffff;\n    /* k = 14 */\n    lo = Math.imul(al9, bl5);\n    mid = Math.imul(al9, bh5);\n    mid = (mid + Math.imul(ah9, bl5)) | 0;\n    hi = Math.imul(ah9, bh5);\n    lo = (lo + Math.imul(al8, bl6)) | 0;\n    mid = (mid + Math.imul(al8, bh6)) | 0;\n    mid = (mid + Math.imul(ah8, bl6)) | 0;\n    hi = (hi + Math.imul(ah8, bh6)) | 0;\n    lo = (lo + Math.imul(al7, bl7)) | 0;\n    mid = (mid + Math.imul(al7, bh7)) | 0;\n    mid = (mid + Math.imul(ah7, bl7)) | 0;\n    hi = (hi + Math.imul(ah7, bh7)) | 0;\n    lo = (lo + Math.imul(al6, bl8)) | 0;\n    mid = (mid + Math.imul(al6, bh8)) | 0;\n    mid = (mid + Math.imul(ah6, bl8)) | 0;\n    hi = (hi + Math.imul(ah6, bh8)) | 0;\n    lo = (lo + Math.imul(al5, bl9)) | 0;\n    mid = (mid + Math.imul(al5, bh9)) | 0;\n    mid = (mid + Math.imul(ah5, bl9)) | 0;\n    hi = (hi + Math.imul(ah5, bh9)) | 0;\n    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;\n    w14 &= 0x3ffffff;\n    /* k = 15 */\n    lo = Math.imul(al9, bl6);\n    mid = Math.imul(al9, bh6);\n    mid = (mid + Math.imul(ah9, bl6)) | 0;\n    hi = Math.imul(ah9, bh6);\n    lo = (lo + Math.imul(al8, bl7)) | 0;\n    mid = (mid + Math.imul(al8, bh7)) | 0;\n    mid = (mid + Math.imul(ah8, bl7)) | 0;\n    hi = (hi + Math.imul(ah8, bh7)) | 0;\n    lo = (lo + Math.imul(al7, bl8)) | 0;\n    mid = (mid + Math.imul(al7, bh8)) | 0;\n    mid = (mid + Math.imul(ah7, bl8)) | 0;\n    hi = (hi + Math.imul(ah7, bh8)) | 0;\n    lo = (lo + Math.imul(al6, bl9)) | 0;\n    mid = (mid + Math.imul(al6, bh9)) | 0;\n    mid = (mid + Math.imul(ah6, bl9)) | 0;\n    hi = (hi + Math.imul(ah6, bh9)) | 0;\n    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;\n    w15 &= 0x3ffffff;\n    /* k = 16 */\n    lo = Math.imul(al9, bl7);\n    mid = Math.imul(al9, bh7);\n    mid = (mid + Math.imul(ah9, bl7)) | 0;\n    hi = Math.imul(ah9, bh7);\n    lo = (lo + Math.imul(al8, bl8)) | 0;\n    mid = (mid + Math.imul(al8, bh8)) | 0;\n    mid = (mid + Math.imul(ah8, bl8)) | 0;\n    hi = (hi + Math.imul(ah8, bh8)) | 0;\n    lo = (lo + Math.imul(al7, bl9)) | 0;\n    mid = (mid + Math.imul(al7, bh9)) | 0;\n    mid = (mid + Math.imul(ah7, bl9)) | 0;\n    hi = (hi + Math.imul(ah7, bh9)) | 0;\n    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;\n    w16 &= 0x3ffffff;\n    /* k = 17 */\n    lo = Math.imul(al9, bl8);\n    mid = Math.imul(al9, bh8);\n    mid = (mid + Math.imul(ah9, bl8)) | 0;\n    hi = Math.imul(ah9, bh8);\n    lo = (lo + Math.imul(al8, bl9)) | 0;\n    mid = (mid + Math.imul(al8, bh9)) | 0;\n    mid = (mid + Math.imul(ah8, bl9)) | 0;\n    hi = (hi + Math.imul(ah8, bh9)) | 0;\n    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;\n    w17 &= 0x3ffffff;\n    /* k = 18 */\n    lo = Math.imul(al9, bl9);\n    mid = Math.imul(al9, bh9);\n    mid = (mid + Math.imul(ah9, bl9)) | 0;\n    hi = Math.imul(ah9, bh9);\n    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;\n    w18 &= 0x3ffffff;\n    o[0] = w0;\n    o[1] = w1;\n    o[2] = w2;\n    o[3] = w3;\n    o[4] = w4;\n    o[5] = w5;\n    o[6] = w6;\n    o[7] = w7;\n    o[8] = w8;\n    o[9] = w9;\n    o[10] = w10;\n    o[11] = w11;\n    o[12] = w12;\n    o[13] = w13;\n    o[14] = w14;\n    o[15] = w15;\n    o[16] = w16;\n    o[17] = w17;\n    o[18] = w18;\n    if (c !== 0) {\n      o[19] = c;\n      out.length++;\n    }\n    return out;\n  };\n\n  // Polyfill comb\n  if (!Math.imul) {\n    comb10MulTo = smallMulTo;\n  }\n\n  function bigMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    out.length = self.length + num.length;\n\n    var carry = 0;\n    var hncarry = 0;\n    for (var k = 0; k < out.length - 1; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = hncarry;\n      hncarry = 0;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = k - j;\n        var a = self.words[i] | 0;\n        var b = num.words[j] | 0;\n        var r = a * b;\n\n        var lo = r & 0x3ffffff;\n        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;\n        lo = (lo + rword) | 0;\n        rword = lo & 0x3ffffff;\n        ncarry = (ncarry + (lo >>> 26)) | 0;\n\n        hncarry += ncarry >>> 26;\n        ncarry &= 0x3ffffff;\n      }\n      out.words[k] = rword;\n      carry = ncarry;\n      ncarry = hncarry;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry;\n    } else {\n      out.length--;\n    }\n\n    return out.strip();\n  }\n\n  function jumboMulTo (self, num, out) {\n    var fftm = new FFTM();\n    return fftm.mulp(self, num, out);\n  }\n\n  BN.prototype.mulTo = function mulTo (num, out) {\n    var res;\n    var len = this.length + num.length;\n    if (this.length === 10 && num.length === 10) {\n      res = comb10MulTo(this, num, out);\n    } else if (len < 63) {\n      res = smallMulTo(this, num, out);\n    } else if (len < 1024) {\n      res = bigMulTo(this, num, out);\n    } else {\n      res = jumboMulTo(this, num, out);\n    }\n\n    return res;\n  };\n\n  // Cooley-Tukey algorithm for FFT\n  // slightly revisited to rely on looping instead of recursion\n\n  function FFTM (x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  FFTM.prototype.makeRBT = function makeRBT (N) {\n    var t = new Array(N);\n    var l = BN.prototype._countBits(N) - 1;\n    for (var i = 0; i < N; i++) {\n      t[i] = this.revBin(i, l, N);\n    }\n\n    return t;\n  };\n\n  // Returns binary-reversed representation of `x`\n  FFTM.prototype.revBin = function revBin (x, l, N) {\n    if (x === 0 || x === N - 1) return x;\n\n    var rb = 0;\n    for (var i = 0; i < l; i++) {\n      rb |= (x & 1) << (l - i - 1);\n      x >>= 1;\n    }\n\n    return rb;\n  };\n\n  // Performs \"tweedling\" phase, therefore 'emulating'\n  // behaviour of the recursive algorithm\n  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {\n    for (var i = 0; i < N; i++) {\n      rtws[i] = rws[rbt[i]];\n      itws[i] = iws[rbt[i]];\n    }\n  };\n\n  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {\n    this.permute(rbt, rws, iws, rtws, itws, N);\n\n    for (var s = 1; s < N; s <<= 1) {\n      var l = s << 1;\n\n      var rtwdf = Math.cos(2 * Math.PI / l);\n      var itwdf = Math.sin(2 * Math.PI / l);\n\n      for (var p = 0; p < N; p += l) {\n        var rtwdf_ = rtwdf;\n        var itwdf_ = itwdf;\n\n        for (var j = 0; j < s; j++) {\n          var re = rtws[p + j];\n          var ie = itws[p + j];\n\n          var ro = rtws[p + j + s];\n          var io = itws[p + j + s];\n\n          var rx = rtwdf_ * ro - itwdf_ * io;\n\n          io = rtwdf_ * io + itwdf_ * ro;\n          ro = rx;\n\n          rtws[p + j] = re + ro;\n          itws[p + j] = ie + io;\n\n          rtws[p + j + s] = re - ro;\n          itws[p + j + s] = ie - io;\n\n          /* jshint maxdepth : false */\n          if (j !== l) {\n            rx = rtwdf * rtwdf_ - itwdf * itwdf_;\n\n            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;\n            rtwdf_ = rx;\n          }\n        }\n      }\n    }\n  };\n\n  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {\n    var N = Math.max(m, n) | 1;\n    var odd = N & 1;\n    var i = 0;\n    for (N = N / 2 | 0; N; N = N >>> 1) {\n      i++;\n    }\n\n    return 1 << i + 1 + odd;\n  };\n\n  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {\n    if (N <= 1) return;\n\n    for (var i = 0; i < N / 2; i++) {\n      var t = rws[i];\n\n      rws[i] = rws[N - i - 1];\n      rws[N - i - 1] = t;\n\n      t = iws[i];\n\n      iws[i] = -iws[N - i - 1];\n      iws[N - i - 1] = -t;\n    }\n  };\n\n  FFTM.prototype.normalize13b = function normalize13b (ws, N) {\n    var carry = 0;\n    for (var i = 0; i < N / 2; i++) {\n      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +\n        Math.round(ws[2 * i] / N) +\n        carry;\n\n      ws[i] = w & 0x3ffffff;\n\n      if (w < 0x4000000) {\n        carry = 0;\n      } else {\n        carry = w / 0x4000000 | 0;\n      }\n    }\n\n    return ws;\n  };\n\n  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {\n    var carry = 0;\n    for (var i = 0; i < len; i++) {\n      carry = carry + (ws[i] | 0);\n\n      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;\n      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;\n    }\n\n    // Pad with zeroes\n    for (i = 2 * len; i < N; ++i) {\n      rws[i] = 0;\n    }\n\n    assert(carry === 0);\n    assert((carry & ~0x1fff) === 0);\n  };\n\n  FFTM.prototype.stub = function stub (N) {\n    var ph = new Array(N);\n    for (var i = 0; i < N; i++) {\n      ph[i] = 0;\n    }\n\n    return ph;\n  };\n\n  FFTM.prototype.mulp = function mulp (x, y, out) {\n    var N = 2 * this.guessLen13b(x.length, y.length);\n\n    var rbt = this.makeRBT(N);\n\n    var _ = this.stub(N);\n\n    var rws = new Array(N);\n    var rwst = new Array(N);\n    var iwst = new Array(N);\n\n    var nrws = new Array(N);\n    var nrwst = new Array(N);\n    var niwst = new Array(N);\n\n    var rmws = out.words;\n    rmws.length = N;\n\n    this.convert13b(x.words, x.length, rws, N);\n    this.convert13b(y.words, y.length, nrws, N);\n\n    this.transform(rws, _, rwst, iwst, N, rbt);\n    this.transform(nrws, _, nrwst, niwst, N, rbt);\n\n    for (var i = 0; i < N; i++) {\n      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];\n      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];\n      rwst[i] = rx;\n    }\n\n    this.conjugate(rwst, iwst, N);\n    this.transform(rwst, iwst, rmws, _, N, rbt);\n    this.conjugate(rmws, _, N);\n    this.normalize13b(rmws, N);\n\n    out.negative = x.negative ^ y.negative;\n    out.length = x.length + y.length;\n    return out.strip();\n  };\n\n  // Multiply `this` by `num`\n  BN.prototype.mul = function mul (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return this.mulTo(num, out);\n  };\n\n  // Multiply employing FFT\n  BN.prototype.mulf = function mulf (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return jumboMulTo(this, num, out);\n  };\n\n  // In-place Multiplication\n  BN.prototype.imul = function imul (num) {\n    return this.clone().mulTo(num, this);\n  };\n\n  BN.prototype.imuln = function imuln (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n\n    // Carry\n    var carry = 0;\n    for (var i = 0; i < this.length; i++) {\n      var w = (this.words[i] | 0) * num;\n      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);\n      carry >>= 26;\n      carry += (w / 0x4000000) | 0;\n      // NOTE: lo is 27bit maximum\n      carry += lo >>> 26;\n      this.words[i] = lo & 0x3ffffff;\n    }\n\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n\n    return this;\n  };\n\n  BN.prototype.muln = function muln (num) {\n    return this.clone().imuln(num);\n  };\n\n  // `this` * `this`\n  BN.prototype.sqr = function sqr () {\n    return this.mul(this);\n  };\n\n  // `this` * `this` in-place\n  BN.prototype.isqr = function isqr () {\n    return this.imul(this.clone());\n  };\n\n  // Math.pow(`this`, `num`)\n  BN.prototype.pow = function pow (num) {\n    var w = toBitArray(num);\n    if (w.length === 0) return new BN(1);\n\n    // Skip leading zeroes\n    var res = this;\n    for (var i = 0; i < w.length; i++, res = res.sqr()) {\n      if (w[i] !== 0) break;\n    }\n\n    if (++i < w.length) {\n      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {\n        if (w[i] === 0) continue;\n\n        res = res.mul(q);\n      }\n    }\n\n    return res;\n  };\n\n  // Shift-left in-place\n  BN.prototype.iushln = function iushln (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);\n    var i;\n\n    if (r !== 0) {\n      var carry = 0;\n\n      for (i = 0; i < this.length; i++) {\n        var newCarry = this.words[i] & carryMask;\n        var c = ((this.words[i] | 0) - newCarry) << r;\n        this.words[i] = c | carry;\n        carry = newCarry >>> (26 - r);\n      }\n\n      if (carry) {\n        this.words[i] = carry;\n        this.length++;\n      }\n    }\n\n    if (s !== 0) {\n      for (i = this.length - 1; i >= 0; i--) {\n        this.words[i + s] = this.words[i];\n      }\n\n      for (i = 0; i < s; i++) {\n        this.words[i] = 0;\n      }\n\n      this.length += s;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ishln = function ishln (bits) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushln(bits);\n  };\n\n  // Shift-right in-place\n  // NOTE: `hint` is a lowest bit before trailing zeroes\n  // NOTE: if `extended` is present - it will be filled with destroyed bits\n  BN.prototype.iushrn = function iushrn (bits, hint, extended) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var h;\n    if (hint) {\n      h = (hint - (hint % 26)) / 26;\n    } else {\n      h = 0;\n    }\n\n    var r = bits % 26;\n    var s = Math.min((bits - r) / 26, this.length);\n    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n    var maskedWords = extended;\n\n    h -= s;\n    h = Math.max(0, h);\n\n    // Extended mode, copy masked part\n    if (maskedWords) {\n      for (var i = 0; i < s; i++) {\n        maskedWords.words[i] = this.words[i];\n      }\n      maskedWords.length = s;\n    }\n\n    if (s === 0) {\n      // No-op, we should not move anything at all\n    } else if (this.length > s) {\n      this.length -= s;\n      for (i = 0; i < this.length; i++) {\n        this.words[i] = this.words[i + s];\n      }\n    } else {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    var carry = 0;\n    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {\n      var word = this.words[i] | 0;\n      this.words[i] = (carry << (26 - r)) | (word >>> r);\n      carry = word & mask;\n    }\n\n    // Push carried bits as a mask\n    if (maskedWords && carry !== 0) {\n      maskedWords.words[maskedWords.length++] = carry;\n    }\n\n    if (this.length === 0) {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ishrn = function ishrn (bits, hint, extended) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushrn(bits, hint, extended);\n  };\n\n  // Shift-left\n  BN.prototype.shln = function shln (bits) {\n    return this.clone().ishln(bits);\n  };\n\n  BN.prototype.ushln = function ushln (bits) {\n    return this.clone().iushln(bits);\n  };\n\n  // Shift-right\n  BN.prototype.shrn = function shrn (bits) {\n    return this.clone().ishrn(bits);\n  };\n\n  BN.prototype.ushrn = function ushrn (bits) {\n    return this.clone().iushrn(bits);\n  };\n\n  // Test if n bit is set\n  BN.prototype.testn = function testn (bit) {\n    assert(typeof bit === 'number' && bit >= 0);\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) return false;\n\n    // Check bit and return\n    var w = this.words[s];\n\n    return !!(w & q);\n  };\n\n  // Return only lowers bits of number (in-place)\n  BN.prototype.imaskn = function imaskn (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n\n    assert(this.negative === 0, 'imaskn works only with positive numbers');\n\n    if (this.length <= s) {\n      return this;\n    }\n\n    if (r !== 0) {\n      s++;\n    }\n    this.length = Math.min(s, this.length);\n\n    if (r !== 0) {\n      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n      this.words[this.length - 1] &= mask;\n    }\n\n    return this.strip();\n  };\n\n  // Return only lowers bits of number\n  BN.prototype.maskn = function maskn (bits) {\n    return this.clone().imaskn(bits);\n  };\n\n  // Add plain number `num` to `this`\n  BN.prototype.iaddn = function iaddn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.isubn(-num);\n\n    // Possible sign change\n    if (this.negative !== 0) {\n      if (this.length === 1 && (this.words[0] | 0) < num) {\n        this.words[0] = num - (this.words[0] | 0);\n        this.negative = 0;\n        return this;\n      }\n\n      this.negative = 0;\n      this.isubn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    // Add without checks\n    return this._iaddn(num);\n  };\n\n  BN.prototype._iaddn = function _iaddn (num) {\n    this.words[0] += num;\n\n    // Carry\n    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {\n      this.words[i] -= 0x4000000;\n      if (i === this.length - 1) {\n        this.words[i + 1] = 1;\n      } else {\n        this.words[i + 1]++;\n      }\n    }\n    this.length = Math.max(this.length, i + 1);\n\n    return this;\n  };\n\n  // Subtract plain number `num` from `this`\n  BN.prototype.isubn = function isubn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.iaddn(-num);\n\n    if (this.negative !== 0) {\n      this.negative = 0;\n      this.iaddn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    this.words[0] -= num;\n\n    if (this.length === 1 && this.words[0] < 0) {\n      this.words[0] = -this.words[0];\n      this.negative = 1;\n    } else {\n      // Carry\n      for (var i = 0; i < this.length && this.words[i] < 0; i++) {\n        this.words[i] += 0x4000000;\n        this.words[i + 1] -= 1;\n      }\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.addn = function addn (num) {\n    return this.clone().iaddn(num);\n  };\n\n  BN.prototype.subn = function subn (num) {\n    return this.clone().isubn(num);\n  };\n\n  BN.prototype.iabs = function iabs () {\n    this.negative = 0;\n\n    return this;\n  };\n\n  BN.prototype.abs = function abs () {\n    return this.clone().iabs();\n  };\n\n  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {\n    var len = num.length + shift;\n    var i;\n\n    this._expand(len);\n\n    var w;\n    var carry = 0;\n    for (i = 0; i < num.length; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      var right = (num.words[i] | 0) * mul;\n      w -= right & 0x3ffffff;\n      carry = (w >> 26) - ((right / 0x4000000) | 0);\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n    for (; i < this.length - shift; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      carry = w >> 26;\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n\n    if (carry === 0) return this.strip();\n\n    // Subtraction overflow\n    assert(carry === -1);\n    carry = 0;\n    for (i = 0; i < this.length; i++) {\n      w = -(this.words[i] | 0) + carry;\n      carry = w >> 26;\n      this.words[i] = w & 0x3ffffff;\n    }\n    this.negative = 1;\n\n    return this.strip();\n  };\n\n  BN.prototype._wordDiv = function _wordDiv (num, mode) {\n    var shift = this.length - num.length;\n\n    var a = this.clone();\n    var b = num;\n\n    // Normalize\n    var bhi = b.words[b.length - 1] | 0;\n    var bhiBits = this._countBits(bhi);\n    shift = 26 - bhiBits;\n    if (shift !== 0) {\n      b = b.ushln(shift);\n      a.iushln(shift);\n      bhi = b.words[b.length - 1] | 0;\n    }\n\n    // Initialize quotient\n    var m = a.length - b.length;\n    var q;\n\n    if (mode !== 'mod') {\n      q = new BN(null);\n      q.length = m + 1;\n      q.words = new Array(q.length);\n      for (var i = 0; i < q.length; i++) {\n        q.words[i] = 0;\n      }\n    }\n\n    var diff = a.clone()._ishlnsubmul(b, 1, m);\n    if (diff.negative === 0) {\n      a = diff;\n      if (q) {\n        q.words[m] = 1;\n      }\n    }\n\n    for (var j = m - 1; j >= 0; j--) {\n      var qj = (a.words[b.length + j] | 0) * 0x4000000 +\n        (a.words[b.length + j - 1] | 0);\n\n      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max\n      // (0x7ffffff)\n      qj = Math.min((qj / bhi) | 0, 0x3ffffff);\n\n      a._ishlnsubmul(b, qj, j);\n      while (a.negative !== 0) {\n        qj--;\n        a.negative = 0;\n        a._ishlnsubmul(b, 1, j);\n        if (!a.isZero()) {\n          a.negative ^= 1;\n        }\n      }\n      if (q) {\n        q.words[j] = qj;\n      }\n    }\n    if (q) {\n      q.strip();\n    }\n    a.strip();\n\n    // Denormalize\n    if (mode !== 'div' && shift !== 0) {\n      a.iushrn(shift);\n    }\n\n    return {\n      div: q || null,\n      mod: a\n    };\n  };\n\n  // NOTE: 1) `mode` can be set to `mod` to request mod only,\n  //       to `div` to request div only, or be absent to\n  //       request both div & mod\n  //       2) `positive` is true if unsigned mod is requested\n  BN.prototype.divmod = function divmod (num, mode, positive) {\n    assert(!num.isZero());\n\n    if (this.isZero()) {\n      return {\n        div: new BN(0),\n        mod: new BN(0)\n      };\n    }\n\n    var div, mod, res;\n    if (this.negative !== 0 && num.negative === 0) {\n      res = this.neg().divmod(num, mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.iadd(num);\n        }\n      }\n\n      return {\n        div: div,\n        mod: mod\n      };\n    }\n\n    if (this.negative === 0 && num.negative !== 0) {\n      res = this.divmod(num.neg(), mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      return {\n        div: div,\n        mod: res.mod\n      };\n    }\n\n    if ((this.negative & num.negative) !== 0) {\n      res = this.neg().divmod(num.neg(), mode);\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.isub(num);\n        }\n      }\n\n      return {\n        div: res.div,\n        mod: mod\n      };\n    }\n\n    // Both numbers are positive at this point\n\n    // Strip both numbers to approximate shift value\n    if (num.length > this.length || this.cmp(num) < 0) {\n      return {\n        div: new BN(0),\n        mod: this\n      };\n    }\n\n    // Very short reduction\n    if (num.length === 1) {\n      if (mode === 'div') {\n        return {\n          div: this.divn(num.words[0]),\n          mod: null\n        };\n      }\n\n      if (mode === 'mod') {\n        return {\n          div: null,\n          mod: new BN(this.modn(num.words[0]))\n        };\n      }\n\n      return {\n        div: this.divn(num.words[0]),\n        mod: new BN(this.modn(num.words[0]))\n      };\n    }\n\n    return this._wordDiv(num, mode);\n  };\n\n  // Find `this` / `num`\n  BN.prototype.div = function div (num) {\n    return this.divmod(num, 'div', false).div;\n  };\n\n  // Find `this` % `num`\n  BN.prototype.mod = function mod (num) {\n    return this.divmod(num, 'mod', false).mod;\n  };\n\n  BN.prototype.umod = function umod (num) {\n    return this.divmod(num, 'mod', true).mod;\n  };\n\n  // Find Round(`this` / `num`)\n  BN.prototype.divRound = function divRound (num) {\n    var dm = this.divmod(num);\n\n    // Fast case - exact division\n    if (dm.mod.isZero()) return dm.div;\n\n    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;\n\n    var half = num.ushrn(1);\n    var r2 = num.andln(1);\n    var cmp = mod.cmp(half);\n\n    // Round down\n    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;\n\n    // Round up\n    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);\n  };\n\n  BN.prototype.modn = function modn (num) {\n    assert(num <= 0x3ffffff);\n    var p = (1 << 26) % num;\n\n    var acc = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      acc = (p * acc + (this.words[i] | 0)) % num;\n    }\n\n    return acc;\n  };\n\n  // In-place division by number\n  BN.prototype.idivn = function idivn (num) {\n    assert(num <= 0x3ffffff);\n\n    var carry = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var w = (this.words[i] | 0) + carry * 0x4000000;\n      this.words[i] = (w / num) | 0;\n      carry = w % num;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.divn = function divn (num) {\n    return this.clone().idivn(num);\n  };\n\n  BN.prototype.egcd = function egcd (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var x = this;\n    var y = p.clone();\n\n    if (x.negative !== 0) {\n      x = x.umod(p);\n    } else {\n      x = x.clone();\n    }\n\n    // A * x + B * y = x\n    var A = new BN(1);\n    var B = new BN(0);\n\n    // C * x + D * y = y\n    var C = new BN(0);\n    var D = new BN(1);\n\n    var g = 0;\n\n    while (x.isEven() && y.isEven()) {\n      x.iushrn(1);\n      y.iushrn(1);\n      ++g;\n    }\n\n    var yp = y.clone();\n    var xp = x.clone();\n\n    while (!x.isZero()) {\n      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        x.iushrn(i);\n        while (i-- > 0) {\n          if (A.isOdd() || B.isOdd()) {\n            A.iadd(yp);\n            B.isub(xp);\n          }\n\n          A.iushrn(1);\n          B.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        y.iushrn(j);\n        while (j-- > 0) {\n          if (C.isOdd() || D.isOdd()) {\n            C.iadd(yp);\n            D.isub(xp);\n          }\n\n          C.iushrn(1);\n          D.iushrn(1);\n        }\n      }\n\n      if (x.cmp(y) >= 0) {\n        x.isub(y);\n        A.isub(C);\n        B.isub(D);\n      } else {\n        y.isub(x);\n        C.isub(A);\n        D.isub(B);\n      }\n    }\n\n    return {\n      a: C,\n      b: D,\n      gcd: y.iushln(g)\n    };\n  };\n\n  // This is reduced incarnation of the binary EEA\n  // above, designated to invert members of the\n  // _prime_ fields F(p) at a maximal speed\n  BN.prototype._invmp = function _invmp (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var a = this;\n    var b = p.clone();\n\n    if (a.negative !== 0) {\n      a = a.umod(p);\n    } else {\n      a = a.clone();\n    }\n\n    var x1 = new BN(1);\n    var x2 = new BN(0);\n\n    var delta = b.clone();\n\n    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {\n      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        a.iushrn(i);\n        while (i-- > 0) {\n          if (x1.isOdd()) {\n            x1.iadd(delta);\n          }\n\n          x1.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        b.iushrn(j);\n        while (j-- > 0) {\n          if (x2.isOdd()) {\n            x2.iadd(delta);\n          }\n\n          x2.iushrn(1);\n        }\n      }\n\n      if (a.cmp(b) >= 0) {\n        a.isub(b);\n        x1.isub(x2);\n      } else {\n        b.isub(a);\n        x2.isub(x1);\n      }\n    }\n\n    var res;\n    if (a.cmpn(1) === 0) {\n      res = x1;\n    } else {\n      res = x2;\n    }\n\n    if (res.cmpn(0) < 0) {\n      res.iadd(p);\n    }\n\n    return res;\n  };\n\n  BN.prototype.gcd = function gcd (num) {\n    if (this.isZero()) return num.abs();\n    if (num.isZero()) return this.abs();\n\n    var a = this.clone();\n    var b = num.clone();\n    a.negative = 0;\n    b.negative = 0;\n\n    // Remove common factor of two\n    for (var shift = 0; a.isEven() && b.isEven(); shift++) {\n      a.iushrn(1);\n      b.iushrn(1);\n    }\n\n    do {\n      while (a.isEven()) {\n        a.iushrn(1);\n      }\n      while (b.isEven()) {\n        b.iushrn(1);\n      }\n\n      var r = a.cmp(b);\n      if (r < 0) {\n        // Swap `a` and `b` to make `a` always bigger than `b`\n        var t = a;\n        a = b;\n        b = t;\n      } else if (r === 0 || b.cmpn(1) === 0) {\n        break;\n      }\n\n      a.isub(b);\n    } while (true);\n\n    return b.iushln(shift);\n  };\n\n  // Invert number in the field F(num)\n  BN.prototype.invm = function invm (num) {\n    return this.egcd(num).a.umod(num);\n  };\n\n  BN.prototype.isEven = function isEven () {\n    return (this.words[0] & 1) === 0;\n  };\n\n  BN.prototype.isOdd = function isOdd () {\n    return (this.words[0] & 1) === 1;\n  };\n\n  // And first word and num\n  BN.prototype.andln = function andln (num) {\n    return this.words[0] & num;\n  };\n\n  // Increment at the bit position in-line\n  BN.prototype.bincn = function bincn (bit) {\n    assert(typeof bit === 'number');\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) {\n      this._expand(s + 1);\n      this.words[s] |= q;\n      return this;\n    }\n\n    // Add bit and propagate, if needed\n    var carry = q;\n    for (var i = s; carry !== 0 && i < this.length; i++) {\n      var w = this.words[i] | 0;\n      w += carry;\n      carry = w >>> 26;\n      w &= 0x3ffffff;\n      this.words[i] = w;\n    }\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n    return this;\n  };\n\n  BN.prototype.isZero = function isZero () {\n    return this.length === 1 && this.words[0] === 0;\n  };\n\n  BN.prototype.cmpn = function cmpn (num) {\n    var negative = num < 0;\n\n    if (this.negative !== 0 && !negative) return -1;\n    if (this.negative === 0 && negative) return 1;\n\n    this.strip();\n\n    var res;\n    if (this.length > 1) {\n      res = 1;\n    } else {\n      if (negative) {\n        num = -num;\n      }\n\n      assert(num <= 0x3ffffff, 'Number is too big');\n\n      var w = this.words[0] | 0;\n      res = w === num ? 0 : w < num ? -1 : 1;\n    }\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Compare two numbers and return:\n  // 1 - if `this` > `num`\n  // 0 - if `this` == `num`\n  // -1 - if `this` < `num`\n  BN.prototype.cmp = function cmp (num) {\n    if (this.negative !== 0 && num.negative === 0) return -1;\n    if (this.negative === 0 && num.negative !== 0) return 1;\n\n    var res = this.ucmp(num);\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Unsigned comparison\n  BN.prototype.ucmp = function ucmp (num) {\n    // At this point both numbers have the same sign\n    if (this.length > num.length) return 1;\n    if (this.length < num.length) return -1;\n\n    var res = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var a = this.words[i] | 0;\n      var b = num.words[i] | 0;\n\n      if (a === b) continue;\n      if (a < b) {\n        res = -1;\n      } else if (a > b) {\n        res = 1;\n      }\n      break;\n    }\n    return res;\n  };\n\n  BN.prototype.gtn = function gtn (num) {\n    return this.cmpn(num) === 1;\n  };\n\n  BN.prototype.gt = function gt (num) {\n    return this.cmp(num) === 1;\n  };\n\n  BN.prototype.gten = function gten (num) {\n    return this.cmpn(num) >= 0;\n  };\n\n  BN.prototype.gte = function gte (num) {\n    return this.cmp(num) >= 0;\n  };\n\n  BN.prototype.ltn = function ltn (num) {\n    return this.cmpn(num) === -1;\n  };\n\n  BN.prototype.lt = function lt (num) {\n    return this.cmp(num) === -1;\n  };\n\n  BN.prototype.lten = function lten (num) {\n    return this.cmpn(num) <= 0;\n  };\n\n  BN.prototype.lte = function lte (num) {\n    return this.cmp(num) <= 0;\n  };\n\n  BN.prototype.eqn = function eqn (num) {\n    return this.cmpn(num) === 0;\n  };\n\n  BN.prototype.eq = function eq (num) {\n    return this.cmp(num) === 0;\n  };\n\n  //\n  // A reduce context, could be using montgomery or something better, depending\n  // on the `m` itself.\n  //\n  BN.red = function red (num) {\n    return new Red(num);\n  };\n\n  BN.prototype.toRed = function toRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    assert(this.negative === 0, 'red works only with positives');\n    return ctx.convertTo(this)._forceRed(ctx);\n  };\n\n  BN.prototype.fromRed = function fromRed () {\n    assert(this.red, 'fromRed works only with numbers in reduction context');\n    return this.red.convertFrom(this);\n  };\n\n  BN.prototype._forceRed = function _forceRed (ctx) {\n    this.red = ctx;\n    return this;\n  };\n\n  BN.prototype.forceRed = function forceRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    return this._forceRed(ctx);\n  };\n\n  BN.prototype.redAdd = function redAdd (num) {\n    assert(this.red, 'redAdd works only with red numbers');\n    return this.red.add(this, num);\n  };\n\n  BN.prototype.redIAdd = function redIAdd (num) {\n    assert(this.red, 'redIAdd works only with red numbers');\n    return this.red.iadd(this, num);\n  };\n\n  BN.prototype.redSub = function redSub (num) {\n    assert(this.red, 'redSub works only with red numbers');\n    return this.red.sub(this, num);\n  };\n\n  BN.prototype.redISub = function redISub (num) {\n    assert(this.red, 'redISub works only with red numbers');\n    return this.red.isub(this, num);\n  };\n\n  BN.prototype.redShl = function redShl (num) {\n    assert(this.red, 'redShl works only with red numbers');\n    return this.red.shl(this, num);\n  };\n\n  BN.prototype.redMul = function redMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.mul(this, num);\n  };\n\n  BN.prototype.redIMul = function redIMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.imul(this, num);\n  };\n\n  BN.prototype.redSqr = function redSqr () {\n    assert(this.red, 'redSqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqr(this);\n  };\n\n  BN.prototype.redISqr = function redISqr () {\n    assert(this.red, 'redISqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.isqr(this);\n  };\n\n  // Square root over p\n  BN.prototype.redSqrt = function redSqrt () {\n    assert(this.red, 'redSqrt works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqrt(this);\n  };\n\n  BN.prototype.redInvm = function redInvm () {\n    assert(this.red, 'redInvm works only with red numbers');\n    this.red._verify1(this);\n    return this.red.invm(this);\n  };\n\n  // Return negative clone of `this` % `red modulo`\n  BN.prototype.redNeg = function redNeg () {\n    assert(this.red, 'redNeg works only with red numbers');\n    this.red._verify1(this);\n    return this.red.neg(this);\n  };\n\n  BN.prototype.redPow = function redPow (num) {\n    assert(this.red && !num.red, 'redPow(normalNum)');\n    this.red._verify1(this);\n    return this.red.pow(this, num);\n  };\n\n  // Prime numbers with efficient reduction\n  var primes = {\n    k256: null,\n    p224: null,\n    p192: null,\n    p25519: null\n  };\n\n  // Pseudo-Mersenne prime\n  function MPrime (name, p) {\n    // P = 2 ^ N - K\n    this.name = name;\n    this.p = new BN(p, 16);\n    this.n = this.p.bitLength();\n    this.k = new BN(1).iushln(this.n).isub(this.p);\n\n    this.tmp = this._tmp();\n  }\n\n  MPrime.prototype._tmp = function _tmp () {\n    var tmp = new BN(null);\n    tmp.words = new Array(Math.ceil(this.n / 13));\n    return tmp;\n  };\n\n  MPrime.prototype.ireduce = function ireduce (num) {\n    // Assumes that `num` is less than `P^2`\n    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)\n    var r = num;\n    var rlen;\n\n    do {\n      this.split(r, this.tmp);\n      r = this.imulK(r);\n      r = r.iadd(this.tmp);\n      rlen = r.bitLength();\n    } while (rlen > this.n);\n\n    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);\n    if (cmp === 0) {\n      r.words[0] = 0;\n      r.length = 1;\n    } else if (cmp > 0) {\n      r.isub(this.p);\n    } else {\n      if (r.strip !== undefined) {\n        // r is BN v4 instance\n        r.strip();\n      } else {\n        // r is BN v5 instance\n        r._strip();\n      }\n    }\n\n    return r;\n  };\n\n  MPrime.prototype.split = function split (input, out) {\n    input.iushrn(this.n, 0, out);\n  };\n\n  MPrime.prototype.imulK = function imulK (num) {\n    return num.imul(this.k);\n  };\n\n  function K256 () {\n    MPrime.call(\n      this,\n      'k256',\n      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');\n  }\n  inherits(K256, MPrime);\n\n  K256.prototype.split = function split (input, output) {\n    // 256 = 9 * 26 + 22\n    var mask = 0x3fffff;\n\n    var outLen = Math.min(input.length, 9);\n    for (var i = 0; i < outLen; i++) {\n      output.words[i] = input.words[i];\n    }\n    output.length = outLen;\n\n    if (input.length <= 9) {\n      input.words[0] = 0;\n      input.length = 1;\n      return;\n    }\n\n    // Shift by 9 limbs\n    var prev = input.words[9];\n    output.words[output.length++] = prev & mask;\n\n    for (i = 10; i < input.length; i++) {\n      var next = input.words[i] | 0;\n      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);\n      prev = next;\n    }\n    prev >>>= 22;\n    input.words[i - 10] = prev;\n    if (prev === 0 && input.length > 10) {\n      input.length -= 10;\n    } else {\n      input.length -= 9;\n    }\n  };\n\n  K256.prototype.imulK = function imulK (num) {\n    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]\n    num.words[num.length] = 0;\n    num.words[num.length + 1] = 0;\n    num.length += 2;\n\n    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390\n    var lo = 0;\n    for (var i = 0; i < num.length; i++) {\n      var w = num.words[i] | 0;\n      lo += w * 0x3d1;\n      num.words[i] = lo & 0x3ffffff;\n      lo = w * 0x40 + ((lo / 0x4000000) | 0);\n    }\n\n    // Fast length reduction\n    if (num.words[num.length - 1] === 0) {\n      num.length--;\n      if (num.words[num.length - 1] === 0) {\n        num.length--;\n      }\n    }\n    return num;\n  };\n\n  function P224 () {\n    MPrime.call(\n      this,\n      'p224',\n      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');\n  }\n  inherits(P224, MPrime);\n\n  function P192 () {\n    MPrime.call(\n      this,\n      'p192',\n      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');\n  }\n  inherits(P192, MPrime);\n\n  function P25519 () {\n    // 2 ^ 255 - 19\n    MPrime.call(\n      this,\n      '25519',\n      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');\n  }\n  inherits(P25519, MPrime);\n\n  P25519.prototype.imulK = function imulK (num) {\n    // K = 0x13\n    var carry = 0;\n    for (var i = 0; i < num.length; i++) {\n      var hi = (num.words[i] | 0) * 0x13 + carry;\n      var lo = hi & 0x3ffffff;\n      hi >>>= 26;\n\n      num.words[i] = lo;\n      carry = hi;\n    }\n    if (carry !== 0) {\n      num.words[num.length++] = carry;\n    }\n    return num;\n  };\n\n  // Exported mostly for testing purposes, use plain name instead\n  BN._prime = function prime (name) {\n    // Cached version of prime\n    if (primes[name]) return primes[name];\n\n    var prime;\n    if (name === 'k256') {\n      prime = new K256();\n    } else if (name === 'p224') {\n      prime = new P224();\n    } else if (name === 'p192') {\n      prime = new P192();\n    } else if (name === 'p25519') {\n      prime = new P25519();\n    } else {\n      throw new Error('Unknown prime ' + name);\n    }\n    primes[name] = prime;\n\n    return prime;\n  };\n\n  //\n  // Base reduction engine\n  //\n  function Red (m) {\n    if (typeof m === 'string') {\n      var prime = BN._prime(m);\n      this.m = prime.p;\n      this.prime = prime;\n    } else {\n      assert(m.gtn(1), 'modulus must be greater than 1');\n      this.m = m;\n      this.prime = null;\n    }\n  }\n\n  Red.prototype._verify1 = function _verify1 (a) {\n    assert(a.negative === 0, 'red works only with positives');\n    assert(a.red, 'red works only with red numbers');\n  };\n\n  Red.prototype._verify2 = function _verify2 (a, b) {\n    assert((a.negative | b.negative) === 0, 'red works only with positives');\n    assert(a.red && a.red === b.red,\n      'red works only with red numbers');\n  };\n\n  Red.prototype.imod = function imod (a) {\n    if (this.prime) return this.prime.ireduce(a)._forceRed(this);\n    return a.umod(this.m)._forceRed(this);\n  };\n\n  Red.prototype.neg = function neg (a) {\n    if (a.isZero()) {\n      return a.clone();\n    }\n\n    return this.m.sub(a)._forceRed(this);\n  };\n\n  Red.prototype.add = function add (a, b) {\n    this._verify2(a, b);\n\n    var res = a.add(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.iadd = function iadd (a, b) {\n    this._verify2(a, b);\n\n    var res = a.iadd(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.sub = function sub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.sub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.isub = function isub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.isub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.shl = function shl (a, num) {\n    this._verify1(a);\n    return this.imod(a.ushln(num));\n  };\n\n  Red.prototype.imul = function imul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.imul(b));\n  };\n\n  Red.prototype.mul = function mul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.mul(b));\n  };\n\n  Red.prototype.isqr = function isqr (a) {\n    return this.imul(a, a.clone());\n  };\n\n  Red.prototype.sqr = function sqr (a) {\n    return this.mul(a, a);\n  };\n\n  Red.prototype.sqrt = function sqrt (a) {\n    if (a.isZero()) return a.clone();\n\n    var mod3 = this.m.andln(3);\n    assert(mod3 % 2 === 1);\n\n    // Fast case\n    if (mod3 === 3) {\n      var pow = this.m.add(new BN(1)).iushrn(2);\n      return this.pow(a, pow);\n    }\n\n    // Tonelli-Shanks algorithm (Totally unoptimized and slow)\n    //\n    // Find Q and S, that Q * 2 ^ S = (P - 1)\n    var q = this.m.subn(1);\n    var s = 0;\n    while (!q.isZero() && q.andln(1) === 0) {\n      s++;\n      q.iushrn(1);\n    }\n    assert(!q.isZero());\n\n    var one = new BN(1).toRed(this);\n    var nOne = one.redNeg();\n\n    // Find quadratic non-residue\n    // NOTE: Max is such because of generalized Riemann hypothesis.\n    var lpow = this.m.subn(1).iushrn(1);\n    var z = this.m.bitLength();\n    z = new BN(2 * z * z).toRed(this);\n\n    while (this.pow(z, lpow).cmp(nOne) !== 0) {\n      z.redIAdd(nOne);\n    }\n\n    var c = this.pow(z, q);\n    var r = this.pow(a, q.addn(1).iushrn(1));\n    var t = this.pow(a, q);\n    var m = s;\n    while (t.cmp(one) !== 0) {\n      var tmp = t;\n      for (var i = 0; tmp.cmp(one) !== 0; i++) {\n        tmp = tmp.redSqr();\n      }\n      assert(i < m);\n      var b = this.pow(c, new BN(1).iushln(m - i - 1));\n\n      r = r.redMul(b);\n      c = b.redSqr();\n      t = t.redMul(c);\n      m = i;\n    }\n\n    return r;\n  };\n\n  Red.prototype.invm = function invm (a) {\n    var inv = a._invmp(this.m);\n    if (inv.negative !== 0) {\n      inv.negative = 0;\n      return this.imod(inv).redNeg();\n    } else {\n      return this.imod(inv);\n    }\n  };\n\n  Red.prototype.pow = function pow (a, num) {\n    if (num.isZero()) return new BN(1).toRed(this);\n    if (num.cmpn(1) === 0) return a.clone();\n\n    var windowSize = 4;\n    var wnd = new Array(1 << windowSize);\n    wnd[0] = new BN(1).toRed(this);\n    wnd[1] = a;\n    for (var i = 2; i < wnd.length; i++) {\n      wnd[i] = this.mul(wnd[i - 1], a);\n    }\n\n    var res = wnd[0];\n    var current = 0;\n    var currentLen = 0;\n    var start = num.bitLength() % 26;\n    if (start === 0) {\n      start = 26;\n    }\n\n    for (i = num.length - 1; i >= 0; i--) {\n      var word = num.words[i];\n      for (var j = start - 1; j >= 0; j--) {\n        var bit = (word >> j) & 1;\n        if (res !== wnd[0]) {\n          res = this.sqr(res);\n        }\n\n        if (bit === 0 && current === 0) {\n          currentLen = 0;\n          continue;\n        }\n\n        current <<= 1;\n        current |= bit;\n        currentLen++;\n        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;\n\n        res = this.mul(res, wnd[current]);\n        currentLen = 0;\n        current = 0;\n      }\n      start = 26;\n    }\n\n    return res;\n  };\n\n  Red.prototype.convertTo = function convertTo (num) {\n    var r = num.umod(this.m);\n\n    return r === num ? r.clone() : r;\n  };\n\n  Red.prototype.convertFrom = function convertFrom (num) {\n    var res = num.clone();\n    res.red = null;\n    return res;\n  };\n\n  //\n  // Montgomery method engine\n  //\n\n  BN.mont = function mont (num) {\n    return new Mont(num);\n  };\n\n  function Mont (m) {\n    Red.call(this, m);\n\n    this.shift = this.m.bitLength();\n    if (this.shift % 26 !== 0) {\n      this.shift += 26 - (this.shift % 26);\n    }\n\n    this.r = new BN(1).iushln(this.shift);\n    this.r2 = this.imod(this.r.sqr());\n    this.rinv = this.r._invmp(this.m);\n\n    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);\n    this.minv = this.minv.umod(this.r);\n    this.minv = this.r.sub(this.minv);\n  }\n  inherits(Mont, Red);\n\n  Mont.prototype.convertTo = function convertTo (num) {\n    return this.imod(num.ushln(this.shift));\n  };\n\n  Mont.prototype.convertFrom = function convertFrom (num) {\n    var r = this.imod(num.mul(this.rinv));\n    r.red = null;\n    return r;\n  };\n\n  Mont.prototype.imul = function imul (a, b) {\n    if (a.isZero() || b.isZero()) {\n      a.words[0] = 0;\n      a.length = 1;\n      return a;\n    }\n\n    var t = a.imul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.mul = function mul (a, b) {\n    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);\n\n    var t = a.mul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.invm = function invm (a) {\n    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R\n    var res = this.imod(a._invmp(this.m).mul(this.r2));\n    return res._forceRed(this);\n  };\n})(typeof module === 'undefined' || module, this);\n","\"use strict\";\n/**\n * @packageDocumentation\n * @module API-EVM-BaseTx\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EVMBaseTx = void 0;\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst evmtx_1 = require(\"../../common/evmtx\");\nconst constants_1 = require(\"../../utils/constants\");\nconst tx_1 = require(\"./tx\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\n/**\n * Class representing a base for all transactions.\n */\nclass EVMBaseTx extends evmtx_1.EVMStandardBaseTx {\n    /**\n     * Class representing an EVMBaseTx which is the foundation for all EVM transactions.\n     *\n     * @param networkID Optional networkID, [[DefaultNetworkID]]\n     * @param blockchainID Optional blockchainID, default Buffer.alloc(32, 16)\n     */\n    constructor(networkID = constants_1.DefaultNetworkID, blockchainID = buffer_1.Buffer.alloc(32, 16)) {\n        super(networkID, blockchainID);\n        this._typeName = \"BaseTx\";\n        this._typeID = undefined;\n        /**\n         * Returns the id of the [[BaseTx]]\n         */\n        this.getTxType = () => {\n            return this._typeID;\n        };\n    }\n    //serialize is inherited\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n    }\n    /**\n     * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[BaseTx]], parses it, populates the class, and returns the length of the BaseTx in bytes.\n     *\n     * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[BaseTx]]\n     *\n     * @returns The length of the raw [[BaseTx]]\n     *\n     * @remarks assume not-checksummed\n     */\n    fromBuffer(bytes, offset = 0) {\n        this.networkid = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        this.blockchainid = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        return offset;\n    }\n    /**\n     * Takes the bytes of an [[UnsignedTx]] and returns an array of [[Credential]]s\n     *\n     * @param msg A Buffer for the [[UnsignedTx]]\n     * @param kc An [[KeyChain]] used in signing\n     *\n     * @returns An array of [[Credential]]s\n     */\n    sign(msg, kc) {\n        const sigs = [];\n        return sigs;\n    }\n    clone() {\n        const newEVMBaseTx = new EVMBaseTx();\n        newEVMBaseTx.fromBuffer(this.toBuffer());\n        return newEVMBaseTx;\n    }\n    create(...args) {\n        return new EVMBaseTx(...args);\n    }\n    select(id, ...args) {\n        const newEVMBaseTx = tx_1.SelectTxClass(id, ...args);\n        return newEVMBaseTx;\n    }\n}\nexports.EVMBaseTx = EVMBaseTx;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZXR4LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2FwaXMvZXZtL2Jhc2V0eC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7OztHQUdHOzs7Ozs7QUFFSCxvQ0FBaUM7QUFDakMsb0VBQTRDO0FBSzVDLDhDQUF1RDtBQUV2RCxxREFBeUQ7QUFDekQsNkJBQXFDO0FBR3JDOztHQUVHO0FBQ0gsTUFBTSxRQUFRLEdBQWEsa0JBQVEsQ0FBQyxXQUFXLEVBQUUsQ0FBQztBQUVsRDs7R0FFRztBQUNILE1BQWEsU0FBVSxTQUFRLHlCQUFvQztJQThEakU7Ozs7O09BS0c7SUFDSCxZQUFZLFlBQW9CLDRCQUFnQixFQUFFLGVBQXVCLGVBQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQztRQUMzRixLQUFLLENBQUMsU0FBUyxFQUFFLFlBQVksQ0FBQyxDQUFDO1FBcEV2QixjQUFTLEdBQUcsUUFBUSxDQUFDO1FBQ3JCLFlBQU8sR0FBRyxTQUFTLENBQUM7UUFROUI7O1dBRUc7UUFDSCxjQUFTLEdBQUcsR0FBVyxFQUFFO1lBQ3ZCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztRQUN0QixDQUFDLENBQUE7SUF1REQsQ0FBQztJQWxFRCx3QkFBd0I7SUFFeEIsV0FBVyxDQUFDLE1BQWMsRUFBRSxXQUErQixLQUFLO1FBQzlELEtBQUssQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQ3RDLENBQUM7SUFTRDs7Ozs7Ozs7T0FRRztJQUNILFVBQVUsQ0FBQyxLQUFhLEVBQUUsU0FBaUIsQ0FBQztRQUMxQyxJQUFJLENBQUMsU0FBUyxHQUFHLFFBQVEsQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDOUQsTUFBTSxJQUFJLENBQUMsQ0FBQztRQUNaLElBQUksQ0FBQyxZQUFZLEdBQUcsUUFBUSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU0sR0FBRyxFQUFFLENBQUMsQ0FBQztRQUNsRSxNQUFNLElBQUksRUFBRSxDQUFDO1FBQ2IsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQztJQUVEOzs7Ozs7O09BT0c7SUFDSCxJQUFJLENBQUMsR0FBVyxFQUFFLEVBQVk7UUFDNUIsTUFBTSxJQUFJLEdBQWlCLEVBQUUsQ0FBQztRQUM5QixPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRCxLQUFLO1FBQ0gsTUFBTSxZQUFZLEdBQWMsSUFBSSxTQUFTLEVBQUUsQ0FBQztRQUNoRCxZQUFZLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO1FBQ3pDLE9BQU8sWUFBb0IsQ0FBQztJQUM5QixDQUFDO0lBRUQsTUFBTSxDQUFDLEdBQUcsSUFBVztRQUNuQixPQUFPLElBQUksU0FBUyxDQUFDLEdBQUcsSUFBSSxDQUFTLENBQUM7SUFDeEMsQ0FBQztJQUVELE1BQU0sQ0FBQyxFQUFVLEVBQUUsR0FBRyxJQUFXO1FBQy9CLE1BQU0sWUFBWSxHQUFjLGtCQUFhLENBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUM7UUFDM0QsT0FBTyxZQUFvQixDQUFDO0lBQzlCLENBQUM7Q0FXRjtBQXZFRCw4QkF1RUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBwYWNrYWdlRG9jdW1lbnRhdGlvblxuICogQG1vZHVsZSBBUEktRVZNLUJhc2VUeFxuICovXG5cbmltcG9ydCB7IEJ1ZmZlciB9IGZyb20gJ2J1ZmZlci8nO1xuaW1wb3J0IEJpblRvb2xzIGZyb20gJy4uLy4uL3V0aWxzL2JpbnRvb2xzJztcbmltcG9ydCB7IFxuICBLZXlDaGFpbiwgXG4gIEtleVBhaXIgXG59IGZyb20gJy4va2V5Y2hhaW4nO1xuaW1wb3J0IHsgRVZNU3RhbmRhcmRCYXNlVHggfSBmcm9tICcuLi8uLi9jb21tb24vZXZtdHgnO1xuaW1wb3J0IHsgQ3JlZGVudGlhbCB9IGZyb20gJy4uLy4uL2NvbW1vbi9jcmVkZW50aWFscyc7XG5pbXBvcnQgeyBEZWZhdWx0TmV0d29ya0lEIH0gZnJvbSAnLi4vLi4vdXRpbHMvY29uc3RhbnRzJztcbmltcG9ydCB7IFNlbGVjdFR4Q2xhc3MgfSBmcm9tICcuL3R4JztcbmltcG9ydCB7IFNlcmlhbGl6ZWRFbmNvZGluZyB9IGZyb20gJy4uLy4uL3V0aWxzL3NlcmlhbGl6YXRpb24nO1xuXG4vKipcbiAqIEBpZ25vcmVcbiAqL1xuY29uc3QgYmludG9vbHM6IEJpblRvb2xzID0gQmluVG9vbHMuZ2V0SW5zdGFuY2UoKTtcblxuLyoqXG4gKiBDbGFzcyByZXByZXNlbnRpbmcgYSBiYXNlIGZvciBhbGwgdHJhbnNhY3Rpb25zLlxuICovXG5leHBvcnQgY2xhc3MgRVZNQmFzZVR4IGV4dGVuZHMgRVZNU3RhbmRhcmRCYXNlVHg8S2V5UGFpciwgS2V5Q2hhaW4+IHtcbiAgcHJvdGVjdGVkIF90eXBlTmFtZSA9IFwiQmFzZVR4XCI7XG4gIHByb3RlY3RlZCBfdHlwZUlEID0gdW5kZWZpbmVkO1xuXG4gIC8vc2VyaWFsaXplIGlzIGluaGVyaXRlZFxuXG4gIGRlc2VyaWFsaXplKGZpZWxkczogb2JqZWN0LCBlbmNvZGluZzogU2VyaWFsaXplZEVuY29kaW5nID0gXCJoZXhcIikge1xuICAgIHN1cGVyLmRlc2VyaWFsaXplKGZpZWxkcywgZW5jb2RpbmcpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGlkIG9mIHRoZSBbW0Jhc2VUeF1dXG4gICAqL1xuICBnZXRUeFR5cGUgPSAoKTogbnVtYmVyID0+IHtcbiAgICByZXR1cm4gdGhpcy5fdHlwZUlEO1xuICB9XG5cbiAgLyoqXG4gICAqIFRha2VzIGEge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyfEJ1ZmZlcn0gY29udGFpbmluZyBhbiBbW0Jhc2VUeF1dLCBwYXJzZXMgaXQsIHBvcHVsYXRlcyB0aGUgY2xhc3MsIGFuZCByZXR1cm5zIHRoZSBsZW5ndGggb2YgdGhlIEJhc2VUeCBpbiBieXRlcy5cbiAgICpcbiAgICogQHBhcmFtIGJ5dGVzIEEge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyfEJ1ZmZlcn0gY29udGFpbmluZyBhIHJhdyBbW0Jhc2VUeF1dXG4gICAqXG4gICAqIEByZXR1cm5zIFRoZSBsZW5ndGggb2YgdGhlIHJhdyBbW0Jhc2VUeF1dXG4gICAqXG4gICAqIEByZW1hcmtzIGFzc3VtZSBub3QtY2hlY2tzdW1tZWRcbiAgICovXG4gIGZyb21CdWZmZXIoYnl0ZXM6IEJ1ZmZlciwgb2Zmc2V0OiBudW1iZXIgPSAwKTogbnVtYmVyIHtcbiAgICB0aGlzLm5ldHdvcmtpZCA9IGJpbnRvb2xzLmNvcHlGcm9tKGJ5dGVzLCBvZmZzZXQsIG9mZnNldCArIDQpO1xuICAgIG9mZnNldCArPSA0O1xuICAgIHRoaXMuYmxvY2tjaGFpbmlkID0gYmludG9vbHMuY29weUZyb20oYnl0ZXMsIG9mZnNldCwgb2Zmc2V0ICsgMzIpO1xuICAgIG9mZnNldCArPSAzMjtcbiAgICByZXR1cm4gb2Zmc2V0O1xuICB9XG5cbiAgLyoqXG4gICAqIFRha2VzIHRoZSBieXRlcyBvZiBhbiBbW1Vuc2lnbmVkVHhdXSBhbmQgcmV0dXJucyBhbiBhcnJheSBvZiBbW0NyZWRlbnRpYWxdXXNcbiAgICpcbiAgICogQHBhcmFtIG1zZyBBIEJ1ZmZlciBmb3IgdGhlIFtbVW5zaWduZWRUeF1dXG4gICAqIEBwYXJhbSBrYyBBbiBbW0tleUNoYWluXV0gdXNlZCBpbiBzaWduaW5nXG4gICAqXG4gICAqIEByZXR1cm5zIEFuIGFycmF5IG9mIFtbQ3JlZGVudGlhbF1dc1xuICAgKi9cbiAgc2lnbihtc2c6IEJ1ZmZlciwga2M6IEtleUNoYWluKTogQ3JlZGVudGlhbFtdIHtcbiAgICBjb25zdCBzaWdzOiBDcmVkZW50aWFsW10gPSBbXTtcbiAgICByZXR1cm4gc2lncztcbiAgfVxuXG4gIGNsb25lKCk6IHRoaXMge1xuICAgIGNvbnN0IG5ld0VWTUJhc2VUeDogRVZNQmFzZVR4ID0gbmV3IEVWTUJhc2VUeCgpO1xuICAgIG5ld0VWTUJhc2VUeC5mcm9tQnVmZmVyKHRoaXMudG9CdWZmZXIoKSk7XG4gICAgcmV0dXJuIG5ld0VWTUJhc2VUeCBhcyB0aGlzO1xuICB9XG5cbiAgY3JlYXRlKC4uLmFyZ3M6IGFueVtdKTogdGhpcyB7XG4gICAgcmV0dXJuIG5ldyBFVk1CYXNlVHgoLi4uYXJncykgYXMgdGhpcztcbiAgfVxuXG4gIHNlbGVjdChpZDogbnVtYmVyLCAuLi5hcmdzOiBhbnlbXSk6IHRoaXMge1xuICAgIGNvbnN0IG5ld0VWTUJhc2VUeDogRVZNQmFzZVR4ID0gU2VsZWN0VHhDbGFzcyhpZCwgLi4uYXJncyk7XG4gICAgcmV0dXJuIG5ld0VWTUJhc2VUeCBhcyB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIENsYXNzIHJlcHJlc2VudGluZyBhbiBFVk1CYXNlVHggd2hpY2ggaXMgdGhlIGZvdW5kYXRpb24gZm9yIGFsbCBFVk0gdHJhbnNhY3Rpb25zLlxuICAgKlxuICAgKiBAcGFyYW0gbmV0d29ya0lEIE9wdGlvbmFsIG5ldHdvcmtJRCwgW1tEZWZhdWx0TmV0d29ya0lEXV1cbiAgICogQHBhcmFtIGJsb2NrY2hhaW5JRCBPcHRpb25hbCBibG9ja2NoYWluSUQsIGRlZmF1bHQgQnVmZmVyLmFsbG9jKDMyLCAxNilcbiAgICovXG4gIGNvbnN0cnVjdG9yKG5ldHdvcmtJRDogbnVtYmVyID0gRGVmYXVsdE5ldHdvcmtJRCwgYmxvY2tjaGFpbklEOiBCdWZmZXIgPSBCdWZmZXIuYWxsb2MoMzIsIDE2KSkge1xuICAgIHN1cGVyKG5ldHdvcmtJRCwgYmxvY2tjaGFpbklEKTtcbiAgfVxufSJdfQ==","'use strict';\n\nconst inherits = require('inherits');\n\nconst bignum = require('bn.js');\nconst DecoderBuffer = require('../base/buffer').DecoderBuffer;\nconst Node = require('../base/node');\n\n// Import DER constants\nconst der = require('../constants/der');\n\nfunction DERDecoder(entity) {\n  this.enc = 'der';\n  this.name = entity.name;\n  this.entity = entity;\n\n  // Construct base tree\n  this.tree = new DERNode();\n  this.tree._init(entity.body);\n}\nmodule.exports = DERDecoder;\n\nDERDecoder.prototype.decode = function decode(data, options) {\n  if (!DecoderBuffer.isDecoderBuffer(data)) {\n    data = new DecoderBuffer(data, options);\n  }\n\n  return this.tree._decode(data, options);\n};\n\n// Tree methods\n\nfunction DERNode(parent) {\n  Node.call(this, 'der', parent);\n}\ninherits(DERNode, Node);\n\nDERNode.prototype._peekTag = function peekTag(buffer, tag, any) {\n  if (buffer.isEmpty())\n    return false;\n\n  const state = buffer.save();\n  const decodedTag = derDecodeTag(buffer, 'Failed to peek tag: \"' + tag + '\"');\n  if (buffer.isError(decodedTag))\n    return decodedTag;\n\n  buffer.restore(state);\n\n  return decodedTag.tag === tag || decodedTag.tagStr === tag ||\n    (decodedTag.tagStr + 'of') === tag || any;\n};\n\nDERNode.prototype._decodeTag = function decodeTag(buffer, tag, any) {\n  const decodedTag = derDecodeTag(buffer,\n    'Failed to decode tag of \"' + tag + '\"');\n  if (buffer.isError(decodedTag))\n    return decodedTag;\n\n  let len = derDecodeLen(buffer,\n    decodedTag.primitive,\n    'Failed to get length of \"' + tag + '\"');\n\n  // Failure\n  if (buffer.isError(len))\n    return len;\n\n  if (!any &&\n      decodedTag.tag !== tag &&\n      decodedTag.tagStr !== tag &&\n      decodedTag.tagStr + 'of' !== tag) {\n    return buffer.error('Failed to match tag: \"' + tag + '\"');\n  }\n\n  if (decodedTag.primitive || len !== null)\n    return buffer.skip(len, 'Failed to match body of: \"' + tag + '\"');\n\n  // Indefinite length... find END tag\n  const state = buffer.save();\n  const res = this._skipUntilEnd(\n    buffer,\n    'Failed to skip indefinite length body: \"' + this.tag + '\"');\n  if (buffer.isError(res))\n    return res;\n\n  len = buffer.offset - state.offset;\n  buffer.restore(state);\n  return buffer.skip(len, 'Failed to match body of: \"' + tag + '\"');\n};\n\nDERNode.prototype._skipUntilEnd = function skipUntilEnd(buffer, fail) {\n  for (;;) {\n    const tag = derDecodeTag(buffer, fail);\n    if (buffer.isError(tag))\n      return tag;\n    const len = derDecodeLen(buffer, tag.primitive, fail);\n    if (buffer.isError(len))\n      return len;\n\n    let res;\n    if (tag.primitive || len !== null)\n      res = buffer.skip(len);\n    else\n      res = this._skipUntilEnd(buffer, fail);\n\n    // Failure\n    if (buffer.isError(res))\n      return res;\n\n    if (tag.tagStr === 'end')\n      break;\n  }\n};\n\nDERNode.prototype._decodeList = function decodeList(buffer, tag, decoder,\n  options) {\n  const result = [];\n  while (!buffer.isEmpty()) {\n    const possibleEnd = this._peekTag(buffer, 'end');\n    if (buffer.isError(possibleEnd))\n      return possibleEnd;\n\n    const res = decoder.decode(buffer, 'der', options);\n    if (buffer.isError(res) && possibleEnd)\n      break;\n    result.push(res);\n  }\n  return result;\n};\n\nDERNode.prototype._decodeStr = function decodeStr(buffer, tag) {\n  if (tag === 'bitstr') {\n    const unused = buffer.readUInt8();\n    if (buffer.isError(unused))\n      return unused;\n    return { unused: unused, data: buffer.raw() };\n  } else if (tag === 'bmpstr') {\n    const raw = buffer.raw();\n    if (raw.length % 2 === 1)\n      return buffer.error('Decoding of string type: bmpstr length mismatch');\n\n    let str = '';\n    for (let i = 0; i < raw.length / 2; i++) {\n      str += String.fromCharCode(raw.readUInt16BE(i * 2));\n    }\n    return str;\n  } else if (tag === 'numstr') {\n    const numstr = buffer.raw().toString('ascii');\n    if (!this._isNumstr(numstr)) {\n      return buffer.error('Decoding of string type: ' +\n                          'numstr unsupported characters');\n    }\n    return numstr;\n  } else if (tag === 'octstr') {\n    return buffer.raw();\n  } else if (tag === 'objDesc') {\n    return buffer.raw();\n  } else if (tag === 'printstr') {\n    const printstr = buffer.raw().toString('ascii');\n    if (!this._isPrintstr(printstr)) {\n      return buffer.error('Decoding of string type: ' +\n                          'printstr unsupported characters');\n    }\n    return printstr;\n  } else if (/str$/.test(tag)) {\n    return buffer.raw().toString();\n  } else {\n    return buffer.error('Decoding of string type: ' + tag + ' unsupported');\n  }\n};\n\nDERNode.prototype._decodeObjid = function decodeObjid(buffer, values, relative) {\n  let result;\n  const identifiers = [];\n  let ident = 0;\n  let subident = 0;\n  while (!buffer.isEmpty()) {\n    subident = buffer.readUInt8();\n    ident <<= 7;\n    ident |= subident & 0x7f;\n    if ((subident & 0x80) === 0) {\n      identifiers.push(ident);\n      ident = 0;\n    }\n  }\n  if (subident & 0x80)\n    identifiers.push(ident);\n\n  const first = (identifiers[0] / 40) | 0;\n  const second = identifiers[0] % 40;\n\n  if (relative)\n    result = identifiers;\n  else\n    result = [first, second].concat(identifiers.slice(1));\n\n  if (values) {\n    let tmp = values[result.join(' ')];\n    if (tmp === undefined)\n      tmp = values[result.join('.')];\n    if (tmp !== undefined)\n      result = tmp;\n  }\n\n  return result;\n};\n\nDERNode.prototype._decodeTime = function decodeTime(buffer, tag) {\n  const str = buffer.raw().toString();\n\n  let year;\n  let mon;\n  let day;\n  let hour;\n  let min;\n  let sec;\n  if (tag === 'gentime') {\n    year = str.slice(0, 4) | 0;\n    mon = str.slice(4, 6) | 0;\n    day = str.slice(6, 8) | 0;\n    hour = str.slice(8, 10) | 0;\n    min = str.slice(10, 12) | 0;\n    sec = str.slice(12, 14) | 0;\n  } else if (tag === 'utctime') {\n    year = str.slice(0, 2) | 0;\n    mon = str.slice(2, 4) | 0;\n    day = str.slice(4, 6) | 0;\n    hour = str.slice(6, 8) | 0;\n    min = str.slice(8, 10) | 0;\n    sec = str.slice(10, 12) | 0;\n    if (year < 70)\n      year = 2000 + year;\n    else\n      year = 1900 + year;\n  } else {\n    return buffer.error('Decoding ' + tag + ' time is not supported yet');\n  }\n\n  return Date.UTC(year, mon - 1, day, hour, min, sec, 0);\n};\n\nDERNode.prototype._decodeNull = function decodeNull() {\n  return null;\n};\n\nDERNode.prototype._decodeBool = function decodeBool(buffer) {\n  const res = buffer.readUInt8();\n  if (buffer.isError(res))\n    return res;\n  else\n    return res !== 0;\n};\n\nDERNode.prototype._decodeInt = function decodeInt(buffer, values) {\n  // Bigint, return as it is (assume big endian)\n  const raw = buffer.raw();\n  let res = new bignum(raw);\n\n  if (values)\n    res = values[res.toString(10)] || res;\n\n  return res;\n};\n\nDERNode.prototype._use = function use(entity, obj) {\n  if (typeof entity === 'function')\n    entity = entity(obj);\n  return entity._getDecoder('der').tree;\n};\n\n// Utility methods\n\nfunction derDecodeTag(buf, fail) {\n  let tag = buf.readUInt8(fail);\n  if (buf.isError(tag))\n    return tag;\n\n  const cls = der.tagClass[tag >> 6];\n  const primitive = (tag & 0x20) === 0;\n\n  // Multi-octet tag - load\n  if ((tag & 0x1f) === 0x1f) {\n    let oct = tag;\n    tag = 0;\n    while ((oct & 0x80) === 0x80) {\n      oct = buf.readUInt8(fail);\n      if (buf.isError(oct))\n        return oct;\n\n      tag <<= 7;\n      tag |= oct & 0x7f;\n    }\n  } else {\n    tag &= 0x1f;\n  }\n  const tagStr = der.tag[tag];\n\n  return {\n    cls: cls,\n    primitive: primitive,\n    tag: tag,\n    tagStr: tagStr\n  };\n}\n\nfunction derDecodeLen(buf, primitive, fail) {\n  let len = buf.readUInt8(fail);\n  if (buf.isError(len))\n    return len;\n\n  // Indefinite form\n  if (!primitive && len === 0x80)\n    return null;\n\n  // Definite form\n  if ((len & 0x80) === 0) {\n    // Short form\n    return len;\n  }\n\n  // Long form\n  const num = len & 0x7f;\n  if (num > 4)\n    return buf.error('length octect is too long');\n\n  len = 0;\n  for (let i = 0; i < num; i++) {\n    len <<= 8;\n    const j = buf.readUInt8(fail);\n    if (buf.isError(j))\n      return j;\n    len |= j;\n  }\n\n  return len;\n}\n","'use strict';\n\nconst inherits = require('inherits');\n\nfunction Reporter(options) {\n  this._reporterState = {\n    obj: null,\n    path: [],\n    options: options || {},\n    errors: []\n  };\n}\nexports.Reporter = Reporter;\n\nReporter.prototype.isError = function isError(obj) {\n  return obj instanceof ReporterError;\n};\n\nReporter.prototype.save = function save() {\n  const state = this._reporterState;\n\n  return { obj: state.obj, pathLen: state.path.length };\n};\n\nReporter.prototype.restore = function restore(data) {\n  const state = this._reporterState;\n\n  state.obj = data.obj;\n  state.path = state.path.slice(0, data.pathLen);\n};\n\nReporter.prototype.enterKey = function enterKey(key) {\n  return this._reporterState.path.push(key);\n};\n\nReporter.prototype.exitKey = function exitKey(index) {\n  const state = this._reporterState;\n\n  state.path = state.path.slice(0, index - 1);\n};\n\nReporter.prototype.leaveKey = function leaveKey(index, key, value) {\n  const state = this._reporterState;\n\n  this.exitKey(index);\n  if (state.obj !== null)\n    state.obj[key] = value;\n};\n\nReporter.prototype.path = function path() {\n  return this._reporterState.path.join('/');\n};\n\nReporter.prototype.enterObject = function enterObject() {\n  const state = this._reporterState;\n\n  const prev = state.obj;\n  state.obj = {};\n  return prev;\n};\n\nReporter.prototype.leaveObject = function leaveObject(prev) {\n  const state = this._reporterState;\n\n  const now = state.obj;\n  state.obj = prev;\n  return now;\n};\n\nReporter.prototype.error = function error(msg) {\n  let err;\n  const state = this._reporterState;\n\n  const inherited = msg instanceof ReporterError;\n  if (inherited) {\n    err = msg;\n  } else {\n    err = new ReporterError(state.path.map(function(elem) {\n      return '[' + JSON.stringify(elem) + ']';\n    }).join(''), msg.message || msg, msg.stack);\n  }\n\n  if (!state.options.partial)\n    throw err;\n\n  if (!inherited)\n    state.errors.push(err);\n\n  return err;\n};\n\nReporter.prototype.wrapResult = function wrapResult(result) {\n  const state = this._reporterState;\n  if (!state.options.partial)\n    return result;\n\n  return {\n    result: this.isError(result) ? null : result,\n    errors: state.errors\n  };\n};\n\nfunction ReporterError(path, msg) {\n  this.path = path;\n  this.rethrow(msg);\n}\ninherits(ReporterError, Error);\n\nReporterError.prototype.rethrow = function rethrow(msg) {\n  this.message = msg + ' at: ' + (this.path || '(shallow)');\n  if (Error.captureStackTrace)\n    Error.captureStackTrace(this, ReporterError);\n\n  if (!this.stack) {\n    try {\n      // IE only adds stack when thrown\n      throw new Error(this.message);\n    } catch (e) {\n      this.stack = e.stack;\n    }\n  }\n  return this;\n};\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ExportTx = void 0;\n/**\n * @packageDocumentation\n * @module API-AVM-ExportTx\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst outputs_1 = require(\"./outputs\");\nconst basetx_1 = require(\"./basetx\");\nconst constants_2 = require(\"../../utils/constants\");\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst serialization_1 = require(\"../../utils/serialization\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serializer = serialization_1.Serialization.getInstance();\n/**\n * Class representing an unsigned Export transaction.\n */\nclass ExportTx extends basetx_1.BaseTx {\n    /**\n       * Class representing an unsigned Export transaction.\n       *\n       * @param networkid Optional networkid, [[DefaultNetworkID]]\n       * @param blockchainid Optional blockchainid, default Buffer.alloc(32, 16)\n       * @param outs Optional array of the [[TransferableOutput]]s\n       * @param ins Optional array of the [[TransferableInput]]s\n       * @param memo Optional {@link https://github.com/feross/buffer|Buffer} for the memo field\n       * @param destinationChain Optional chainid which identifies where the funds will sent to\n       * @param exportOuts Array of [[TransferableOutputs]]s used in the transaction\n       */\n    constructor(networkid = constants_2.DefaultNetworkID, blockchainid = buffer_1.Buffer.alloc(32, 16), outs = undefined, ins = undefined, memo = undefined, destinationChain = undefined, exportOuts = undefined) {\n        super(networkid, blockchainid, outs, ins, memo);\n        this._typeName = \"ExportTx\";\n        this._typeID = constants_1.AVMConstants.EXPORTTX;\n        this.destinationChain = undefined;\n        this.numOuts = buffer_1.Buffer.alloc(4);\n        this.exportOuts = [];\n        /**\n           * Returns the id of the [[ExportTx]]\n           */\n        this.getTxType = () => {\n            return this._typeID;\n        };\n        /**\n         * Returns a {@link https://github.com/feross/buffer|Buffer} for the destination chainid.\n         */\n        this.getDestinationChain = () => {\n            return this.destinationChain;\n        };\n        this.destinationChain = destinationChain; // no correction, if they don't pass a chainid here, it will BOMB on toBuffer\n        if (typeof exportOuts !== 'undefined' && Array.isArray(exportOuts)) {\n            for (let i = 0; i < exportOuts.length; i++) {\n                if (!(exportOuts[i] instanceof outputs_1.TransferableOutput)) {\n                    throw new Error(\"Error - ExportTx.constructor: invalid TransferableOutput in array parameter 'exportOuts'\");\n                }\n            }\n            this.exportOuts = exportOuts;\n        }\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { \"destinationChain\": serializer.encoder(this.destinationChain, encoding, \"Buffer\", \"cb58\"), \"exportOuts\": this.exportOuts.map((e) => e.serialize(encoding)) });\n    }\n    ;\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.destinationChain = serializer.decoder(fields[\"destinationChain\"], encoding, \"cb58\", \"Buffer\", 32);\n        this.exportOuts = fields[\"exportOuts\"].map((e) => {\n            let eo = new outputs_1.TransferableOutput();\n            eo.deserialize(e, encoding);\n            return eo;\n        });\n        this.numOuts = buffer_1.Buffer.alloc(4);\n        this.numOuts.writeUInt32BE(this.exportOuts.length, 0);\n    }\n    /**\n     * Returns an array of [[TransferableOutput]]s in this transaction.\n     */\n    getExportOutputs() {\n        return this.exportOuts;\n    }\n    /**\n     * Returns the totall exported amount as a {@link https://github.com/indutny/bn.js/|BN}.\n     */\n    getExportTotal() {\n        let val = new bn_js_1.default(0);\n        for (let i = 0; i < this.exportOuts.length; i++) {\n            val = val.add(this.exportOuts[i].getOutput().getAmount());\n        }\n        return val;\n    }\n    getTotalOuts() {\n        return [...this.getOuts(), ...this.getExportOutputs()];\n    }\n    /**\n       * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[ExportTx]], parses it, populates the class, and returns the length of the [[ExportTx]] in bytes.\n       *\n       * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[ExportTx]]\n       *\n       * @returns The length of the raw [[ExportTx]]\n       *\n       * @remarks assume not-checksummed\n       */\n    fromBuffer(bytes, offset = 0) {\n        offset = super.fromBuffer(bytes, offset);\n        this.destinationChain = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        this.numOuts = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const numOuts = this.numOuts.readUInt32BE(0);\n        for (let i = 0; i < numOuts; i++) {\n            const anOut = new outputs_1.TransferableOutput();\n            offset = anOut.fromBuffer(bytes, offset);\n            this.exportOuts.push(anOut);\n        }\n        return offset;\n    }\n    /**\n       * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[ExportTx]].\n       */\n    toBuffer() {\n        if (typeof this.destinationChain === \"undefined\") {\n            throw new Error(\"ExportTx.toBuffer -- this.destinationChain is undefined\");\n        }\n        this.numOuts.writeUInt32BE(this.exportOuts.length, 0);\n        let barr = [super.toBuffer(), this.destinationChain, this.numOuts];\n        this.exportOuts = this.exportOuts.sort(outputs_1.TransferableOutput.comparator());\n        for (let i = 0; i < this.exportOuts.length; i++) {\n            barr.push(this.exportOuts[i].toBuffer());\n        }\n        return buffer_1.Buffer.concat(barr);\n    }\n    clone() {\n        let newbase = new ExportTx();\n        newbase.fromBuffer(this.toBuffer());\n        return newbase;\n    }\n    create(...args) {\n        return new ExportTx(...args);\n    }\n}\nexports.ExportTx = ExportTx;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EVMOutput = exports.SECPTransferOutput = exports.AmountOutput = exports.TransferableOutput = exports.SelectOutputClass = void 0;\n/**\n * @packageDocumentation\n * @module API-EVM-Outputs\n */\nconst buffer_1 = require(\"buffer/\");\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst output_1 = require(\"../../common/output\");\nconst bintools = bintools_1.default.getInstance();\n/**\n * Takes a buffer representing the output and returns the proper Output instance.\n *\n * @param outputID A number representing the outputID parsed prior to the bytes passed in\n *\n * @returns An instance of an [[Output]]-extended class.\n */\nexports.SelectOutputClass = (outputID, ...args) => {\n    if (outputID == constants_1.EVMConstants.SECPXFEROUTPUTID) {\n        return new SECPTransferOutput(...args);\n    }\n    throw new Error(`Error - SelectOutputClass: unknown outputID ${outputID}`);\n};\nclass TransferableOutput extends output_1.StandardTransferableOutput {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"TransferableOutput\";\n        this._typeID = undefined;\n    }\n    //serialize is inherited\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.output = exports.SelectOutputClass(fields[\"output\"][\"_typeID\"]);\n        this.output.deserialize(fields[\"output\"], encoding);\n    }\n    fromBuffer(bytes, offset = 0) {\n        this.assetID = bintools.copyFrom(bytes, offset, offset + constants_1.EVMConstants.ASSETIDLEN);\n        offset += constants_1.EVMConstants.ASSETIDLEN;\n        const outputid = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);\n        offset += 4;\n        this.output = exports.SelectOutputClass(outputid);\n        return this.output.fromBuffer(bytes, offset);\n    }\n}\nexports.TransferableOutput = TransferableOutput;\nclass AmountOutput extends output_1.StandardAmountOutput {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"AmountOutput\";\n        this._typeID = undefined;\n    }\n    //serialize and deserialize both are inherited\n    /**\n     *\n     * @param assetID An assetID which is wrapped around the Buffer of the Output\n     */\n    makeTransferable(assetID) {\n        return new TransferableOutput(assetID, this);\n    }\n    select(id, ...args) {\n        return exports.SelectOutputClass(id, ...args);\n    }\n}\nexports.AmountOutput = AmountOutput;\n/**\n * An [[Output]] class which specifies an Output that carries an ammount for an assetID and uses secp256k1 signature scheme.\n */\nclass SECPTransferOutput extends AmountOutput {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"SECPTransferOutput\";\n        this._typeID = constants_1.EVMConstants.SECPXFEROUTPUTID;\n    }\n    //serialize and deserialize both are inherited\n    /**\n       * Returns the outputID for this output\n       */\n    getOutputID() {\n        return this._typeID;\n    }\n    create(...args) {\n        return new SECPTransferOutput(...args);\n    }\n    clone() {\n        const newout = this.create();\n        newout.fromBuffer(this.toBuffer());\n        return newout;\n    }\n}\nexports.SECPTransferOutput = SECPTransferOutput;\nclass EVMOutput {\n    /**\n     * An [[EVMOutput]] class which contains address, amount, and assetID.\n     *\n     * @param address The address recieving the asset as a {@link https://github.com/feross/buffer|Buffer} or a string.\n     * @param amount A {@link https://github.com/indutny/bn.js/|BN} or number representing the amount.\n     * @param assetID The assetID which is being sent as a {@link https://github.com/feross/buffer|Buffer} or a string.\n     */\n    constructor(address = undefined, amount = undefined, assetID = undefined) {\n        this.address = buffer_1.Buffer.alloc(20);\n        this.amount = buffer_1.Buffer.alloc(8);\n        this.amountValue = new bn_js_1.default(0);\n        this.assetID = buffer_1.Buffer.alloc(32);\n        /**\n         * Returns the address of the input as {@link https://github.com/feross/buffer|Buffer}\n         */\n        this.getAddress = () => this.address;\n        /**\n         * Returns the address as a bech32 encoded string.\n         */\n        this.getAddressString = () => this.address.toString('hex');\n        /**\n         * Returns the amount as a {@link https://github.com/indutny/bn.js/|BN}.\n         */\n        this.getAmount = () => this.amountValue.clone();\n        /**\n         * Returns the assetid of the input as {@link https://github.com/feross/buffer|Buffer}\n         */\n        this.getAssetID = () => this.assetID;\n        if (typeof address !== 'undefined' && typeof amount !== 'undefined' && typeof assetID !== 'undefined') {\n            if (typeof address === 'string') {\n                // if present then remove `0x` prefix\n                let prefix = address.substring(0, 2);\n                if (prefix === '0x') {\n                    address = address.split('x')[1];\n                }\n                address = buffer_1.Buffer.from(address, 'hex');\n            }\n            // convert number amount to BN\n            let amnt;\n            if (typeof amount === 'number') {\n                amnt = new bn_js_1.default(amount);\n            }\n            else {\n                amnt = amount;\n            }\n            // convert string assetID to Buffer\n            if (!(assetID instanceof buffer_1.Buffer)) {\n                assetID = bintools.cb58Decode(assetID);\n            }\n            this.address = address;\n            this.amountValue = amnt.clone();\n            this.amount = bintools.fromBNToBuffer(amnt, 8);\n            this.assetID = assetID;\n        }\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[EVMOutput]].\n     */\n    toBuffer() {\n        const bsize = this.address.length + this.amount.length + this.assetID.length;\n        const barr = [this.address, this.amount, this.assetID];\n        const buff = buffer_1.Buffer.concat(barr, bsize);\n        return buff;\n    }\n    /**\n     * Decodes the [[EVMOutput]] as a {@link https://github.com/feross/buffer|Buffer} and returns the size.\n     */\n    fromBuffer(bytes, offset = 0) {\n        this.address = bintools.copyFrom(bytes, offset, offset + 20);\n        offset += 20;\n        this.amount = bintools.copyFrom(bytes, offset, offset + 8);\n        offset += 8;\n        this.assetID = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        return offset;\n    }\n    /**\n     * Returns a base-58 representation of the [[EVMOutput]].\n     */\n    toString() {\n        return bintools.bufferToB58(this.toBuffer());\n    }\n    create(...args) {\n        return new EVMOutput(...args);\n    }\n    clone() {\n        const newEVMOutput = this.create();\n        newEVMOutput.fromBuffer(this.toBuffer());\n        return newEVMOutput;\n    }\n}\nexports.EVMOutput = EVMOutput;\n//# sourceMappingURL=data:application/json;base64,","'use strict';\n\nconst encoders = require('./encoders');\nconst decoders = require('./decoders');\nconst inherits = require('inherits');\n\nconst api = exports;\n\napi.define = function define(name, body) {\n  return new Entity(name, body);\n};\n\nfunction Entity(name, body) {\n  this.name = name;\n  this.body = body;\n\n  this.decoders = {};\n  this.encoders = {};\n}\n\nEntity.prototype._createNamed = function createNamed(Base) {\n  const name = this.name;\n\n  function Generated(entity) {\n    this._initNamed(entity, name);\n  }\n  inherits(Generated, Base);\n  Generated.prototype._initNamed = function _initNamed(entity, name) {\n    Base.call(this, entity, name);\n  };\n\n  return new Generated(this);\n};\n\nEntity.prototype._getDecoder = function _getDecoder(enc) {\n  enc = enc || 'der';\n  // Lazily create decoder\n  if (!this.decoders.hasOwnProperty(enc))\n    this.decoders[enc] = this._createNamed(decoders[enc]);\n  return this.decoders[enc];\n};\n\nEntity.prototype.decode = function decode(data, enc, options) {\n  return this._getDecoder(enc).decode(data, options);\n};\n\nEntity.prototype._getEncoder = function _getEncoder(enc) {\n  enc = enc || 'der';\n  // Lazily create encoder\n  if (!this.encoders.hasOwnProperty(enc))\n    this.encoders[enc] = this._createNamed(encoders[enc]);\n  return this.encoders[enc];\n};\n\nEntity.prototype.encode = function encode(data, enc, /* internal */ reporter) {\n  return this._getEncoder(enc).encode(data, reporter);\n};\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./api\"), exports);\n__exportStar(require(\"./basetx\"), exports);\n__exportStar(require(\"./constants\"), exports);\n__exportStar(require(\"./createassettx\"), exports);\n__exportStar(require(\"./credentials\"), exports);\n__exportStar(require(\"./exporttx\"), exports);\n__exportStar(require(\"./importtx\"), exports);\n__exportStar(require(\"./initialstates\"), exports);\n__exportStar(require(\"./inputs\"), exports);\n__exportStar(require(\"./keychain\"), exports);\n__exportStar(require(\"./minterset\"), exports);\n__exportStar(require(\"./operationtx\"), exports);\n__exportStar(require(\"./ops\"), exports);\n__exportStar(require(\"./outputs\"), exports);\n__exportStar(require(\"./tx\"), exports);\n__exportStar(require(\"./utxos\"), exports);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpcy9hdm0vaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUEsd0NBQXNCO0FBQ3RCLDJDQUF5QjtBQUN6Qiw4Q0FBNEI7QUFDNUIsa0RBQWdDO0FBQ2hDLGdEQUE4QjtBQUM5Qiw2Q0FBMkI7QUFDM0IsNkNBQTJCO0FBQzNCLGtEQUFnQztBQUNoQywyQ0FBeUI7QUFDekIsNkNBQTJCO0FBQzNCLDhDQUE0QjtBQUM1QixnREFBOEI7QUFDOUIsd0NBQXNCO0FBQ3RCLDRDQUEwQjtBQUMxQix1Q0FBcUI7QUFDckIsMENBQXdCIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSAnLi9hcGknO1xuZXhwb3J0ICogZnJvbSAnLi9iYXNldHgnO1xuZXhwb3J0ICogZnJvbSAnLi9jb25zdGFudHMnO1xuZXhwb3J0ICogZnJvbSAnLi9jcmVhdGVhc3NldHR4JztcbmV4cG9ydCAqIGZyb20gJy4vY3JlZGVudGlhbHMnO1xuZXhwb3J0ICogZnJvbSAnLi9leHBvcnR0eCc7XG5leHBvcnQgKiBmcm9tICcuL2ltcG9ydHR4JztcbmV4cG9ydCAqIGZyb20gJy4vaW5pdGlhbHN0YXRlcyc7XG5leHBvcnQgKiBmcm9tICcuL2lucHV0cyc7XG5leHBvcnQgKiBmcm9tICcuL2tleWNoYWluJztcbmV4cG9ydCAqIGZyb20gJy4vbWludGVyc2V0JztcbmV4cG9ydCAqIGZyb20gJy4vb3BlcmF0aW9udHgnO1xuZXhwb3J0ICogZnJvbSAnLi9vcHMnO1xuZXhwb3J0ICogZnJvbSAnLi9vdXRwdXRzJztcbmV4cG9ydCAqIGZyb20gJy4vdHgnO1xuZXhwb3J0ICogZnJvbSAnLi91dHhvcyc7XG4iXX0=","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./api\"), exports);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpcy9hZG1pbi9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQSx3Q0FBc0IiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tICcuL2FwaSc7XG4iXX0=","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BaseTx = void 0;\n/**\n * @packageDocumentation\n * @module API-AVM-BaseTx\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst outputs_1 = require(\"./outputs\");\nconst inputs_1 = require(\"./inputs\");\nconst credentials_1 = require(\"./credentials\");\nconst tx_1 = require(\"../../common/tx\");\nconst credentials_2 = require(\"../../common/credentials\");\nconst constants_2 = require(\"../../utils/constants\");\nconst tx_2 = require(\"./tx\");\nconst serialization_1 = require(\"../../utils/serialization\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serializer = serialization_1.Serialization.getInstance();\n/**\n * Class representing a base for all transactions.\n */\nclass BaseTx extends tx_1.StandardBaseTx {\n    /**\n     * Class representing a BaseTx which is the foundation for all transactions.\n     *\n     * @param networkid Optional networkid, [[DefaultNetworkID]]\n     * @param blockchainid Optional blockchainid, default Buffer.alloc(32, 16)\n     * @param outs Optional array of the [[TransferableOutput]]s\n     * @param ins Optional array of the [[TransferableInput]]s\n     * @param memo Optional {@link https://github.com/feross/buffer|Buffer} for the memo field\n     */\n    constructor(networkid = constants_2.DefaultNetworkID, blockchainid = buffer_1.Buffer.alloc(32, 16), outs = undefined, ins = undefined, memo = undefined) {\n        super(networkid, blockchainid, outs, ins, memo);\n        this._typeName = \"BaseTx\";\n        this._typeID = constants_1.AVMConstants.BASETX;\n        /**\n         * Returns the id of the [[BaseTx]]\n         */\n        this.getTxType = () => {\n            return this._typeID;\n        };\n    }\n    //serialize is inherited\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.outs = fields[\"outs\"].map((o) => {\n            let newOut = new outputs_1.TransferableOutput();\n            newOut.deserialize(o, encoding);\n            return newOut;\n        });\n        this.ins = fields[\"ins\"].map((i) => {\n            let newIn = new inputs_1.TransferableInput();\n            newIn.deserialize(i, encoding);\n            return newIn;\n        });\n        this.numouts = serializer.decoder(this.outs.length.toString(), \"display\", \"decimalString\", \"Buffer\", 4);\n        this.numins = serializer.decoder(this.ins.length.toString(), \"display\", \"decimalString\", \"Buffer\", 4);\n    }\n    getOuts() {\n        return this.outs;\n    }\n    getIns() {\n        return this.ins;\n    }\n    getTotalOuts() {\n        return this.getOuts();\n    }\n    /**\n     * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[BaseTx]], parses it, populates the class, and returns the length of the BaseTx in bytes.\n     *\n     * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[BaseTx]]\n     *\n     * @returns The length of the raw [[BaseTx]]\n     *\n     * @remarks assume not-checksummed\n     */\n    fromBuffer(bytes, offset = 0) {\n        this.networkid = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        this.blockchainid = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        this.numouts = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const outcount = this.numouts.readUInt32BE(0);\n        this.outs = [];\n        for (let i = 0; i < outcount; i++) {\n            const xferout = new outputs_1.TransferableOutput();\n            offset = xferout.fromBuffer(bytes, offset);\n            this.outs.push(xferout);\n        }\n        this.numins = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const incount = this.numins.readUInt32BE(0);\n        this.ins = [];\n        for (let i = 0; i < incount; i++) {\n            const xferin = new inputs_1.TransferableInput();\n            offset = xferin.fromBuffer(bytes, offset);\n            this.ins.push(xferin);\n        }\n        let memolen = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);\n        offset += 4;\n        this.memo = bintools.copyFrom(bytes, offset, offset + memolen);\n        offset += memolen;\n        return offset;\n    }\n    /**\n     * Takes the bytes of an [[UnsignedTx]] and returns an array of [[Credential]]s\n     *\n     * @param msg A Buffer for the [[UnsignedTx]]\n     * @param kc An [[KeyChain]] used in signing\n     *\n     * @returns An array of [[Credential]]s\n     */\n    sign(msg, kc) {\n        const sigs = [];\n        for (let i = 0; i < this.ins.length; i++) {\n            const cred = credentials_1.SelectCredentialClass(this.ins[i].getInput().getCredentialID());\n            const sigidxs = this.ins[i].getInput().getSigIdxs();\n            for (let j = 0; j < sigidxs.length; j++) {\n                const keypair = kc.getKey(sigidxs[j].getSource());\n                const signval = keypair.sign(msg);\n                const sig = new credentials_2.Signature();\n                sig.fromBuffer(signval);\n                cred.addSignature(sig);\n            }\n            sigs.push(cred);\n        }\n        return sigs;\n    }\n    clone() {\n        let newbase = new BaseTx();\n        newbase.fromBuffer(this.toBuffer());\n        return newbase;\n    }\n    create(...args) {\n        return new BaseTx(...args);\n    }\n    select(id, ...args) {\n        let newbasetx = tx_2.SelectTxClass(id, ...args);\n        return newbasetx;\n    }\n}\nexports.BaseTx = BaseTx;\n//# sourceMappingURL=data:application/json;base64,","'use strict';\n\nvar objectAssign = require('object-assign');\n\n// compare and isBuffer taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js\n// original notice:\n\n/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\nfunction compare(a, b) {\n  if (a === b) {\n    return 0;\n  }\n\n  var x = a.length;\n  var y = b.length;\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i];\n      y = b[i];\n      break;\n    }\n  }\n\n  if (x < y) {\n    return -1;\n  }\n  if (y < x) {\n    return 1;\n  }\n  return 0;\n}\nfunction isBuffer(b) {\n  if (global.Buffer && typeof global.Buffer.isBuffer === 'function') {\n    return global.Buffer.isBuffer(b);\n  }\n  return !!(b != null && b._isBuffer);\n}\n\n// based on node assert, original notice:\n// NB: The URL to the CommonJS spec is kept just for tradition.\n//     node-assert has evolved a lot since then, both in API and behavior.\n\n// http://wiki.commonjs.org/wiki/Unit_Testing/1.0\n//\n// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!\n//\n// Originally from narwhal.js (http://narwhaljs.org)\n// Copyright (c) 2009 Thomas Robinson <280north.com>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the 'Software'), to\n// deal in the Software without restriction, including without limitation the\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n// sell copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar util = require('util/');\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar pSlice = Array.prototype.slice;\nvar functionsHaveNames = (function () {\n  return function foo() {}.name === 'foo';\n}());\nfunction pToString (obj) {\n  return Object.prototype.toString.call(obj);\n}\nfunction isView(arrbuf) {\n  if (isBuffer(arrbuf)) {\n    return false;\n  }\n  if (typeof global.ArrayBuffer !== 'function') {\n    return false;\n  }\n  if (typeof ArrayBuffer.isView === 'function') {\n    return ArrayBuffer.isView(arrbuf);\n  }\n  if (!arrbuf) {\n    return false;\n  }\n  if (arrbuf instanceof DataView) {\n    return true;\n  }\n  if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {\n    return true;\n  }\n  return false;\n}\n// 1. The assert module provides functions that throw\n// AssertionError's when particular conditions are not met. The\n// assert module must conform to the following interface.\n\nvar assert = module.exports = ok;\n\n// 2. The AssertionError is defined in assert.\n// new assert.AssertionError({ message: message,\n//                             actual: actual,\n//                             expected: expected })\n\nvar regex = /\\s*function\\s+([^\\(\\s]*)\\s*/;\n// based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js\nfunction getName(func) {\n  if (!util.isFunction(func)) {\n    return;\n  }\n  if (functionsHaveNames) {\n    return func.name;\n  }\n  var str = func.toString();\n  var match = str.match(regex);\n  return match && match[1];\n}\nassert.AssertionError = function AssertionError(options) {\n  this.name = 'AssertionError';\n  this.actual = options.actual;\n  this.expected = options.expected;\n  this.operator = options.operator;\n  if (options.message) {\n    this.message = options.message;\n    this.generatedMessage = false;\n  } else {\n    this.message = getMessage(this);\n    this.generatedMessage = true;\n  }\n  var stackStartFunction = options.stackStartFunction || fail;\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, stackStartFunction);\n  } else {\n    // non v8 browsers so we can have a stacktrace\n    var err = new Error();\n    if (err.stack) {\n      var out = err.stack;\n\n      // try to strip useless frames\n      var fn_name = getName(stackStartFunction);\n      var idx = out.indexOf('\\n' + fn_name);\n      if (idx >= 0) {\n        // once we have located the function frame\n        // we need to strip out everything before it (and its line)\n        var next_line = out.indexOf('\\n', idx + 1);\n        out = out.substring(next_line + 1);\n      }\n\n      this.stack = out;\n    }\n  }\n};\n\n// assert.AssertionError instanceof Error\nutil.inherits(assert.AssertionError, Error);\n\nfunction truncate(s, n) {\n  if (typeof s === 'string') {\n    return s.length < n ? s : s.slice(0, n);\n  } else {\n    return s;\n  }\n}\nfunction inspect(something) {\n  if (functionsHaveNames || !util.isFunction(something)) {\n    return util.inspect(something);\n  }\n  var rawname = getName(something);\n  var name = rawname ? ': ' + rawname : '';\n  return '[Function' +  name + ']';\n}\nfunction getMessage(self) {\n  return truncate(inspect(self.actual), 128) + ' ' +\n         self.operator + ' ' +\n         truncate(inspect(self.expected), 128);\n}\n\n// At present only the three keys mentioned above are used and\n// understood by the spec. Implementations or sub modules can pass\n// other keys to the AssertionError's constructor - they will be\n// ignored.\n\n// 3. All of the following functions must throw an AssertionError\n// when a corresponding condition is not met, with a message that\n// may be undefined if not provided.  All assertion methods provide\n// both the actual and expected values to the assertion error for\n// display purposes.\n\nfunction fail(actual, expected, message, operator, stackStartFunction) {\n  throw new assert.AssertionError({\n    message: message,\n    actual: actual,\n    expected: expected,\n    operator: operator,\n    stackStartFunction: stackStartFunction\n  });\n}\n\n// EXTENSION! allows for well behaved errors defined elsewhere.\nassert.fail = fail;\n\n// 4. Pure assertion tests whether a value is truthy, as determined\n// by !!guard.\n// assert.ok(guard, message_opt);\n// This statement is equivalent to assert.equal(true, !!guard,\n// message_opt);. To test strictly for the value true, use\n// assert.strictEqual(true, guard, message_opt);.\n\nfunction ok(value, message) {\n  if (!value) fail(value, true, message, '==', assert.ok);\n}\nassert.ok = ok;\n\n// 5. The equality assertion tests shallow, coercive equality with\n// ==.\n// assert.equal(actual, expected, message_opt);\n\nassert.equal = function equal(actual, expected, message) {\n  if (actual != expected) fail(actual, expected, message, '==', assert.equal);\n};\n\n// 6. The non-equality assertion tests for whether two objects are not equal\n// with != assert.notEqual(actual, expected, message_opt);\n\nassert.notEqual = function notEqual(actual, expected, message) {\n  if (actual == expected) {\n    fail(actual, expected, message, '!=', assert.notEqual);\n  }\n};\n\n// 7. The equivalence assertion tests a deep equality relation.\n// assert.deepEqual(actual, expected, message_opt);\n\nassert.deepEqual = function deepEqual(actual, expected, message) {\n  if (!_deepEqual(actual, expected, false)) {\n    fail(actual, expected, message, 'deepEqual', assert.deepEqual);\n  }\n};\n\nassert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {\n  if (!_deepEqual(actual, expected, true)) {\n    fail(actual, expected, message, 'deepStrictEqual', assert.deepStrictEqual);\n  }\n};\n\nfunction _deepEqual(actual, expected, strict, memos) {\n  // 7.1. All identical values are equivalent, as determined by ===.\n  if (actual === expected) {\n    return true;\n  } else if (isBuffer(actual) && isBuffer(expected)) {\n    return compare(actual, expected) === 0;\n\n  // 7.2. If the expected value is a Date object, the actual value is\n  // equivalent if it is also a Date object that refers to the same time.\n  } else if (util.isDate(actual) && util.isDate(expected)) {\n    return actual.getTime() === expected.getTime();\n\n  // 7.3 If the expected value is a RegExp object, the actual value is\n  // equivalent if it is also a RegExp object with the same source and\n  // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).\n  } else if (util.isRegExp(actual) && util.isRegExp(expected)) {\n    return actual.source === expected.source &&\n           actual.global === expected.global &&\n           actual.multiline === expected.multiline &&\n           actual.lastIndex === expected.lastIndex &&\n           actual.ignoreCase === expected.ignoreCase;\n\n  // 7.4. Other pairs that do not both pass typeof value == 'object',\n  // equivalence is determined by ==.\n  } else if ((actual === null || typeof actual !== 'object') &&\n             (expected === null || typeof expected !== 'object')) {\n    return strict ? actual === expected : actual == expected;\n\n  // If both values are instances of typed arrays, wrap their underlying\n  // ArrayBuffers in a Buffer each to increase performance\n  // This optimization requires the arrays to have the same type as checked by\n  // Object.prototype.toString (aka pToString). Never perform binary\n  // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their\n  // bit patterns are not identical.\n  } else if (isView(actual) && isView(expected) &&\n             pToString(actual) === pToString(expected) &&\n             !(actual instanceof Float32Array ||\n               actual instanceof Float64Array)) {\n    return compare(new Uint8Array(actual.buffer),\n                   new Uint8Array(expected.buffer)) === 0;\n\n  // 7.5 For all other Object pairs, including Array objects, equivalence is\n  // determined by having the same number of owned properties (as verified\n  // with Object.prototype.hasOwnProperty.call), the same set of keys\n  // (although not necessarily the same order), equivalent values for every\n  // corresponding key, and an identical 'prototype' property. Note: this\n  // accounts for both named and indexed properties on Arrays.\n  } else if (isBuffer(actual) !== isBuffer(expected)) {\n    return false;\n  } else {\n    memos = memos || {actual: [], expected: []};\n\n    var actualIndex = memos.actual.indexOf(actual);\n    if (actualIndex !== -1) {\n      if (actualIndex === memos.expected.indexOf(expected)) {\n        return true;\n      }\n    }\n\n    memos.actual.push(actual);\n    memos.expected.push(expected);\n\n    return objEquiv(actual, expected, strict, memos);\n  }\n}\n\nfunction isArguments(object) {\n  return Object.prototype.toString.call(object) == '[object Arguments]';\n}\n\nfunction objEquiv(a, b, strict, actualVisitedObjects) {\n  if (a === null || a === undefined || b === null || b === undefined)\n    return false;\n  // if one is a primitive, the other must be same\n  if (util.isPrimitive(a) || util.isPrimitive(b))\n    return a === b;\n  if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b))\n    return false;\n  var aIsArgs = isArguments(a);\n  var bIsArgs = isArguments(b);\n  if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))\n    return false;\n  if (aIsArgs) {\n    a = pSlice.call(a);\n    b = pSlice.call(b);\n    return _deepEqual(a, b, strict);\n  }\n  var ka = objectKeys(a);\n  var kb = objectKeys(b);\n  var key, i;\n  // having the same number of owned properties (keys incorporates\n  // hasOwnProperty)\n  if (ka.length !== kb.length)\n    return false;\n  //the same set of keys (although not necessarily the same order),\n  ka.sort();\n  kb.sort();\n  //~~~cheap key test\n  for (i = ka.length - 1; i >= 0; i--) {\n    if (ka[i] !== kb[i])\n      return false;\n  }\n  //equivalent values for every corresponding key, and\n  //~~~possibly expensive deep test\n  for (i = ka.length - 1; i >= 0; i--) {\n    key = ka[i];\n    if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects))\n      return false;\n  }\n  return true;\n}\n\n// 8. The non-equivalence assertion tests for any deep inequality.\n// assert.notDeepEqual(actual, expected, message_opt);\n\nassert.notDeepEqual = function notDeepEqual(actual, expected, message) {\n  if (_deepEqual(actual, expected, false)) {\n    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);\n  }\n};\n\nassert.notDeepStrictEqual = notDeepStrictEqual;\nfunction notDeepStrictEqual(actual, expected, message) {\n  if (_deepEqual(actual, expected, true)) {\n    fail(actual, expected, message, 'notDeepStrictEqual', notDeepStrictEqual);\n  }\n}\n\n\n// 9. The strict equality assertion tests strict equality, as determined by ===.\n// assert.strictEqual(actual, expected, message_opt);\n\nassert.strictEqual = function strictEqual(actual, expected, message) {\n  if (actual !== expected) {\n    fail(actual, expected, message, '===', assert.strictEqual);\n  }\n};\n\n// 10. The strict non-equality assertion tests for strict inequality, as\n// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);\n\nassert.notStrictEqual = function notStrictEqual(actual, expected, message) {\n  if (actual === expected) {\n    fail(actual, expected, message, '!==', assert.notStrictEqual);\n  }\n};\n\nfunction expectedException(actual, expected) {\n  if (!actual || !expected) {\n    return false;\n  }\n\n  if (Object.prototype.toString.call(expected) == '[object RegExp]') {\n    return expected.test(actual);\n  }\n\n  try {\n    if (actual instanceof expected) {\n      return true;\n    }\n  } catch (e) {\n    // Ignore.  The instanceof check doesn't work for arrow functions.\n  }\n\n  if (Error.isPrototypeOf(expected)) {\n    return false;\n  }\n\n  return expected.call({}, actual) === true;\n}\n\nfunction _tryBlock(block) {\n  var error;\n  try {\n    block();\n  } catch (e) {\n    error = e;\n  }\n  return error;\n}\n\nfunction _throws(shouldThrow, block, expected, message) {\n  var actual;\n\n  if (typeof block !== 'function') {\n    throw new TypeError('\"block\" argument must be a function');\n  }\n\n  if (typeof expected === 'string') {\n    message = expected;\n    expected = null;\n  }\n\n  actual = _tryBlock(block);\n\n  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +\n            (message ? ' ' + message : '.');\n\n  if (shouldThrow && !actual) {\n    fail(actual, expected, 'Missing expected exception' + message);\n  }\n\n  var userProvidedMessage = typeof message === 'string';\n  var isUnwantedException = !shouldThrow && util.isError(actual);\n  var isUnexpectedException = !shouldThrow && actual && !expected;\n\n  if ((isUnwantedException &&\n      userProvidedMessage &&\n      expectedException(actual, expected)) ||\n      isUnexpectedException) {\n    fail(actual, expected, 'Got unwanted exception' + message);\n  }\n\n  if ((shouldThrow && actual && expected &&\n      !expectedException(actual, expected)) || (!shouldThrow && actual)) {\n    throw actual;\n  }\n}\n\n// 11. Expected to throw an error:\n// assert.throws(block, Error_opt, message_opt);\n\nassert.throws = function(block, /*optional*/error, /*optional*/message) {\n  _throws(true, block, error, message);\n};\n\n// EXTENSION! This is annoying to write outside this module.\nassert.doesNotThrow = function(block, /*optional*/error, /*optional*/message) {\n  _throws(false, block, error, message);\n};\n\nassert.ifError = function(err) { if (err) throw err; };\n\n// Expose a strict only variant of assert\nfunction strict(value, message) {\n  if (!value) fail(value, true, message, '==', strict);\n}\nassert.strict = objectAssign(strict, assert, {\n  equal: assert.strictEqual,\n  deepEqual: assert.deepStrictEqual,\n  notEqual: assert.notStrictEqual,\n  notDeepEqual: assert.notDeepStrictEqual\n});\nassert.strict.strict = assert.strict;\n\nvar objectKeys = Object.keys || function (obj) {\n  var keys = [];\n  for (var key in obj) {\n    if (hasOwn.call(obj, key)) keys.push(key);\n  }\n  return keys;\n};\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./api\"), exports);\n// export * from './basetx';\n__exportStar(require(\"./constants\"), exports);\n__exportStar(require(\"./credentials\"), exports);\n__exportStar(require(\"./inputs\"), exports);\n__exportStar(require(\"./exporttx\"), exports);\n__exportStar(require(\"./importtx\"), exports);\n__exportStar(require(\"./keychain\"), exports);\n__exportStar(require(\"./outputs\"), exports);\n__exportStar(require(\"./tx\"), exports);\n__exportStar(require(\"./utxos\"), exports);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpcy9ldm0vaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUEsd0NBQXNCO0FBQ3RCLDRCQUE0QjtBQUM1Qiw4Q0FBNEI7QUFDNUIsZ0RBQThCO0FBQzlCLDJDQUF5QjtBQUN6Qiw2Q0FBMkI7QUFDM0IsNkNBQTJCO0FBQzNCLDZDQUEyQjtBQUMzQiw0Q0FBMEI7QUFDMUIsdUNBQXFCO0FBQ3JCLDBDQUF3QiIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gJy4vYXBpJztcbi8vIGV4cG9ydCAqIGZyb20gJy4vYmFzZXR4JztcbmV4cG9ydCAqIGZyb20gJy4vY29uc3RhbnRzJztcbmV4cG9ydCAqIGZyb20gJy4vY3JlZGVudGlhbHMnO1xuZXhwb3J0ICogZnJvbSAnLi9pbnB1dHMnO1xuZXhwb3J0ICogZnJvbSAnLi9leHBvcnR0eCc7XG5leHBvcnQgKiBmcm9tICcuL2ltcG9ydHR4JztcbmV4cG9ydCAqIGZyb20gJy4va2V5Y2hhaW4nO1xuZXhwb3J0ICogZnJvbSAnLi9vdXRwdXRzJztcbmV4cG9ydCAqIGZyb20gJy4vdHgnO1xuZXhwb3J0ICogZnJvbSAnLi91dHhvcyc7Il19","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AdminAPI = void 0;\nconst jrpcapi_1 = require(\"../../common/jrpcapi\");\n/**\n * Class for interacting with a node's AdminAPI.\n *\n * @category RPCAPIs\n *\n * @remarks This extends the [[JRPCAPI]] class. This class should not be directly called.\n * Instead, use the [[Avalanche.addAPI]] function to register this interface with Avalanche.\n */\nclass AdminAPI extends jrpcapi_1.JRPCAPI {\n    /**\n       * This class should not be instantiated directly. Instead use the [[Avalanche.addAPI]]\n       * method.\n       *\n       * @param core A reference to the Avalanche class\n       * @param baseurl Defaults to the string \"/ext/admin\" as the path to rpc's baseurl\n       */\n    constructor(core, baseurl = '/ext/admin') {\n        super(core, baseurl);\n        /**\n           * Assign an API an alias, a different endpoint for the API. The original endpoint will still\n           * work. This change only affects this node; other nodes will not know about this alias.\n           *\n           * @param endpoint The original endpoint of the API. endpoint should only include the part of\n           * the endpoint after /ext/\n           * @param alias The API being aliased can now be called at ext/alias\n           *\n           * @returns Returns a Promise<boolean> containing success, true for success, false for failure.\n           */\n        this.alias = (endpoint, alias) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                endpoint,\n                alias,\n            };\n            return this.callMethod('admin.alias', params)\n                .then((response) => response.data.result.success);\n        });\n        /**\n           * Give a blockchain an alias, a different name that can be used any place the blockchain’s\n           * ID is used.\n           *\n           * @param endpoint The blockchain’s ID\n           * @param alias Can now be used in place of the blockchain’s ID (in API endpoints, for example)\n           *\n           * @returns Returns a Promise<boolean> containing success, true for success, false for failure.\n           */\n        this.aliasChain = (chain, alias) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                chain,\n                alias,\n            };\n            return this.callMethod('admin.aliasChain', params)\n                .then((response) => response.data.result.success);\n        });\n        /**\n           * Dump the mutex statistics of the node to the specified file.\n           *\n           * @returns Promise for a boolean that is true on success.\n           */\n        this.lockProfile = () => __awaiter(this, void 0, void 0, function* () {\n            const params = {};\n            return this.callMethod('admin.lockProfile', params)\n                .then((response) => response.data.result.success);\n        });\n        /**\n           * Dump the current memory footprint of the node to the specified file.\n           *\n           * @returns Promise for a boolean that is true on success.\n           */\n        this.memoryProfile = () => __awaiter(this, void 0, void 0, function* () {\n            const params = {};\n            return this.callMethod('admin.memoryProfile', params)\n                .then((response) => response.data.result.success);\n        });\n        /**\n           * Start profiling the cpu utilization of the node. Will dump the profile information into\n           * the specified file on stop.\n           *\n           * @returns Promise for a boolean that is true on success.\n           */\n        this.startCPUProfiler = () => __awaiter(this, void 0, void 0, function* () {\n            const params = {};\n            return this.callMethod('admin.startCPUProfiler', params)\n                .then((response) => response.data.result.success);\n        });\n        /**\n           * Stop the CPU profile that was previously started.\n           *\n           * @returns Promise for a boolean that is true on success.\n           */\n        this.stopCPUProfiler = () => __awaiter(this, void 0, void 0, function* () {\n            return this.callMethod('admin.stopCPUProfiler')\n                .then((response) => response.data.result.success);\n        });\n    }\n}\nexports.AdminAPI = AdminAPI;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2FwaXMvYWRtaW4vYXBpLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUtBLGtEQUErQztBQUkvQzs7Ozs7OztHQU9HO0FBRUgsTUFBYSxRQUFTLFNBQVEsaUJBQU87SUFpRm5DOzs7Ozs7U0FNSztJQUNMLFlBQVksSUFBa0IsRUFBRSxVQUFpQixZQUFZO1FBQUksS0FBSyxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztRQXRGdEY7Ozs7Ozs7OzthQVNLO1FBQ0wsVUFBSyxHQUFHLENBQU8sUUFBZSxFQUFFLEtBQVksRUFBbUIsRUFBRTtZQUMvRCxNQUFNLE1BQU0sR0FBTztnQkFDakIsUUFBUTtnQkFDUixLQUFLO2FBQ04sQ0FBQztZQUNGLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLEVBQUUsTUFBTSxDQUFDO2lCQUMxQyxJQUFJLENBQUMsQ0FBQyxRQUE0QixFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMxRSxDQUFDLENBQUEsQ0FBQztRQUVGOzs7Ozs7OzthQVFLO1FBQ0wsZUFBVSxHQUFHLENBQU8sS0FBWSxFQUFFLEtBQVksRUFBbUIsRUFBRTtZQUNqRSxNQUFNLE1BQU0sR0FBTztnQkFDakIsS0FBSztnQkFDTCxLQUFLO2FBQ04sQ0FBQztZQUNGLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxrQkFBa0IsRUFBRSxNQUFNLENBQUM7aUJBQy9DLElBQUksQ0FBQyxDQUFDLFFBQTRCLEVBQUUsRUFBRSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzFFLENBQUMsQ0FBQSxDQUFDO1FBRUY7Ozs7YUFJSztRQUNMLGdCQUFXLEdBQUcsR0FBMEIsRUFBRTtZQUN4QyxNQUFNLE1BQU0sR0FBTyxFQUFFLENBQUM7WUFDdEIsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLG1CQUFtQixFQUFFLE1BQU0sQ0FBQztpQkFDaEQsSUFBSSxDQUFDLENBQUMsUUFBNEIsRUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDMUUsQ0FBQyxDQUFBLENBQUM7UUFFRjs7OzthQUlLO1FBQ0wsa0JBQWEsR0FBRyxHQUEwQixFQUFFO1lBQzFDLE1BQU0sTUFBTSxHQUFPLEVBQUUsQ0FBQztZQUN0QixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMscUJBQXFCLEVBQUUsTUFBTSxDQUFDO2lCQUNsRCxJQUFJLENBQUMsQ0FBQyxRQUE0QixFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMxRSxDQUFDLENBQUEsQ0FBQztRQUVGOzs7OzthQUtLO1FBQ0wscUJBQWdCLEdBQUcsR0FBMEIsRUFBRTtZQUM3QyxNQUFNLE1BQU0sR0FBTyxFQUFFLENBQUM7WUFDdEIsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLHdCQUF3QixFQUFFLE1BQU0sQ0FBQztpQkFDckQsSUFBSSxDQUFDLENBQUMsUUFBNEIsRUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDMUUsQ0FBQyxDQUFBLENBQUM7UUFFRjs7OzthQUlLO1FBQ0wsb0JBQWUsR0FBRyxHQUEwQixFQUFFO1lBQUMsT0FBQSxJQUFJLENBQUMsVUFBVSxDQUFDLHVCQUF1QixDQUFDO2lCQUNwRixJQUFJLENBQUMsQ0FBQyxRQUE0QixFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQTtVQUFBLENBQUM7SUFTZSxDQUFDO0NBQ3pGO0FBekZELDRCQXlGQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHBhY2thZ2VEb2N1bWVudGF0aW9uXG4gKiBAbW9kdWxlIEFQSS1BZG1pblxuICovXG5pbXBvcnQgQXZhbGFuY2hlQ29yZSBmcm9tICcuLi8uLi9hdmFsYW5jaGUnO1xuaW1wb3J0IHsgSlJQQ0FQSSB9IGZyb20gJy4uLy4uL2NvbW1vbi9qcnBjYXBpJztcbmltcG9ydCB7IFJlcXVlc3RSZXNwb25zZURhdGEgfSBmcm9tICcuLi8uLi9jb21tb24vYXBpYmFzZSc7XG5cblxuLyoqXG4gKiBDbGFzcyBmb3IgaW50ZXJhY3Rpbmcgd2l0aCBhIG5vZGUncyBBZG1pbkFQSS5cbiAqXG4gKiBAY2F0ZWdvcnkgUlBDQVBJc1xuICpcbiAqIEByZW1hcmtzIFRoaXMgZXh0ZW5kcyB0aGUgW1tKUlBDQVBJXV0gY2xhc3MuIFRoaXMgY2xhc3Mgc2hvdWxkIG5vdCBiZSBkaXJlY3RseSBjYWxsZWQuXG4gKiBJbnN0ZWFkLCB1c2UgdGhlIFtbQXZhbGFuY2hlLmFkZEFQSV1dIGZ1bmN0aW9uIHRvIHJlZ2lzdGVyIHRoaXMgaW50ZXJmYWNlIHdpdGggQXZhbGFuY2hlLlxuICovXG5cbmV4cG9ydCBjbGFzcyBBZG1pbkFQSSBleHRlbmRzIEpSUENBUEkge1xuXG4gIC8qKlxuICAgICAqIEFzc2lnbiBhbiBBUEkgYW4gYWxpYXMsIGEgZGlmZmVyZW50IGVuZHBvaW50IGZvciB0aGUgQVBJLiBUaGUgb3JpZ2luYWwgZW5kcG9pbnQgd2lsbCBzdGlsbFxuICAgICAqIHdvcmsuIFRoaXMgY2hhbmdlIG9ubHkgYWZmZWN0cyB0aGlzIG5vZGU7IG90aGVyIG5vZGVzIHdpbGwgbm90IGtub3cgYWJvdXQgdGhpcyBhbGlhcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBlbmRwb2ludCBUaGUgb3JpZ2luYWwgZW5kcG9pbnQgb2YgdGhlIEFQSS4gZW5kcG9pbnQgc2hvdWxkIG9ubHkgaW5jbHVkZSB0aGUgcGFydCBvZlxuICAgICAqIHRoZSBlbmRwb2ludCBhZnRlciAvZXh0L1xuICAgICAqIEBwYXJhbSBhbGlhcyBUaGUgQVBJIGJlaW5nIGFsaWFzZWQgY2FuIG5vdyBiZSBjYWxsZWQgYXQgZXh0L2FsaWFzXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBSZXR1cm5zIGEgUHJvbWlzZTxib29sZWFuPiBjb250YWluaW5nIHN1Y2Nlc3MsIHRydWUgZm9yIHN1Y2Nlc3MsIGZhbHNlIGZvciBmYWlsdXJlLlxuICAgICAqL1xuICBhbGlhcyA9IGFzeW5jIChlbmRwb2ludDpzdHJpbmcsIGFsaWFzOnN0cmluZyk6UHJvbWlzZTxib29sZWFuPiA9PiB7XG4gICAgY29uc3QgcGFyYW1zOmFueSA9IHtcbiAgICAgIGVuZHBvaW50LFxuICAgICAgYWxpYXMsXG4gICAgfTtcbiAgICByZXR1cm4gdGhpcy5jYWxsTWV0aG9kKCdhZG1pbi5hbGlhcycsIHBhcmFtcylcbiAgICAgIC50aGVuKChyZXNwb25zZTpSZXF1ZXN0UmVzcG9uc2VEYXRhKSA9PiByZXNwb25zZS5kYXRhLnJlc3VsdC5zdWNjZXNzKTtcbiAgfTtcblxuICAvKipcbiAgICAgKiBHaXZlIGEgYmxvY2tjaGFpbiBhbiBhbGlhcywgYSBkaWZmZXJlbnQgbmFtZSB0aGF0IGNhbiBiZSB1c2VkIGFueSBwbGFjZSB0aGUgYmxvY2tjaGFpbuKAmXNcbiAgICAgKiBJRCBpcyB1c2VkLlxuICAgICAqXG4gICAgICogQHBhcmFtIGVuZHBvaW50IFRoZSBibG9ja2NoYWlu4oCZcyBJRFxuICAgICAqIEBwYXJhbSBhbGlhcyBDYW4gbm93IGJlIHVzZWQgaW4gcGxhY2Ugb2YgdGhlIGJsb2NrY2hhaW7igJlzIElEIChpbiBBUEkgZW5kcG9pbnRzLCBmb3IgZXhhbXBsZSlcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIFJldHVybnMgYSBQcm9taXNlPGJvb2xlYW4+IGNvbnRhaW5pbmcgc3VjY2VzcywgdHJ1ZSBmb3Igc3VjY2VzcywgZmFsc2UgZm9yIGZhaWx1cmUuXG4gICAgICovXG4gIGFsaWFzQ2hhaW4gPSBhc3luYyAoY2hhaW46c3RyaW5nLCBhbGlhczpzdHJpbmcpOlByb21pc2U8Ym9vbGVhbj4gPT4ge1xuICAgIGNvbnN0IHBhcmFtczphbnkgPSB7XG4gICAgICBjaGFpbixcbiAgICAgIGFsaWFzLFxuICAgIH07XG4gICAgcmV0dXJuIHRoaXMuY2FsbE1ldGhvZCgnYWRtaW4uYWxpYXNDaGFpbicsIHBhcmFtcylcbiAgICAgIC50aGVuKChyZXNwb25zZTpSZXF1ZXN0UmVzcG9uc2VEYXRhKSA9PiByZXNwb25zZS5kYXRhLnJlc3VsdC5zdWNjZXNzKTtcbiAgfTtcblxuICAvKipcbiAgICAgKiBEdW1wIHRoZSBtdXRleCBzdGF0aXN0aWNzIG9mIHRoZSBub2RlIHRvIHRoZSBzcGVjaWZpZWQgZmlsZS5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIFByb21pc2UgZm9yIGEgYm9vbGVhbiB0aGF0IGlzIHRydWUgb24gc3VjY2Vzcy5cbiAgICAgKi9cbiAgbG9ja1Byb2ZpbGUgPSBhc3luYyAoKTpQcm9taXNlPGJvb2xlYW4+ID0+IHtcbiAgICBjb25zdCBwYXJhbXM6YW55ID0ge307XG4gICAgcmV0dXJuIHRoaXMuY2FsbE1ldGhvZCgnYWRtaW4ubG9ja1Byb2ZpbGUnLCBwYXJhbXMpXG4gICAgICAudGhlbigocmVzcG9uc2U6UmVxdWVzdFJlc3BvbnNlRGF0YSkgPT4gcmVzcG9uc2UuZGF0YS5yZXN1bHQuc3VjY2Vzcyk7XG4gIH07XG5cbiAgLyoqXG4gICAgICogRHVtcCB0aGUgY3VycmVudCBtZW1vcnkgZm9vdHByaW50IG9mIHRoZSBub2RlIHRvIHRoZSBzcGVjaWZpZWQgZmlsZS5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIFByb21pc2UgZm9yIGEgYm9vbGVhbiB0aGF0IGlzIHRydWUgb24gc3VjY2Vzcy5cbiAgICAgKi9cbiAgbWVtb3J5UHJvZmlsZSA9IGFzeW5jICgpOlByb21pc2U8Ym9vbGVhbj4gPT4ge1xuICAgIGNvbnN0IHBhcmFtczphbnkgPSB7fTtcbiAgICByZXR1cm4gdGhpcy5jYWxsTWV0aG9kKCdhZG1pbi5tZW1vcnlQcm9maWxlJywgcGFyYW1zKVxuICAgICAgLnRoZW4oKHJlc3BvbnNlOlJlcXVlc3RSZXNwb25zZURhdGEpID0+IHJlc3BvbnNlLmRhdGEucmVzdWx0LnN1Y2Nlc3MpO1xuICB9O1xuXG4gIC8qKlxuICAgICAqIFN0YXJ0IHByb2ZpbGluZyB0aGUgY3B1IHV0aWxpemF0aW9uIG9mIHRoZSBub2RlLiBXaWxsIGR1bXAgdGhlIHByb2ZpbGUgaW5mb3JtYXRpb24gaW50b1xuICAgICAqIHRoZSBzcGVjaWZpZWQgZmlsZSBvbiBzdG9wLlxuICAgICAqXG4gICAgICogQHJldHVybnMgUHJvbWlzZSBmb3IgYSBib29sZWFuIHRoYXQgaXMgdHJ1ZSBvbiBzdWNjZXNzLlxuICAgICAqL1xuICBzdGFydENQVVByb2ZpbGVyID0gYXN5bmMgKCk6UHJvbWlzZTxib29sZWFuPiA9PiB7XG4gICAgY29uc3QgcGFyYW1zOmFueSA9IHt9O1xuICAgIHJldHVybiB0aGlzLmNhbGxNZXRob2QoJ2FkbWluLnN0YXJ0Q1BVUHJvZmlsZXInLCBwYXJhbXMpXG4gICAgICAudGhlbigocmVzcG9uc2U6UmVxdWVzdFJlc3BvbnNlRGF0YSkgPT4gcmVzcG9uc2UuZGF0YS5yZXN1bHQuc3VjY2Vzcyk7XG4gIH07XG5cbiAgLyoqXG4gICAgICogU3RvcCB0aGUgQ1BVIHByb2ZpbGUgdGhhdCB3YXMgcHJldmlvdXNseSBzdGFydGVkLlxuICAgICAqXG4gICAgICogQHJldHVybnMgUHJvbWlzZSBmb3IgYSBib29sZWFuIHRoYXQgaXMgdHJ1ZSBvbiBzdWNjZXNzLlxuICAgICAqL1xuICBzdG9wQ1BVUHJvZmlsZXIgPSBhc3luYyAoKTpQcm9taXNlPGJvb2xlYW4+ID0+IHRoaXMuY2FsbE1ldGhvZCgnYWRtaW4uc3RvcENQVVByb2ZpbGVyJylcbiAgICAudGhlbigocmVzcG9uc2U6UmVxdWVzdFJlc3BvbnNlRGF0YSkgPT4gcmVzcG9uc2UuZGF0YS5yZXN1bHQuc3VjY2Vzcyk7XG5cbiAgLyoqXG4gICAgICogVGhpcyBjbGFzcyBzaG91bGQgbm90IGJlIGluc3RhbnRpYXRlZCBkaXJlY3RseS4gSW5zdGVhZCB1c2UgdGhlIFtbQXZhbGFuY2hlLmFkZEFQSV1dXG4gICAgICogbWV0aG9kLlxuICAgICAqXG4gICAgICogQHBhcmFtIGNvcmUgQSByZWZlcmVuY2UgdG8gdGhlIEF2YWxhbmNoZSBjbGFzc1xuICAgICAqIEBwYXJhbSBiYXNldXJsIERlZmF1bHRzIHRvIHRoZSBzdHJpbmcgXCIvZXh0L2FkbWluXCIgYXMgdGhlIHBhdGggdG8gcnBjJ3MgYmFzZXVybFxuICAgICAqL1xuICBjb25zdHJ1Y3Rvcihjb3JlOkF2YWxhbmNoZUNvcmUsIGJhc2V1cmw6c3RyaW5nID0gJy9leHQvYWRtaW4nKSB7IHN1cGVyKGNvcmUsIGJhc2V1cmwpOyB9XG59XG4iXX0=","\"use strict\";\n/**\n * @packageDocumentation\n * @module API-EVM-UTXOs\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UTXOSet = exports.AssetAmountDestination = exports.UTXO = void 0;\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst outputs_1 = require(\"./outputs\");\nconst constants_1 = require(\"./constants\");\nconst inputs_1 = require(\"./inputs\");\nconst helperfunctions_1 = require(\"../../utils/helperfunctions\");\nconst utxos_1 = require(\"../../common/utxos\");\nconst constants_2 = require(\"../../utils/constants\");\nconst assetamount_1 = require(\"../../common/assetamount\");\nconst serialization_1 = require(\"../../utils/serialization\");\nconst tx_1 = require(\"./tx\");\nconst importtx_1 = require(\"./importtx\");\nconst exporttx_1 = require(\"./exporttx\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serializer = serialization_1.Serialization.getInstance();\n/**\n * Class for representing a single UTXO.\n */\nclass UTXO extends utxos_1.StandardUTXO {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"UTXO\";\n        this._typeID = undefined;\n    }\n    //serialize is inherited\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.output = outputs_1.SelectOutputClass(fields[\"output\"][\"_typeID\"]);\n        this.output.deserialize(fields[\"output\"], encoding);\n    }\n    fromBuffer(bytes, offset = 0) {\n        this.codecid = bintools.copyFrom(bytes, offset, offset + 2);\n        offset += 2;\n        this.txid = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        this.outputidx = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        this.assetid = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        const outputid = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);\n        offset += 4;\n        this.output = outputs_1.SelectOutputClass(outputid);\n        return this.output.fromBuffer(bytes, offset);\n    }\n    /**\n     * Takes a base-58 string containing a [[UTXO]], parses it, populates the class, and returns the length of the StandardUTXO in bytes.\n     *\n     * @param serialized A base-58 string containing a raw [[UTXO]]\n     *\n     * @returns The length of the raw [[UTXO]]\n     *\n     * @remarks\n     * unlike most fromStrings, it expects the string to be serialized in cb58 format\n     */\n    fromString(serialized) {\n        /* istanbul ignore next */\n        return this.fromBuffer(bintools.cb58Decode(serialized));\n    }\n    /**\n     * Returns a base-58 representation of the [[UTXO]].\n     *\n     * @remarks\n     * unlike most toStrings, this returns in cb58 serialization format\n     */\n    toString() {\n        /* istanbul ignore next */\n        return bintools.cb58Encode(this.toBuffer());\n    }\n    clone() {\n        const utxo = new UTXO();\n        utxo.fromBuffer(this.toBuffer());\n        return utxo;\n    }\n    create(codecID = constants_1.EVMConstants.LATESTCODEC, txID = undefined, outputidx = undefined, assetID = undefined, output = undefined) {\n        return new UTXO(codecID, txID, outputidx, assetID, output);\n    }\n}\nexports.UTXO = UTXO;\nclass AssetAmountDestination extends assetamount_1.StandardAssetAmountDestination {\n}\nexports.AssetAmountDestination = AssetAmountDestination;\n/**\n * Class representing a set of [[UTXO]]s.\n */\nclass UTXOSet extends utxos_1.StandardUTXOSet {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"UTXOSet\";\n        this._typeID = undefined;\n        this.getMinimumSpendable = (aad, asOf = helperfunctions_1.UnixNow(), locktime = new bn_js_1.default(0), threshold = 1) => {\n            const utxoArray = this.getAllUTXOs();\n            const outids = {};\n            for (let i = 0; i < utxoArray.length && !aad.canComplete(); i++) {\n                const u = utxoArray[i];\n                const assetKey = u.getAssetID().toString(\"hex\");\n                const fromAddresses = aad.getSenders();\n                if (u.getOutput() instanceof outputs_1.AmountOutput && aad.assetExists(assetKey) && u.getOutput().meetsThreshold(fromAddresses, asOf)) {\n                    const am = aad.getAssetAmount(assetKey);\n                    if (!am.isFinished()) {\n                        const uout = u.getOutput();\n                        outids[assetKey] = uout.getOutputID();\n                        const amount = uout.getAmount();\n                        am.spendAmount(amount);\n                        const txid = u.getTxID();\n                        const outputidx = u.getOutputIdx();\n                        const input = new inputs_1.SECPTransferInput(amount);\n                        const xferin = new inputs_1.TransferableInput(txid, outputidx, u.getAssetID(), input);\n                        const spenders = uout.getSpenders(fromAddresses, asOf);\n                        spenders.forEach((spender) => {\n                            const idx = uout.getAddressIdx(spender);\n                            if (idx === -1) {\n                                /* istanbul ignore next */\n                                throw new Error(`Error - UTXOSet.getMinimumSpendable: no such address in output: ${spender}`);\n                            }\n                            xferin.getInput().addSignatureIdx(idx, spender);\n                        });\n                        aad.addInput(xferin);\n                    }\n                    else if (aad.assetExists(assetKey) && !(u.getOutput() instanceof outputs_1.AmountOutput)) {\n                        /**\n                         * Leaving the below lines, not simply for posterity, but for clarification.\n                         * AssetIDs may have mixed OutputTypes.\n                         * Some of those OutputTypes may implement AmountOutput.\n                         * Others may not.\n                         * Simply continue in this condition.\n                         */\n                        /*return new Error('Error - UTXOSet.getMinimumSpendable: outputID does not '\n                          + `implement AmountOutput: ${u.getOutput().getOutputID}`);*/\n                        continue;\n                    }\n                }\n            }\n            if (!aad.canComplete()) {\n                return new Error(`Error - UTXOSet.getMinimumSpendable: insufficient funds to create the transaction`);\n            }\n            const amounts = aad.getAmounts();\n            const zero = new bn_js_1.default(0);\n            for (let i = 0; i < amounts.length; i++) {\n                const assetKey = amounts[i].getAssetIDString();\n                const amount = amounts[i].getAmount();\n                if (amount.gt(zero)) {\n                    const spendout = outputs_1.SelectOutputClass(outids[assetKey], amount, aad.getDestinations(), locktime, threshold);\n                    const xferout = new outputs_1.TransferableOutput(amounts[i].getAssetID(), spendout);\n                    aad.addOutput(xferout);\n                }\n                const change = amounts[i].getChange();\n                if (change.gt(zero)) {\n                    const changeout = outputs_1.SelectOutputClass(outids[assetKey], change, aad.getChangeAddresses());\n                    const chgxferout = new outputs_1.TransferableOutput(amounts[i].getAssetID(), changeout);\n                    aad.addChange(chgxferout);\n                }\n            }\n            return undefined;\n        };\n        /**\n          * Creates an unsigned ImportTx transaction.\n          *\n          * @param networkID The number representing NetworkID of the node\n          * @param blockchainID The {@link https://github.com/feross/buffer|Buffer} representing the BlockchainID for the transaction\n          * @param toAddresses The addresses to send the funds\n          * @param fromAddresses The addresses being used to send the funds from the UTXOs {@link https://github.com/feross/buffer|Buffer}\n          * @param importIns An array of [[TransferableInput]]s being imported\n          * @param sourceChain A {@link https://github.com/feross/buffer|Buffer} for the chainid where the imports are coming from.\n          * @param fee Optional. The amount of fees to burn in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}. Fee will come from the inputs first, if they can.\n          * @param feeAssetID Optional. The assetID of the fees being burned.\n          * @param memo Optional contains arbitrary bytes, up to 256 bytes\n          * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n          * @param locktime Optional. The locktime field created in the resulting outputs\n          * @param threshold Optional. The number of signatures required to spend the funds in the resultant UTXO\n          * @returns An unsigned transaction created from the passed in parameters.\n          *\n          */\n        this.buildImportTx = (networkID, blockchainID, toAddresses, fromAddresses, atomics, sourceChain = undefined, fee = undefined, feeAssetID = undefined) => {\n            const zero = new bn_js_1.default(0);\n            let ins = [];\n            const outs = [];\n            if (typeof fee === \"undefined\") {\n                fee = zero.clone();\n            }\n            let feepaid = new bn_js_1.default(0);\n            const feeAssetStr = feeAssetID.toString(\"hex\");\n            atomics.forEach((atomic) => {\n                const assetID = atomic.getAssetID();\n                const output = atomic.getOutput();\n                const amt = output.getAmount().clone();\n                let infeeamount = amt.clone();\n                const assetStr = assetID.toString(\"hex\");\n                if (typeof feeAssetID !== \"undefined\" &&\n                    fee.gt(zero) &&\n                    feepaid.lt(fee) &&\n                    assetStr === feeAssetStr) {\n                    feepaid = feepaid.add(infeeamount);\n                    if (feepaid.gt(fee)) {\n                        infeeamount = feepaid.sub(fee);\n                        feepaid = fee.clone();\n                    }\n                    else {\n                        infeeamount = zero.clone();\n                    }\n                }\n                const txid = atomic.getTxID();\n                const outputidx = atomic.getOutputIdx();\n                const input = new inputs_1.SECPTransferInput(amt);\n                const xferin = new inputs_1.TransferableInput(txid, outputidx, assetID, input);\n                const from = output.getAddresses();\n                const spenders = output.getSpenders(from);\n                spenders.forEach((spender) => {\n                    const idx = output.getAddressIdx(spender);\n                    if (idx === -1) {\n                        /* istanbul ignore next */\n                        throw new Error(`Error - UTXOSet.buildImportTx: no such address in output: ${spender}`);\n                    }\n                    xferin.getInput().addSignatureIdx(idx, spender);\n                });\n                ins.push(xferin);\n                // lexicographically sort array\n                ins = ins.sort(inputs_1.TransferableInput.comparator());\n                // add extra outputs for each amount (calculated from the imported inputs), minus fees\n                if (infeeamount.gt(zero)) {\n                    const evmOutput = new outputs_1.EVMOutput(toAddresses[0], amt, assetID);\n                    outs.push(evmOutput);\n                }\n            });\n            const importTx = new importtx_1.ImportTx(networkID, blockchainID, sourceChain, ins, outs);\n            return new tx_1.UnsignedTx(importTx);\n        };\n        /**\n        * Creates an unsigned ExportTx transaction.\n        *\n        * @param networkID The number representing NetworkID of the node\n        * @param blockchainID The {@link https://github.com/feross/buffer|Buffer} representing the BlockchainID for the transaction\n        * @param amount The amount being exported as a {@link https://github.com/indutny/bn.js/|BN}\n        * @param avaxAssetID {@link https://github.com/feross/buffer|Buffer} of the AssetID for AVAX\n        * @param toAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who recieves the AVAX\n        * @param fromAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who owns the AVAX\n        * @param changeAddresses Optional. The addresses that can spend the change remaining from the spent UTXOs.\n        * @param destinationChain Optional. A {@link https://github.com/feross/buffer|Buffer} for the chainid where to send the asset.\n        * @param fee Optional. The amount of fees to burn in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}\n        * @param feeAssetID Optional. The assetID of the fees being burned.\n        * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n        * @param locktime Optional. The locktime field created in the resulting outputs\n        * @param threshold Optional. The number of signatures required to spend the funds in the resultant UTXO\n        * @returns An unsigned transaction created from the passed in parameters.\n        *\n        */\n        this.buildExportTx = (networkID, blockchainID, amount, avaxAssetID, toAddresses, fromAddresses, changeAddresses = undefined, destinationChain = undefined, fee = undefined, feeAssetID = undefined, asOf = helperfunctions_1.UnixNow(), locktime = new bn_js_1.default(0), threshold = 1) => {\n            let ins = [];\n            let outs = [];\n            let exportouts = [];\n            if (typeof changeAddresses === \"undefined\") {\n                changeAddresses = toAddresses;\n            }\n            const zero = new bn_js_1.default(0);\n            if (amount.eq(zero)) {\n                return undefined;\n            }\n            if (typeof feeAssetID === 'undefined') {\n                feeAssetID = avaxAssetID;\n            }\n            else if (feeAssetID.toString('hex') !== avaxAssetID.toString('hex')) {\n                /* istanbul ignore next */\n                throw new Error('Error - UTXOSet.buildExportTx: feeAssetID must match avaxAssetID');\n            }\n            if (typeof destinationChain === 'undefined') {\n                destinationChain = bintools.cb58Decode(constants_2.PlatformChainID);\n            }\n            const aad = new AssetAmountDestination(toAddresses, fromAddresses, changeAddresses);\n            if (avaxAssetID.toString('hex') === feeAssetID.toString('hex')) {\n                aad.addAssetAmount(avaxAssetID, amount, fee);\n            }\n            else {\n                aad.addAssetAmount(avaxAssetID, amount, zero);\n                if (this._feeCheck(fee, feeAssetID)) {\n                    aad.addAssetAmount(feeAssetID, zero, fee);\n                }\n            }\n            const success = this.getMinimumSpendable(aad, asOf, locktime, threshold);\n            if (typeof success === 'undefined') {\n                outs = aad.getChangeOutputs();\n                exportouts = aad.getOutputs();\n            }\n            else {\n                throw success;\n            }\n            const exportTx = new exporttx_1.ExportTx(networkID, blockchainID, destinationChain, ins, exportouts);\n            return new tx_1.UnsignedTx(exportTx);\n        };\n    }\n    //serialize is inherited\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        let utxos = {};\n        for (let utxoid in fields[\"utxos\"]) {\n            let utxoidCleaned = serializer.decoder(utxoid, encoding, \"base58\", \"base58\");\n            utxos[utxoidCleaned] = new UTXO();\n            utxos[utxoidCleaned].deserialize(fields[\"utxos\"][utxoid], encoding);\n        }\n        let addressUTXOs = {};\n        for (let address in fields[\"addressUTXOs\"]) {\n            let addressCleaned = serializer.decoder(address, encoding, \"cb58\", \"hex\");\n            let utxobalance = {};\n            for (let utxoid in fields[\"addressUTXOs\"][address]) {\n                let utxoidCleaned = serializer.decoder(utxoid, encoding, \"base58\", \"base58\");\n                utxobalance[utxoidCleaned] = serializer.decoder(fields[\"addressUTXOs\"][address][utxoid], encoding, \"decimalString\", \"BN\");\n            }\n            addressUTXOs[addressCleaned] = utxobalance;\n        }\n        this.utxos = utxos;\n        this.addressUTXOs = addressUTXOs;\n    }\n    parseUTXO(utxo) {\n        const utxovar = new UTXO();\n        // force a copy\n        if (typeof utxo === 'string') {\n            utxovar.fromBuffer(bintools.cb58Decode(utxo));\n        }\n        else if (utxo instanceof UTXO) {\n            utxovar.fromBuffer(utxo.toBuffer()); // forces a copy\n        }\n        else {\n            /* istanbul ignore next */\n            throw new Error(`Error - UTXO.parseUTXO: utxo parameter is not a UTXO or string: ${utxo}`);\n        }\n        return utxovar;\n    }\n    create(...args) {\n        return new UTXOSet();\n    }\n    clone() {\n        const newset = this.create();\n        const allUTXOs = this.getAllUTXOs();\n        newset.addArray(allUTXOs);\n        return newset;\n    }\n    _feeCheck(fee, feeAssetID) {\n        return (typeof fee !== \"undefined\" &&\n            typeof feeAssetID !== \"undefined\" &&\n            fee.gt(new bn_js_1.default(0)) && feeAssetID instanceof buffer_1.Buffer);\n    }\n}\nexports.UTXOSet = UTXOSet;\n//# sourceMappingURL=data:application/json;base64,"],"sourceRoot":""}