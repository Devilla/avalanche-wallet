{"version":3,"sources":["webpack:///./node_modules/avalanche/dist/apis/platformvm/validationtx.js","webpack:///./node_modules/avalanche/dist/common/jrpcapi.js","webpack:///./node_modules/avalanche/dist/apis/info/api.js","webpack:///./node_modules/avalanche/dist/apis/platformvm/outputs.js","webpack:///./node_modules/avalanche/dist/common/output.js","webpack:///./node_modules/avalanche/dist/apis/platformvm/utxos.js","webpack:///./node_modules/avalanche/dist/common/nbytes.js","webpack:///./node_modules/avalanche/dist/common/secp256k1.js","webpack:///./node_modules/avalanche/dist/avalanche.js","webpack:///./node_modules/avalanche/dist/apis/health/api.js","webpack:///./node_modules/avalanche/dist/apis/platformvm/createsubnettx.js","webpack:///./node_modules/avalanche/dist/common/apibase.js","webpack:///./node_modules/avalanche/dist/common/keychain.js","webpack:///./node_modules/avalanche/dist/apis/info/index.js","webpack:///./node_modules/avalanche/dist/common/input.js","webpack:///./node_modules/avalanche/dist/common/assetamount.js","webpack:///./node_modules/avalanche/dist/apis/platformvm/keychain.js","webpack:///./node_modules/avalanche/dist/apis/platformvm/inputs.js","webpack:///./node_modules/avalanche/dist/apis/platformvm/importtx.js","webpack:///./node_modules/avalanche/dist/common/index.js","webpack:///./node_modules/avalanche/dist/apis/health/index.js","webpack:///./node_modules/avalanche/dist/common/utxos.js","webpack:///./node_modules/avalanche/dist/apis/keystore/index.js","webpack:///./node_modules/avalanche/dist/apis/platformvm/index.js","webpack:///./node_modules/avalanche/dist/common/interfaces.js","webpack:///./node_modules/avalanche/dist/apis/metrics/api.js","webpack:///./node_modules/avalanche/dist/apis/platformvm/api.js","webpack:///./node_modules/avalanche/dist/common/evmtx.js","webpack:///./node_modules/avalanche/dist/apis/platformvm/exporttx.js","webpack:///./node_modules/avalanche/dist/apis/metrics/index.js","webpack:///./node_modules/avalanche/dist/apis/platformvm/tx.js","webpack:///./node_modules/avalanche/dist/apis/platformvm/constants.js","webpack:///./node_modules/avalanche/dist/common/tx.js","webpack:///./node_modules/avalanche/dist/common/credentials.js","webpack:///./node_modules/avalanche/dist/apis/platformvm/credentials.js","webpack:///./node_modules/avalanche/dist/apis/platformvm/basetx.js","webpack:///./node_modules/avalanche/dist/common/restapi.js","webpack:///./node_modules/avalanche/dist/apis/keystore/api.js"],"names":["__importDefault","this","mod","__esModule","Object","defineProperty","exports","value","AddValidatorTx","AddDelegatorTx","WeightedValidatorTx","ValidatorTx","bn_js_1","bintools_1","basetx_1","outputs_1","buffer_1","constants_1","constants_2","helperfunctions_1","outputs_2","serialization_1","bintools","default","getInstance","serializer","Serialization","BaseTx","networkid","blockchainid","outs","ins","memo","nodeID","startTime","endTime","super","_typeName","_typeID","undefined","Buffer","alloc","fromBNToBuffer","encoding","fields","serialize","assign","encoder","deserialize","decoder","bufferToNodeIDString","fromBufferToBN","bytes","offset","fromBuffer","copyFrom","superbuff","toBuffer","bsize","length","concat","DefaultNetworkID","weight","stakeAmount","stakeOuts","rewardOwners","PlatformVMConstants","ADDDELEGATORTX","getTxType","map","s","xferout","TransferableOutput","ParseableOutput","getWeight","val","i","add","getOutput","getAmount","getOuts","getStakeOuts","numstakeouts","outcount","readUInt32BE","push","numouts","writeUInt32BE","barr","sort","comparator","out","ro","newbase","args","delegationFee","ADDVALIDATORTX","Error","parseFloat","toFixed","getDelegationFeeBuffer","dbuff","delegatorMultiplier","dBuff","buffnum","superBuff","feeBuff","__awaiter","thisArg","_arguments","P","generator","adopt","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","JRPCAPI","apibase_1","APIBase","core","baseurl","jrpcVersion","rpcid","callMethod","method","params","ep","rpc","id","jsonrpc","headers","axConf","baseURL","getProtocol","getIP","getPort","responseType","post","JSON","stringify","resp","status","data","parse","getRPCID","InfoAPI","jrpcapi_1","getBlockchainID","alias","response","blockchainID","getNetworkID","networkID","getNetworkName","networkName","getNodeID","getNodeVersion","version","getTxFee","txFee","creationTxFee","isBootstrapped","chain","peers","SECPOwnerOutput","StakeableLockOut","SECPTransferOutput","AmountOutput","SelectOutputClass","output_1","outputid","SECPXFEROUTPUTID","SECPOWNEROUTPUTID","STAKEABLELOCKOUTID","StandardTransferableOutput","arguments","output","assetID","ASSETIDLEN","StandardParseableOutput","StandardAmountOutput","newout","create","amount","addresses","locktime","threshold","stakeableLocktime","transferableOutput","synchronize","outobj","getAddresses","a","addr","Address","numaddrs","getLocktime","getThreshold","amountValue","outbuff","xferoutBuff","Output","BaseNFTOutput","OutputOwners","nbytes_1","NBytes","cb58Encode","addrbuff","b58ToBuffer","validateChecksum","newbuff","getSize","b","compare","Serializable","getAddressIdx","address","toString","getAddress","idx","meetsThreshold","asOf","now","UnixNow","qualified","getSpenders","lte","j","addrs","bufferToB58","aoutid","getOutputID","abuff","boutid","bbuff","asort","bsort","outid","sorta","sortb","getAssetID","parseableBuff","clone","groupID","getGroupID","UTXOSet","AssetAmountDestination","UTXO","inputs_1","utxos_1","tx_1","exporttx_1","importtx_1","assetamount_1","validationtx_1","createsubnettx_1","StandardUTXO","codecid","txid","outputidx","assetid","serialized","cb58Decode","utxo","codecID","LATESTCODEC","StandardAssetAmountDestination","StandardUTXOSet","getConsumableUXTO","stakeable","getAllUTXOs","filter","stakeableOutput","getStakeableLocktime","lt","getMinimumSpendable","aad","utxoArray","tmpUTXOArray","forEach","getTypeID","stakeableLockOut1","stakeableLockOut2","toNumber","index","assetKey","fromAddresses","getSenders","assetExists","assetAmount","getAssetAmount","isFinished","lockedStakeable","unlocked","amountOutput","input","SECPTransferInput","locked","gt","StakeableLockIn","ParseableInput","spendAmount","spenders","spender","addSignatureIdx","txID","getTxID","outputIdx","getOutputIdx","transferInput","TransferableInput","addInput","canComplete","zero","assetAmounts","getAmounts","change","getChange","isStakeableLockChange","getStakeableLockChange","lockedChange","getAssetIDString","lockedOutputs","lockedOutput","parseableOutput","getTransferableOutput","outputAmountRemaining","sub","newChangeOutput","newLockedChangeOutput","transferOutput","addChange","newOutput","newLockedOutput","addOutput","unlockedChange","getChangeAddresses","totalAmountSpent","getSpent","stakeableLockedAmount","getStakeableLockSpent","totalUnlockedSpent","amountBurnt","getBurn","totalUnlockedAvailable","unlockedAmount","getDestinations","buildBaseTx","toAddresses","changeAddresses","fee","feeAssetID","eq","addAssetAmount","_feeCheck","minSpendableErr","getInputs","getAllOutputs","baseTx","UnsignedTx","buildImportTx","atomics","sourceChain","importIns","feepaid","feeAssetStr","amt","infeeamount","assetStr","gte","xferin","from","getInput","spendout","feeRemaining","importTx","ImportTx","buildExportTx","avaxAssetID","destinationChain","exportouts","Defaults","network","X","getChangeOutputs","getOutputs","exportTx","ExportTx","buildAddDelegatorTx","rewardLocktime","rewardThreshold","rewardAddresses","rewardOutputOwners","UTx","buildAddValidatorTx","buildCreateSubnetTx","subnetOwnerAddresses","subnetOwnerThreshold","CreateSubnetTx","utxos","utxoid","utxoidCleaned","addressUTXOs","addressCleaned","utxobalance","utxovar","newset","allUTXOs","addArray","b58str","emsg","buff","__createBinding","o","m","k","k2","enumerable","get","__setModuleDefault","v","__importStar","hasOwnProperty","call","SECP256k1KeyChain","SECP256k1KeyPair","elliptic","create_hash_1","keychain_1","EC","ec","ecparams","curve","BN","n","constructor","StandardKeyPair","_sigFromSigBuffer","sig","r","recoveryParam","readUIntBE","sigOpt","generateKey","keypair","genKeyPair","privk","getPrivate","padStart","pubk","getPublic","importKey","keyFromPrivate","addressFromPublicKey","keyFromPublic","sha256","update","digest","ripesha","getPrivateKeyString","getPublicKeyString","sign","msg","sigObj","canonical","recovery","writeUInt8","toArray","verify","recover","recoverPubKey","encodeCompressed","StandardKeyChain","newKey","addKey","axios_1","AvalancheCore","ip","port","protocol","hrp","auth","apis","setAddress","url","getURL","setNetworkID","netid","getPreferredHRP","getHRP","setHRP","setAuthToken","_setHeaders","addAPI","apiName","ConstructorFN","api","_request","xhrmethod","getdata","postdata","axiosConfig","config","request","xhrdata","RequestResponseData","statusText","delete","put","patch","HealthAPI","getLiveness","subnetOwners","CREATESUBNETTX","typeID","db_1","setBaseURL","db","backup","getAll","clearAll","getNamespace","setAll","getBaseURL","getDB","getPrivateKey","getPublicKey","keys","values","kp","getAddressStrings","getAddressString","removeKey","key","kaddr","hasKey","getKey","__exportStar","p","StandardAmountInput","StandardTransferableInput","StandardParseableInput","Input","credentials_1","sigCount","sigIdxs","getSigIdxs","addressIdx","sigidx","SigIdx","setSource","sidx","sigbuff","getInputID","inbuff","inid","getUTXOID","AssetAmount","burn","spent","stakeableLockSpent","stakeableLockChange","finished","stakeableLocked","total","destinations","senders","amounts","amountkey","inputs","outputs","aa","assetHexStr","KeyChain","KeyPair","secp256k1_1","chainid","addressToString","getChainID","setChainID","newkp","makeKey","pk","split","newkc","kc","AmountInput","SelectInputClass","input_1","inputid","SECPINPUTID","STAKEABLELOCKINID","getCredentialID","SECPCREDENTIAL","transferableInput","xferinBuff","credentials_2","IMPORTTX","numIns","Array","isArray","ii","anIn","sigs","cred","SelectCredentialClass","sigidxs","getSource","signval","Signature","addSignature","getCodecID","readUInt8","getCodecIDBuffer","outputidbuffer","includes","utxoX","parseUTXO","console","log","message","remove","removeArray","removed","getUTXO","utxoids","results","getAllUTXOStrings","u","getUTXOIDs","spendable","entries","indexOf","getBalance","asset","spend","getAssetIDs","Set","merge","utxoset","hasUTXOIDs","utxos1","utxos2","process","intersection","us1","us2","difference","symDifference","union","mergeByRule","mergeRule","uSet","overwrite","added","lambda","MetricsAPI","restapi_1","RESTAPI","getMetrics","PlatformVMAPI","payload_1","keychain","PlatformChainID","blockchainAlias","AVAXAssetID","minValidatorStake","minDelegatorStake","getBlockchainAlias","setBlockchainAlias","refreshBlockchainID","parseAddress","ADDRESSLENGTH","addressFromBuffer","getAVAXAssetID","refresh","getStakingAssetID","setAVAXAssetID","getDefaultTxFee","setTxFee","getDefaultCreationTxFee","getCreationTxFee","setCreationTxFee","keyChain","newKeyChain","checkGooseEgg","utx","outTotal","outputTotal","getOutputTotal","ONEAVAX","mul","createBlockchain","username","password","subnetID","vmID","fxIDs","name","genesis","genesisData","getBlockchainStatus","createAddress","listAddresses","getCurrentValidators","getPendingValidators","sampleValidators","sampleSize","size","validators","addValidator","rewardAddress","delegationFeeRate","getTime","addSubnetValidator","addDelegator","createSubnet","controlKeys","validatedBy","validates","blockchainIDs","getBlockchains","blockchains","exportAVAX","to","importAVAX","issueTx","tx","Transaction","txobj","Tx","getCurrentSupply","supply","getHeight","height","getMinStake","setMinStake","getStake","staked","getSubnets","ids","subnets","exportKey","privateKey","getTx","getTxStatus","includeReason","getUTXOs","limit","startIndex","persistOpts","has","getName","selfArray","self","getMergeRule","set","getOverwrite","ownerAddresses","_cleanAddressArray","stringToAddress","srcChain","atomicUTXOs","PayloadBase","getPayload","builtUnsignedTx","prefixes","rewards","minStake","NodeIDStringToBuffer","owners","caller","EVMStandardTx","EVMStandardUnsignedTx","EVMStandardBaseTx","transaction","codecBuf","writeUInt16BE","getInputTotal","aIDHex","txtype","basebuff","unsignedTx","credentials","getUnsignedTx","c","txbuff","credlen","credential","credid","credbuff","exportOuts","EXPORTTX","numOuts","eo","getExportOutputs","anOut","SelectTxClass","BASETX","StandardUnsignedTx","readUInt16BE","StandardTx","numcreds","SECPFXID","SUBNETAUTHID","LOCKEDSTAKEABLES","ADDSUBNETVALIDATORTX","CREATECHAINTX","ADVANCETIMETX","REWARDVALIDATORTX","BLOCKCHAINIDLEN","SYMBOLMAXLEN","ASSETNAMELEN","StandardBaseTx","numins","getMemo","memolen","getTransaction","getIns","getTotalOuts","Credential","source","sigarray","sigArray","siglen","writeInt32BE","SECPCredential","newbasetx","tx_2","newOut","newIn","incount","contentType","acceptType","prepHeaders","getContentType","getAcceptType","KeystoreAPI","createUser","success","exportUser","user","importUser","listUsers","users","deleteUser"],"mappings":"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","file":"js/chunk-vendors~89a8b29a.5eb90af9.js","sourcesContent":["\"use strict\";\n/**\n * @packageDocumentation\n * @module API-PlatformVM-ValidationTx\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AddValidatorTx = exports.AddDelegatorTx = exports.WeightedValidatorTx = exports.ValidatorTx = void 0;\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst basetx_1 = require(\"./basetx\");\nconst outputs_1 = require(\"../platformvm/outputs\");\nconst buffer_1 = require(\"buffer/\");\nconst constants_1 = require(\"./constants\");\nconst constants_2 = require(\"../../utils/constants\");\nconst helperfunctions_1 = require(\"../../utils/helperfunctions\");\nconst outputs_2 = require(\"./outputs\");\nconst serialization_1 = require(\"../../utils/serialization\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serializer = serialization_1.Serialization.getInstance();\n/**\n * Abstract class representing an transactions with validation information.\n */\nclass ValidatorTx extends basetx_1.BaseTx {\n    constructor(networkid, blockchainid, outs, ins, memo, nodeID, startTime, endTime) {\n        super(networkid, blockchainid, outs, ins, memo);\n        this._typeName = \"ValidatorTx\";\n        this._typeID = undefined;\n        this.nodeID = buffer_1.Buffer.alloc(20);\n        this.startTime = buffer_1.Buffer.alloc(8);\n        this.endTime = buffer_1.Buffer.alloc(8);\n        this.nodeID = nodeID;\n        this.startTime = bintools.fromBNToBuffer(startTime, 8);\n        this.endTime = bintools.fromBNToBuffer(endTime, 8);\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { \"nodeID\": serializer.encoder(this.nodeID, encoding, \"Buffer\", \"nodeID\"), \"startTime\": serializer.encoder(this.startTime, encoding, \"Buffer\", \"decimalString\"), \"endTime\": serializer.encoder(this.endTime, encoding, \"Buffer\", \"decimalString\") });\n    }\n    ;\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.nodeID = serializer.decoder(fields[\"nodeID\"], encoding, \"nodeID\", \"Buffer\", 20);\n        this.startTime = serializer.decoder(fields[\"startTime\"], encoding, \"decimalString\", \"Buffer\", 8);\n        this.endTime = serializer.decoder(fields[\"endTime\"], encoding, \"decimalString\", \"Buffer\", 8);\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} for the stake amount.\n     */\n    getNodeID() {\n        return this.nodeID;\n    }\n    /**\n     * Returns a string for the nodeID amount.\n     */\n    getNodeIDString() {\n        return helperfunctions_1.bufferToNodeIDString(this.nodeID);\n    }\n    /**\n     * Returns a {@link https://github.com/indutny/bn.js/|BN} for the stake amount.\n     */\n    getStartTime() {\n        return bintools.fromBufferToBN(this.startTime);\n    }\n    /**\n     * Returns a {@link https://github.com/indutny/bn.js/|BN} for the stake amount.\n     */\n    getEndTime() {\n        return bintools.fromBufferToBN(this.endTime);\n    }\n    fromBuffer(bytes, offset = 0) {\n        offset = super.fromBuffer(bytes, offset);\n        this.nodeID = bintools.copyFrom(bytes, offset, offset + 20);\n        offset += 20;\n        this.startTime = bintools.copyFrom(bytes, offset, offset + 8);\n        offset += 8;\n        this.endTime = bintools.copyFrom(bytes, offset, offset + 8);\n        offset += 8;\n        return offset;\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[ValidatorTx]].\n     */\n    toBuffer() {\n        const superbuff = super.toBuffer();\n        const bsize = superbuff.length + this.nodeID.length + this.startTime.length + this.endTime.length;\n        return buffer_1.Buffer.concat([\n            superbuff,\n            this.nodeID,\n            this.startTime,\n            this.endTime\n        ], bsize);\n    }\n}\nexports.ValidatorTx = ValidatorTx;\nclass WeightedValidatorTx extends ValidatorTx {\n    /**\n     * Class representing an unsigned AddSubnetValidatorTx transaction.\n     *\n     * @param networkid Optional. Networkid, [[DefaultNetworkID]]\n     * @param blockchainid Optional. Blockchainid, default Buffer.alloc(32, 16)\n     * @param outs Optional. Array of the [[TransferableOutput]]s\n     * @param ins Optional. Array of the [[TransferableInput]]s\n     * @param memo Optional. {@link https://github.com/feross/buffer|Buffer} for the memo field\n     * @param nodeID Optional. The node ID of the validator being added.\n     * @param startTime Optional. The Unix time when the validator starts validating the Primary Network.\n     * @param endTime Optional. The Unix time when the validator stops validating the Primary Network (and staked AVAX is returned).\n     * @param weight Optional. The amount of nAVAX the validator is staking.\n     */\n    constructor(networkid = constants_2.DefaultNetworkID, blockchainid = buffer_1.Buffer.alloc(32, 16), outs = undefined, ins = undefined, memo = undefined, nodeID = undefined, startTime = undefined, endTime = undefined, weight = undefined) {\n        super(networkid, blockchainid, outs, ins, memo, nodeID, startTime, endTime);\n        this._typeName = \"WeightedValidatorTx\";\n        this._typeID = undefined;\n        this.weight = buffer_1.Buffer.alloc(8);\n        if (typeof weight !== undefined) {\n            this.weight = bintools.fromBNToBuffer(weight, 8);\n        }\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { \"weight\": serializer.encoder(this.weight, encoding, \"Buffer\", \"decimalString\") });\n    }\n    ;\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.weight = serializer.decoder(fields[\"weight\"], encoding, \"decimalString\", \"Buffer\", 8);\n    }\n    /**\n     * Returns a {@link https://github.com/indutny/bn.js/|BN} for the stake amount.\n     */\n    getWeight() {\n        return bintools.fromBufferToBN(this.weight);\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} for the stake amount.\n     */\n    getWeightBuffer() {\n        return this.weight;\n    }\n    fromBuffer(bytes, offset = 0) {\n        offset = super.fromBuffer(bytes, offset);\n        this.weight = bintools.copyFrom(bytes, offset, offset + 8);\n        offset += 8;\n        return offset;\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[AddSubnetValidatorTx]].\n     */\n    toBuffer() {\n        const superbuff = super.toBuffer();\n        return buffer_1.Buffer.concat([superbuff, this.weight]);\n    }\n}\nexports.WeightedValidatorTx = WeightedValidatorTx;\n/* Must implement later, the signing process isn't friendly to AvalancheJS\n\nexport class AddSubnetValidatorTx extends WeightedValidatorTx {\n    protected subnetID:Buffer = Buffer.alloc(32);\n    protected subnetAddrs:Array<Buffer> = [];\n    protected subnetAuthIdxs:Array<Buffer> = [];\n\n\n    getTxType = ():number => {\n        return PlatformVMConstants.ADDSUBNETVALIDATORTX;\n    }\n\n\n    getSubnetID = ():Buffer => {\n        return this.subnetID;\n    }\n\n\n    getSubnetIDString = ():string => {\n        return bintools.cb58Encode(this.subnetID);\n    }\n\n\n    getSubnetAuthAddresses = ():Array<Buffer> => {\n        return this.subnetAddrs;\n    }\n\n\n    setSubnetAuthAddresses = (addrs:Array<Buffer>):void => {\n        this.subnetAddrs = addrs;\n    }\n\n    calcSubnetAuthIdxs = (addrs:Array<Buffer>):Array<Buffer> => {\n        let idxs:Array<Buffer> = [];\n        addrs = addrs.sort();\n        for(let i = 0; i < addrs.length; i++){\n            let idx:Buffer = Buffer.alloc(4);\n            idx.writeUInt32BE(i,0);\n            idxs.push(idx);\n        }\n    }\n\n\n    getSubnetAuthIdxs = ():Array<Buffer> => {\n        return this.subnetAddrs;\n    }\n\n    fromBuffer(bytes:Buffer, offset:number = 0):number {\n        offset = super.fromBuffer(bytes, offset);\n        this.subnetID = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        let sublenbuff:Buffer = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        let sublen:number = sublenbuff.readUInt32BE(0);\n        for(let i = 0; i < sublen; i++){\n\n        }\n        offset = this.subnetAuth.fromBuffer(bytes, offset);\n        return offset;\n    }\n\n\n    toBuffer():Buffer {\n        const superbuff:Buffer = super.toBuffer();\n\n        return Buffer.concat([superbuff, this.subnetID, subAuth], superbuff.length + this.subnetID.length + subAuth.length);\n    }\n\n\n    sign(msg:Buffer, kc:KeyChain):Array<Credential> {\n        let creds:Array<SECPCredential> = super.sign(msg, kc);\n        const cred:SECPCredential = SelectCredentialClass(PlatformVMConstants.SECPCREDENTIAL) as SECPCredential;\n        for(let i = 0; i  < this.subnetAuth.length ; i++) {\n            if(!kc.hasKey(this.subnetAuth[i])) {\n                throw new Error(\"AddSubnetValidatorTx.sign -- specified address in subnetAuth not existent in provided keychain.\");\n            }\n            \n            let kp:KeyPair = kc.getKey(this.subnetAuth[i]);\n            const signval:Buffer = kp.sign(msg);\n            const sig:Signature = new Signature();\n            sig.fromBuffer(signval);\n            cred.addSignature(sig);\n        }\n        creds.push(cred);\n        return creds;\n    }\n\n\n    constructor(\n        networkid:number = DefaultNetworkID,\n        blockchainid:Buffer = Buffer.alloc(32, 16),\n        outs:Array<TransferableOutput> = undefined,\n        ins:Array<TransferableInput> = undefined,\n        memo:Buffer = undefined,\n        nodeID:Buffer = undefined,\n        startTime:BN = undefined,\n        endTime:BN = undefined,\n        weight:BN = undefined,\n        subnetID:Buffer = undefined,\n        subnetAuth:Array<Buffer> = undefined\n    ) {\n        super(networkid, blockchainid, outs, ins, memo, nodeID, startTime, endTime, weight);\n        if(typeof subnetID !== undefined){\n            this.subnetID = subnetID;\n        }\n        if(typeof subnetAuth !== undefined) {\n            this.subnetAuth = subnetAuth;\n        }\n    }\n\n}\n*/\n/**\n * Class representing an unsigned AddDelegatorTx transaction.\n */\nclass AddDelegatorTx extends WeightedValidatorTx {\n    /**\n     * Class representing an unsigned AddDelegatorTx transaction.\n     *\n     * @param networkid Optional. Networkid, [[DefaultNetworkID]]\n     * @param blockchainid Optional. Blockchainid, default Buffer.alloc(32, 16)\n     * @param outs Optional. Array of the [[TransferableOutput]]s\n     * @param ins Optional. Array of the [[TransferableInput]]s\n     * @param memo Optional. {@link https://github.com/feross/buffer|Buffer} for the memo field\n     * @param nodeID Optional. The node ID of the validator being added.\n     * @param startTime Optional. The Unix time when the validator starts validating the Primary Network.\n     * @param endTime Optional. The Unix time when the validator stops validating the Primary Network (and staked AVAX is returned).\n     * @param stakeAmount Optional. The amount of nAVAX the validator is staking.\n     * @param stakeOuts Optional. The outputs used in paying the stake.\n     * @param rewardOwners Optional. The [[ParseableOutput]] containing a [[SECPOwnerOutput]] for the rewards.\n     */\n    constructor(networkid = constants_2.DefaultNetworkID, blockchainid = buffer_1.Buffer.alloc(32, 16), outs = undefined, ins = undefined, memo = undefined, nodeID = undefined, startTime = undefined, endTime = undefined, stakeAmount = undefined, stakeOuts = undefined, rewardOwners = undefined) {\n        super(networkid, blockchainid, outs, ins, memo, nodeID, startTime, endTime, stakeAmount);\n        this._typeName = \"AddDelegatorTx\";\n        this._typeID = constants_1.PlatformVMConstants.ADDDELEGATORTX;\n        this.stakeOuts = [];\n        this.rewardOwners = undefined;\n        /**\n           * Returns the id of the [[AddDelegatorTx]]\n           */\n        this.getTxType = () => {\n            return this._typeID;\n        };\n        if (typeof stakeOuts !== undefined) {\n            this.stakeOuts = stakeOuts;\n        }\n        this.rewardOwners = rewardOwners;\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { \"stakeOuts\": this.stakeOuts.map((s) => s.serialize(encoding)), \"rewardOwners\": this.rewardOwners.serialize(encoding) });\n    }\n    ;\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.stakeOuts = fields[\"stakeOuts\"].map((s) => {\n            let xferout = new outputs_1.TransferableOutput();\n            xferout.deserialize(s, encoding);\n            return xferout;\n        });\n        this.rewardOwners = new outputs_2.ParseableOutput();\n        this.rewardOwners.deserialize(fields[\"rewardOwners\"], encoding);\n    }\n    /**\n     * Returns a {@link https://github.com/indutny/bn.js/|BN} for the stake amount.\n     */\n    getStakeAmount() {\n        return this.getWeight();\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} for the stake amount.\n     */\n    getStakeAmountBuffer() {\n        return this.weight;\n    }\n    /**\n     * Returns the array of outputs being staked.\n     */\n    getStakeOuts() {\n        return this.stakeOuts;\n    }\n    /**\n     * Should match stakeAmount. Used in sanity checking.\n     */\n    getStakeOutsTotal() {\n        let val = new bn_js_1.default(0);\n        for (let i = 0; i < this.stakeOuts.length; i++) {\n            val = val.add(this.stakeOuts[i].getOutput().getAmount());\n        }\n        return val;\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} for the reward address.\n     */\n    getRewardOwners() {\n        return this.rewardOwners;\n    }\n    getTotalOuts() {\n        return [...this.getOuts(), ...this.getStakeOuts()];\n    }\n    fromBuffer(bytes, offset = 0) {\n        offset = super.fromBuffer(bytes, offset);\n        const numstakeouts = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const outcount = numstakeouts.readUInt32BE(0);\n        this.stakeOuts = [];\n        for (let i = 0; i < outcount; i++) {\n            const xferout = new outputs_1.TransferableOutput();\n            offset = xferout.fromBuffer(bytes, offset);\n            this.stakeOuts.push(xferout);\n        }\n        this.rewardOwners = new outputs_2.ParseableOutput();\n        offset = this.rewardOwners.fromBuffer(bytes, offset);\n        return offset;\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[AddDelegatorTx]].\n     */\n    toBuffer() {\n        const superbuff = super.toBuffer();\n        let bsize = superbuff.length;\n        const numouts = buffer_1.Buffer.alloc(4);\n        numouts.writeUInt32BE(this.stakeOuts.length, 0);\n        let barr = [super.toBuffer(), numouts];\n        bsize += numouts.length;\n        this.stakeOuts = this.stakeOuts.sort(outputs_1.TransferableOutput.comparator());\n        for (let i = 0; i < this.stakeOuts.length; i++) {\n            let out = this.stakeOuts[i].toBuffer();\n            barr.push(out);\n            bsize += out.length;\n        }\n        let ro = this.rewardOwners.toBuffer();\n        barr.push(ro);\n        bsize += ro.length;\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n    clone() {\n        let newbase = new AddDelegatorTx();\n        newbase.fromBuffer(this.toBuffer());\n        return newbase;\n    }\n    create(...args) {\n        return new AddDelegatorTx(...args);\n    }\n}\nexports.AddDelegatorTx = AddDelegatorTx;\nclass AddValidatorTx extends AddDelegatorTx {\n    /**\n     * Class representing an unsigned AddValidatorTx transaction.\n     *\n     * @param networkid Optional. Networkid, [[DefaultNetworkID]]\n     * @param blockchainid Optional. Blockchainid, default Buffer.alloc(32, 16)\n     * @param outs Optional. Array of the [[TransferableOutput]]s\n     * @param ins Optional. Array of the [[TransferableInput]]s\n     * @param memo Optional. {@link https://github.com/feross/buffer|Buffer} for the memo field\n     * @param nodeID Optional. The node ID of the validator being added.\n     * @param startTime Optional. The Unix time when the validator starts validating the Primary Network.\n     * @param endTime Optional. The Unix time when the validator stops validating the Primary Network (and staked AVAX is returned).\n     * @param stakeAmount Optional. The amount of nAVAX the validator is staking.\n     * @param stakeOuts Optional. The outputs used in paying the stake.\n     * @param rewardOwners Optional. The [[ParseableOutput]] containing the [[SECPOwnerOutput]] for the rewards.\n     * @param delegationFee Optional. The percent fee this validator charges when others delegate stake to them.\n     * Up to 4 decimal places allowed; additional decimal places are ignored. Must be between 0 and 100, inclusive.\n     * For example, if delegationFeeRate is 1.2345 and someone delegates to this validator, then when the delegation\n     * period is over, 1.2345% of the reward goes to the validator and the rest goes to the delegator.\n     */\n    constructor(networkid = constants_2.DefaultNetworkID, blockchainid = buffer_1.Buffer.alloc(32, 16), outs = undefined, ins = undefined, memo = undefined, nodeID = undefined, startTime = undefined, endTime = undefined, stakeAmount = undefined, stakeOuts = undefined, rewardOwners = undefined, delegationFee = undefined) {\n        super(networkid, blockchainid, outs, ins, memo, nodeID, startTime, endTime, stakeAmount, stakeOuts, rewardOwners);\n        this._typeName = \"AddValidatorTx\";\n        this._typeID = constants_1.PlatformVMConstants.ADDVALIDATORTX;\n        this.delegationFee = 0;\n        /**\n           * Returns the id of the [[AddValidatorTx]]\n           */\n        this.getTxType = () => {\n            return this._typeID;\n        };\n        if (typeof delegationFee === \"number\") {\n            if (delegationFee >= 0 && delegationFee <= 100) {\n                this.delegationFee = parseFloat(delegationFee.toFixed(4));\n            }\n            else {\n                throw new Error(\"AddValidatorTx.constructor -- delegationFee must be in the range of 0 and 100, inclusively.\");\n            }\n        }\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { \"delegationFee\": serializer.encoder(this.getDelegationFeeBuffer(), encoding, \"Buffer\", \"decimalString\", 4) });\n    }\n    ;\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        let dbuff = serializer.decoder(fields[\"delegationFee\"], encoding, \"decimalString\", \"Buffer\", 4);\n        this.delegationFee = dbuff.readUInt32BE(0) / AddValidatorTx.delegatorMultiplier;\n    }\n    /**\n     * Returns the delegation fee (represents a percentage from 0 to 100);\n     */\n    getDelegationFee() {\n        return this.delegationFee;\n    }\n    /**\n     * Returns the binary representation of the delegation fee as a {@link https://github.com/feross/buffer|Buffer}.\n     */\n    getDelegationFeeBuffer() {\n        let dBuff = buffer_1.Buffer.alloc(4);\n        let buffnum = parseFloat(this.delegationFee.toFixed(4)) * AddValidatorTx.delegatorMultiplier;\n        dBuff.writeUInt32BE(buffnum, 0);\n        return dBuff;\n    }\n    fromBuffer(bytes, offset = 0) {\n        offset = super.fromBuffer(bytes, offset);\n        let dbuff = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        this.delegationFee = dbuff.readUInt32BE(0) / AddValidatorTx.delegatorMultiplier;\n        return offset;\n    }\n    toBuffer() {\n        let superBuff = super.toBuffer();\n        let feeBuff = this.getDelegationFeeBuffer();\n        return buffer_1.Buffer.concat([superBuff, feeBuff]);\n    }\n}\nexports.AddValidatorTx = AddValidatorTx;\nAddValidatorTx.delegatorMultiplier = 10000;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\n/**\n * @packageDocumentation\n * @module Common-JRPCAPI\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.JRPCAPI = void 0;\nconst bintools_1 = __importDefault(require(\"../utils/bintools\"));\nconst apibase_1 = require(\"./apibase\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nclass JRPCAPI extends apibase_1.APIBase {\n    /**\n       *\n       * @param core Reference to the Avalanche instance using this endpoint\n       * @param baseurl Path of the APIs baseurl - ex: \"/ext/bc/avm\"\n       * @param jrpcVersion The jrpc version to use, default \"2.0\".\n       */\n    constructor(core, baseurl, jrpcVersion = '2.0') {\n        super(core, baseurl);\n        this.jrpcVersion = '2.0';\n        this.rpcid = 1;\n        this.callMethod = (method, params, baseurl) => __awaiter(this, void 0, void 0, function* () {\n            const ep = baseurl || this.baseurl;\n            const rpc = {};\n            rpc.id = this.rpcid;\n            rpc.method = method;\n            // Set parameters if exists\n            if (params) {\n                rpc.params = params;\n            }\n            else if (this.jrpcVersion === '1.0') {\n                rpc.params = [];\n            }\n            if (this.jrpcVersion !== '1.0') {\n                rpc.jsonrpc = this.jrpcVersion;\n            }\n            const headers = { 'Content-Type': 'application/json;charset=UTF-8' };\n            const axConf = {\n                baseURL: `${this.core.getProtocol()}://${this.core.getIP()}:${this.core.getPort()}`,\n                responseType: 'json',\n            };\n            return this.core.post(ep, {}, JSON.stringify(rpc), headers, axConf)\n                .then((resp) => {\n                if (resp.status >= 200 && resp.status < 300) {\n                    this.rpcid += 1;\n                    if (typeof resp.data === 'string') {\n                        resp.data = JSON.parse(resp.data);\n                    }\n                    if (typeof resp.data === 'object' && (resp.data === null || 'error' in resp.data)) {\n                        throw new Error(`Error returned: ${JSON.stringify(resp.data)}`);\n                    }\n                }\n                return resp;\n            });\n        });\n        /**\n           * Returns the rpcid, a strictly-increasing number, starting from 1, indicating the next\n           * request ID that will be sent.\n           */\n        this.getRPCID = () => this.rpcid;\n        this.jrpcVersion = jrpcVersion;\n        this.rpcid = 1;\n    }\n}\nexports.JRPCAPI = JRPCAPI;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianJwY2FwaS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tb24vanJwY2FwaS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7OztHQUdHOzs7Ozs7Ozs7Ozs7Ozs7QUFHSCxpRUFBeUM7QUFFekMsdUNBQXlEO0FBRXpEOztHQUVHO0FBQ0gsTUFBTSxRQUFRLEdBQUcsa0JBQVEsQ0FBQyxXQUFXLEVBQUUsQ0FBQztBQUV4QyxNQUFhLE9BQVEsU0FBUSxpQkFBTztJQW9EbEM7Ozs7O1NBS0s7SUFDTCxZQUFZLElBQWtCLEVBQUUsT0FBYyxFQUFFLGNBQXFCLEtBQUs7UUFDeEUsS0FBSyxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztRQTFEYixnQkFBVyxHQUFVLEtBQUssQ0FBQztRQUUzQixVQUFLLEdBQUcsQ0FBQyxDQUFDO1FBRXBCLGVBQVUsR0FBRyxDQUFPLE1BQWEsRUFDL0IsTUFBOEIsRUFDOUIsT0FBZSxFQUErQixFQUFFO1lBQ2hELE1BQU0sRUFBRSxHQUFHLE9BQU8sSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDO1lBQ25DLE1BQU0sR0FBRyxHQUFPLEVBQUUsQ0FBQztZQUNuQixHQUFHLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7WUFDcEIsR0FBRyxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7WUFFcEIsMkJBQTJCO1lBQzNCLElBQUksTUFBTSxFQUFFO2dCQUNWLEdBQUcsQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO2FBQ3JCO2lCQUFNLElBQUksSUFBSSxDQUFDLFdBQVcsS0FBSyxLQUFLLEVBQUU7Z0JBQ3JDLEdBQUcsQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFDO2FBQ2pCO1lBRUQsSUFBSSxJQUFJLENBQUMsV0FBVyxLQUFLLEtBQUssRUFBRTtnQkFDOUIsR0FBRyxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDO2FBQ2hDO1lBRUQsTUFBTSxPQUFPLEdBQVUsRUFBRSxjQUFjLEVBQUUsZ0NBQWdDLEVBQUUsQ0FBQztZQUU1RSxNQUFNLE1BQU0sR0FBc0I7Z0JBQ2hDLE9BQU8sRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxFQUFFO2dCQUNuRixZQUFZLEVBQUUsTUFBTTthQUNyQixDQUFDO1lBRUYsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEVBQUUsT0FBTyxFQUFFLE1BQU0sQ0FBQztpQkFDaEUsSUFBSSxDQUFDLENBQUMsSUFBd0IsRUFBRSxFQUFFO2dCQUNqQyxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksR0FBRyxJQUFJLElBQUksQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFO29CQUMzQyxJQUFJLENBQUMsS0FBSyxJQUFJLENBQUMsQ0FBQztvQkFDaEIsSUFBSSxPQUFPLElBQUksQ0FBQyxJQUFJLEtBQUssUUFBUSxFQUFFO3dCQUNqQyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO3FCQUNuQztvQkFDRCxJQUFJLE9BQU8sSUFBSSxDQUFDLElBQUksS0FBSyxRQUFRLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLElBQUksSUFBSSxPQUFPLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFO3dCQUNqRixNQUFNLElBQUksS0FBSyxDQUFDLG1CQUFtQixJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7cUJBQ2pFO2lCQUNGO2dCQUNELE9BQU8sSUFBSSxDQUFDO1lBQ2QsQ0FBQyxDQUFDLENBQUM7UUFDUCxDQUFDLENBQUEsQ0FBQztRQUVGOzs7YUFHSztRQUNMLGFBQVEsR0FBRyxHQUFVLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBVWpDLElBQUksQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFDO1FBQy9CLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ2pCLENBQUM7Q0FDRjtBQS9ERCwwQkErREMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBwYWNrYWdlRG9jdW1lbnRhdGlvblxuICogQG1vZHVsZSBDb21tb24tSlJQQ0FQSVxuICovXG5cbmltcG9ydCB7IEF4aW9zUmVxdWVzdENvbmZpZyB9IGZyb20gJ2F4aW9zJztcbmltcG9ydCBCaW5Ub29scyBmcm9tICcuLi91dGlscy9iaW50b29scyc7XG5pbXBvcnQgQXZhbGFuY2hlQ29yZSBmcm9tICcuLi9hdmFsYW5jaGUnO1xuaW1wb3J0IHsgQVBJQmFzZSwgUmVxdWVzdFJlc3BvbnNlRGF0YSB9IGZyb20gJy4vYXBpYmFzZSc7XG5cbi8qKlxuICogQGlnbm9yZVxuICovXG5jb25zdCBiaW50b29scyA9IEJpblRvb2xzLmdldEluc3RhbmNlKCk7XG5cbmV4cG9ydCBjbGFzcyBKUlBDQVBJIGV4dGVuZHMgQVBJQmFzZSB7XG4gIHByb3RlY3RlZCBqcnBjVmVyc2lvbjpzdHJpbmcgPSAnMi4wJztcblxuICBwcm90ZWN0ZWQgcnBjaWQgPSAxO1xuXG4gIGNhbGxNZXRob2QgPSBhc3luYyAobWV0aG9kOnN0cmluZyxcbiAgICBwYXJhbXM/OkFycmF5PG9iamVjdD4gfCBvYmplY3QsXG4gICAgYmFzZXVybD86c3RyaW5nKTpQcm9taXNlPFJlcXVlc3RSZXNwb25zZURhdGE+ID0+IHtcbiAgICBjb25zdCBlcCA9IGJhc2V1cmwgfHwgdGhpcy5iYXNldXJsO1xuICAgIGNvbnN0IHJwYzphbnkgPSB7fTtcbiAgICBycGMuaWQgPSB0aGlzLnJwY2lkO1xuICAgIHJwYy5tZXRob2QgPSBtZXRob2Q7XG5cbiAgICAvLyBTZXQgcGFyYW1ldGVycyBpZiBleGlzdHNcbiAgICBpZiAocGFyYW1zKSB7XG4gICAgICBycGMucGFyYW1zID0gcGFyYW1zO1xuICAgIH0gZWxzZSBpZiAodGhpcy5qcnBjVmVyc2lvbiA9PT0gJzEuMCcpIHtcbiAgICAgIHJwYy5wYXJhbXMgPSBbXTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5qcnBjVmVyc2lvbiAhPT0gJzEuMCcpIHtcbiAgICAgIHJwYy5qc29ucnBjID0gdGhpcy5qcnBjVmVyc2lvbjtcbiAgICB9XG5cbiAgICBjb25zdCBoZWFkZXJzOm9iamVjdCA9IHsgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9VVRGLTgnIH07XG5cbiAgICBjb25zdCBheENvbmY6QXhpb3NSZXF1ZXN0Q29uZmlnID0ge1xuICAgICAgYmFzZVVSTDogYCR7dGhpcy5jb3JlLmdldFByb3RvY29sKCl9Oi8vJHt0aGlzLmNvcmUuZ2V0SVAoKX06JHt0aGlzLmNvcmUuZ2V0UG9ydCgpfWAsXG4gICAgICByZXNwb25zZVR5cGU6ICdqc29uJyxcbiAgICB9O1xuXG4gICAgcmV0dXJuIHRoaXMuY29yZS5wb3N0KGVwLCB7fSwgSlNPTi5zdHJpbmdpZnkocnBjKSwgaGVhZGVycywgYXhDb25mKVxuICAgICAgLnRoZW4oKHJlc3A6UmVxdWVzdFJlc3BvbnNlRGF0YSkgPT4ge1xuICAgICAgICBpZiAocmVzcC5zdGF0dXMgPj0gMjAwICYmIHJlc3Auc3RhdHVzIDwgMzAwKSB7XG4gICAgICAgICAgdGhpcy5ycGNpZCArPSAxO1xuICAgICAgICAgIGlmICh0eXBlb2YgcmVzcC5kYXRhID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgcmVzcC5kYXRhID0gSlNPTi5wYXJzZShyZXNwLmRhdGEpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodHlwZW9mIHJlc3AuZGF0YSA9PT0gJ29iamVjdCcgJiYgKHJlc3AuZGF0YSA9PT0gbnVsbCB8fCAnZXJyb3InIGluIHJlc3AuZGF0YSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRXJyb3IgcmV0dXJuZWQ6ICR7SlNPTi5zdHJpbmdpZnkocmVzcC5kYXRhKX1gKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3A7XG4gICAgICB9KTtcbiAgfTtcblxuICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBycGNpZCwgYSBzdHJpY3RseS1pbmNyZWFzaW5nIG51bWJlciwgc3RhcnRpbmcgZnJvbSAxLCBpbmRpY2F0aW5nIHRoZSBuZXh0XG4gICAgICogcmVxdWVzdCBJRCB0aGF0IHdpbGwgYmUgc2VudC5cbiAgICAgKi9cbiAgZ2V0UlBDSUQgPSAoKTpudW1iZXIgPT4gdGhpcy5ycGNpZDtcblxuICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSBjb3JlIFJlZmVyZW5jZSB0byB0aGUgQXZhbGFuY2hlIGluc3RhbmNlIHVzaW5nIHRoaXMgZW5kcG9pbnRcbiAgICAgKiBAcGFyYW0gYmFzZXVybCBQYXRoIG9mIHRoZSBBUElzIGJhc2V1cmwgLSBleDogXCIvZXh0L2JjL2F2bVwiXG4gICAgICogQHBhcmFtIGpycGNWZXJzaW9uIFRoZSBqcnBjIHZlcnNpb24gdG8gdXNlLCBkZWZhdWx0IFwiMi4wXCIuXG4gICAgICovXG4gIGNvbnN0cnVjdG9yKGNvcmU6QXZhbGFuY2hlQ29yZSwgYmFzZXVybDpzdHJpbmcsIGpycGNWZXJzaW9uOnN0cmluZyA9ICcyLjAnKSB7XG4gICAgc3VwZXIoY29yZSwgYmFzZXVybCk7XG4gICAgdGhpcy5qcnBjVmVyc2lvbiA9IGpycGNWZXJzaW9uO1xuICAgIHRoaXMucnBjaWQgPSAxO1xuICB9XG59XG5cblxuXG5cblxuIl19","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.InfoAPI = void 0;\nconst jrpcapi_1 = require(\"../../common/jrpcapi\");\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\n/**\n * Class for interacting with a node's InfoAPI.\n *\n * @category RPCAPIs\n *\n * @remarks This extends the [[JRPCAPI]] class. This class should not be directly called. Instead, use the [[Avalanche.addAPI]] function to register this interface with Avalanche.\n */\nclass InfoAPI extends jrpcapi_1.JRPCAPI {\n    constructor(core, baseurl = '/ext/info') {\n        super(core, baseurl);\n        /**\n         * Fetches the blockchainID from the node for a given alias.\n         *\n         * @param alias The blockchain alias to get the blockchainID\n         *\n         * @returns Returns a Promise<string> containing the base 58 string representation of the blockchainID.\n         */\n        this.getBlockchainID = (alias) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                alias,\n            };\n            return this.callMethod('info.getBlockchainID', params)\n                .then((response) => response.data.result.blockchainID);\n        });\n        /**\n         * Fetches the networkID from the node.\n         *\n         * @returns Returns a Promise<number> of the networkID.\n         */\n        this.getNetworkID = () => __awaiter(this, void 0, void 0, function* () {\n            const params = {};\n            return this.callMethod('info.getNetworkID', params)\n                .then((response) => response.data.result.networkID);\n        });\n        /**\n         * Fetches the network name this node is running on\n         *\n         * @returns Returns a Promise<string> containing the network name.\n         */\n        this.getNetworkName = () => __awaiter(this, void 0, void 0, function* () {\n            return this.callMethod('info.getNetworkName')\n                .then((response) => response.data.result.networkName);\n        });\n        /**\n         * Fetches the nodeID from the node.\n         *\n         * @returns Returns a Promise<string> of the nodeID.\n         */\n        this.getNodeID = () => __awaiter(this, void 0, void 0, function* () {\n            const params = {};\n            return this.callMethod('info.getNodeID', params)\n                .then((response) => response.data.result.nodeID);\n        });\n        /**\n         * Fetches the version of Gecko this node is running\n         *\n         * @returns Returns a Promise<string> containing the version of Gecko.\n         */\n        this.getNodeVersion = () => __awaiter(this, void 0, void 0, function* () {\n            return this.callMethod('info.getNodeVersion')\n                .then((response) => response.data.result.version);\n        });\n        /**\n         * Fetches the transaction fee from the node.\n         *\n         * @returns Returns a Promise<object> of the transaction fee in nAVAX.\n         */\n        this.getTxFee = () => __awaiter(this, void 0, void 0, function* () {\n            return this.callMethod('info.getTxFee')\n                .then((response) => {\n                return {\n                    txFee: new bn_js_1.default(response.data.result.txFee, 10),\n                    creationTxFee: new bn_js_1.default(response.data.result.creationTxFee, 10)\n                };\n            });\n        });\n        /**\n         * Check whether a given chain is done bootstrapping\n         * @param chain The ID or alias of a chain.\n         *\n         * @returns Returns a Promise<boolean> of whether the chain has completed bootstrapping.\n         */\n        this.isBootstrapped = (chain) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                chain\n            };\n            return this.callMethod('info.isBootstrapped', params)\n                .then((response) => response.data.result.isBootstrapped);\n        });\n        /**\n         * Returns the peers connected to the node.\n         *\n         * @returns Promise for the list of connected peers in <ip>:<port> format.\n         */\n        this.peers = () => __awaiter(this, void 0, void 0, function* () {\n            return this.callMethod('info.peers')\n                .then((response) => response.data.result.peers);\n        });\n    }\n}\nexports.InfoAPI = InfoAPI;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2FwaXMvaW5mby9hcGkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBS0Esa0RBQStDO0FBRS9DLGtEQUF1QjtBQUV2Qjs7Ozs7O0dBTUc7QUFDSCxNQUFhLE9BQVEsU0FBUSxpQkFBTztJQTJGbEMsWUFBWSxJQUFrQixFQUFFLFVBQWlCLFdBQVc7UUFBSSxLQUFLLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBMUZyRjs7Ozs7O1dBTUc7UUFDSCxvQkFBZSxHQUFHLENBQU8sS0FBWSxFQUFrQixFQUFFO1lBQ3ZELE1BQU0sTUFBTSxHQUFPO2dCQUNqQixLQUFLO2FBQ04sQ0FBQztZQUNGLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxzQkFBc0IsRUFBRSxNQUFNLENBQUM7aUJBQ25ELElBQUksQ0FBQyxDQUFDLFFBQTRCLEVBQUUsRUFBRSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQy9FLENBQUMsQ0FBQSxDQUFDO1FBRUY7Ozs7V0FJRztRQUNILGlCQUFZLEdBQUcsR0FBeUIsRUFBRTtZQUN4QyxNQUFNLE1BQU0sR0FBTyxFQUFFLENBQUM7WUFDdEIsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLG1CQUFtQixFQUFFLE1BQU0sQ0FBQztpQkFDaEQsSUFBSSxDQUFDLENBQUMsUUFBNEIsRUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDNUUsQ0FBQyxDQUFBLENBQUM7UUFFRjs7OztXQUlHO1FBQ0gsbUJBQWMsR0FBRyxHQUF5QixFQUFFO1lBQUMsT0FBQSxJQUFJLENBQUMsVUFBVSxDQUFDLHFCQUFxQixDQUFDO2lCQUNoRixJQUFJLENBQUMsQ0FBQyxRQUE0QixFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQTtVQUFBLENBQUM7UUFFNUU7Ozs7V0FJRztRQUNILGNBQVMsR0FBRyxHQUF5QixFQUFFO1lBQ3JDLE1BQU0sTUFBTSxHQUFPLEVBQUUsQ0FBQztZQUN0QixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsZ0JBQWdCLEVBQUUsTUFBTSxDQUFDO2lCQUM3QyxJQUFJLENBQUMsQ0FBQyxRQUE0QixFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN6RSxDQUFDLENBQUEsQ0FBQztRQUVGOzs7O1dBSUc7UUFDSCxtQkFBYyxHQUFHLEdBQXlCLEVBQUU7WUFBQyxPQUFBLElBQUksQ0FBQyxVQUFVLENBQUMscUJBQXFCLENBQUM7aUJBQ2hGLElBQUksQ0FBQyxDQUFDLFFBQTRCLEVBQUUsRUFBRSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFBO1VBQUEsQ0FBQztRQUV4RTs7OztXQUlHO1FBQ0gsYUFBUSxHQUFHLEdBQStDLEVBQUU7WUFDMUQsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLGVBQWUsQ0FBQztpQkFDbEMsSUFBSSxDQUFDLENBQUMsUUFBNEIsRUFBRSxFQUFFO2dCQUNyQyxPQUFPO29CQUNMLEtBQUssRUFBRSxJQUFJLGVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDO29CQUM3QyxhQUFhLEVBQUUsSUFBSSxlQUFFLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxFQUFFLEVBQUUsQ0FBQztpQkFDOUQsQ0FBQTtZQUNILENBQUMsQ0FBQyxDQUFDO1FBQ1QsQ0FBQyxDQUFBLENBQUM7UUFFRjs7Ozs7V0FLRztRQUNILG1CQUFjLEdBQUcsQ0FBTyxLQUFZLEVBQW1CLEVBQUU7WUFDdkQsTUFBTSxNQUFNLEdBQU87Z0JBQ2pCLEtBQUs7YUFDTixDQUFDO1lBQ0YsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLHFCQUFxQixFQUFFLE1BQU0sQ0FBQztpQkFDaEQsSUFBSSxDQUFDLENBQUMsUUFBNEIsRUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDbkYsQ0FBQyxDQUFBLENBQUM7UUFFRjs7OztXQUlHO1FBQ0gsVUFBSyxHQUFHLEdBQWdDLEVBQUU7WUFBQyxPQUFBLElBQUksQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDO2lCQUNyRSxJQUFJLENBQUMsQ0FBQyxRQUE0QixFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQTtVQUFBLENBQUM7SUFFZ0IsQ0FBQztDQUN4RjtBQTVGRCwwQkE0RkMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBwYWNrYWdlRG9jdW1lbnRhdGlvblxuICogQG1vZHVsZSBBUEktSW5mb1xuICovXG5pbXBvcnQgQXZhbGFuY2hlQ29yZSBmcm9tICcuLi8uLi9hdmFsYW5jaGUnO1xuaW1wb3J0IHsgSlJQQ0FQSSB9IGZyb20gJy4uLy4uL2NvbW1vbi9qcnBjYXBpJztcbmltcG9ydCB7IFJlcXVlc3RSZXNwb25zZURhdGEgfSBmcm9tICcuLi8uLi9jb21tb24vYXBpYmFzZSc7XG5pbXBvcnQgQk4gZnJvbSBcImJuLmpzXCI7XG5cbi8qKlxuICogQ2xhc3MgZm9yIGludGVyYWN0aW5nIHdpdGggYSBub2RlJ3MgSW5mb0FQSS5cbiAqXG4gKiBAY2F0ZWdvcnkgUlBDQVBJc1xuICpcbiAqIEByZW1hcmtzIFRoaXMgZXh0ZW5kcyB0aGUgW1tKUlBDQVBJXV0gY2xhc3MuIFRoaXMgY2xhc3Mgc2hvdWxkIG5vdCBiZSBkaXJlY3RseSBjYWxsZWQuIEluc3RlYWQsIHVzZSB0aGUgW1tBdmFsYW5jaGUuYWRkQVBJXV0gZnVuY3Rpb24gdG8gcmVnaXN0ZXIgdGhpcyBpbnRlcmZhY2Ugd2l0aCBBdmFsYW5jaGUuXG4gKi9cbmV4cG9ydCBjbGFzcyBJbmZvQVBJIGV4dGVuZHMgSlJQQ0FQSSB7XG4gIC8qKlxuICAgKiBGZXRjaGVzIHRoZSBibG9ja2NoYWluSUQgZnJvbSB0aGUgbm9kZSBmb3IgYSBnaXZlbiBhbGlhcy5cbiAgICpcbiAgICogQHBhcmFtIGFsaWFzIFRoZSBibG9ja2NoYWluIGFsaWFzIHRvIGdldCB0aGUgYmxvY2tjaGFpbklEXG4gICAqXG4gICAqIEByZXR1cm5zIFJldHVybnMgYSBQcm9taXNlPHN0cmluZz4gY29udGFpbmluZyB0aGUgYmFzZSA1OCBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIGJsb2NrY2hhaW5JRC5cbiAgICovXG4gIGdldEJsb2NrY2hhaW5JRCA9IGFzeW5jIChhbGlhczpzdHJpbmcpOlByb21pc2U8c3RyaW5nPiA9PiB7XG4gICAgY29uc3QgcGFyYW1zOmFueSA9IHtcbiAgICAgIGFsaWFzLFxuICAgIH07XG4gICAgcmV0dXJuIHRoaXMuY2FsbE1ldGhvZCgnaW5mby5nZXRCbG9ja2NoYWluSUQnLCBwYXJhbXMpXG4gICAgICAudGhlbigocmVzcG9uc2U6UmVxdWVzdFJlc3BvbnNlRGF0YSkgPT4gcmVzcG9uc2UuZGF0YS5yZXN1bHQuYmxvY2tjaGFpbklEKTtcbiAgfTtcblxuICAvKipcbiAgICogRmV0Y2hlcyB0aGUgbmV0d29ya0lEIGZyb20gdGhlIG5vZGUuXG4gICAqXG4gICAqIEByZXR1cm5zIFJldHVybnMgYSBQcm9taXNlPG51bWJlcj4gb2YgdGhlIG5ldHdvcmtJRC5cbiAgICovXG4gIGdldE5ldHdvcmtJRCA9IGFzeW5jICgpOlByb21pc2U8bnVtYmVyPiA9PiB7XG4gICAgY29uc3QgcGFyYW1zOmFueSA9IHt9O1xuICAgIHJldHVybiB0aGlzLmNhbGxNZXRob2QoJ2luZm8uZ2V0TmV0d29ya0lEJywgcGFyYW1zKVxuICAgICAgLnRoZW4oKHJlc3BvbnNlOlJlcXVlc3RSZXNwb25zZURhdGEpID0+IHJlc3BvbnNlLmRhdGEucmVzdWx0Lm5ldHdvcmtJRCk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEZldGNoZXMgdGhlIG5ldHdvcmsgbmFtZSB0aGlzIG5vZGUgaXMgcnVubmluZyBvblxuICAgKlxuICAgKiBAcmV0dXJucyBSZXR1cm5zIGEgUHJvbWlzZTxzdHJpbmc+IGNvbnRhaW5pbmcgdGhlIG5ldHdvcmsgbmFtZS5cbiAgICovXG4gIGdldE5ldHdvcmtOYW1lID0gYXN5bmMgKCk6UHJvbWlzZTxzdHJpbmc+ID0+IHRoaXMuY2FsbE1ldGhvZCgnaW5mby5nZXROZXR3b3JrTmFtZScpXG4gICAgLnRoZW4oKHJlc3BvbnNlOlJlcXVlc3RSZXNwb25zZURhdGEpID0+IHJlc3BvbnNlLmRhdGEucmVzdWx0Lm5ldHdvcmtOYW1lKTtcblxuICAvKipcbiAgICogRmV0Y2hlcyB0aGUgbm9kZUlEIGZyb20gdGhlIG5vZGUuXG4gICAqXG4gICAqIEByZXR1cm5zIFJldHVybnMgYSBQcm9taXNlPHN0cmluZz4gb2YgdGhlIG5vZGVJRC5cbiAgICovXG4gIGdldE5vZGVJRCA9IGFzeW5jICgpOlByb21pc2U8c3RyaW5nPiA9PiB7XG4gICAgY29uc3QgcGFyYW1zOmFueSA9IHt9O1xuICAgIHJldHVybiB0aGlzLmNhbGxNZXRob2QoJ2luZm8uZ2V0Tm9kZUlEJywgcGFyYW1zKVxuICAgICAgLnRoZW4oKHJlc3BvbnNlOlJlcXVlc3RSZXNwb25zZURhdGEpID0+IHJlc3BvbnNlLmRhdGEucmVzdWx0Lm5vZGVJRCk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEZldGNoZXMgdGhlIHZlcnNpb24gb2YgR2Vja28gdGhpcyBub2RlIGlzIHJ1bm5pbmdcbiAgICpcbiAgICogQHJldHVybnMgUmV0dXJucyBhIFByb21pc2U8c3RyaW5nPiBjb250YWluaW5nIHRoZSB2ZXJzaW9uIG9mIEdlY2tvLlxuICAgKi9cbiAgZ2V0Tm9kZVZlcnNpb24gPSBhc3luYyAoKTpQcm9taXNlPHN0cmluZz4gPT4gdGhpcy5jYWxsTWV0aG9kKCdpbmZvLmdldE5vZGVWZXJzaW9uJylcbiAgICAudGhlbigocmVzcG9uc2U6UmVxdWVzdFJlc3BvbnNlRGF0YSkgPT4gcmVzcG9uc2UuZGF0YS5yZXN1bHQudmVyc2lvbik7XG5cbiAgLyoqXG4gICAqIEZldGNoZXMgdGhlIHRyYW5zYWN0aW9uIGZlZSBmcm9tIHRoZSBub2RlLlxuICAgKlxuICAgKiBAcmV0dXJucyBSZXR1cm5zIGEgUHJvbWlzZTxvYmplY3Q+IG9mIHRoZSB0cmFuc2FjdGlvbiBmZWUgaW4gbkFWQVguXG4gICAqL1xuICBnZXRUeEZlZSA9IGFzeW5jICgpOlByb21pc2U8e3R4RmVlOkJOLCBjcmVhdGlvblR4RmVlOkJOfT4gPT4ge1xuICAgIHJldHVybiB0aGlzLmNhbGxNZXRob2QoJ2luZm8uZ2V0VHhGZWUnKVxuICAgICAgICAudGhlbigocmVzcG9uc2U6UmVxdWVzdFJlc3BvbnNlRGF0YSkgPT4ge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eEZlZTogbmV3IEJOKHJlc3BvbnNlLmRhdGEucmVzdWx0LnR4RmVlLCAxMCksXG4gICAgICAgICAgICBjcmVhdGlvblR4RmVlOiBuZXcgQk4ocmVzcG9uc2UuZGF0YS5yZXN1bHQuY3JlYXRpb25UeEZlZSwgMTApXG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgfTtcblxuICAvKipcbiAgICogQ2hlY2sgd2hldGhlciBhIGdpdmVuIGNoYWluIGlzIGRvbmUgYm9vdHN0cmFwcGluZ1xuICAgKiBAcGFyYW0gY2hhaW4gVGhlIElEIG9yIGFsaWFzIG9mIGEgY2hhaW4uXG4gICAqXG4gICAqIEByZXR1cm5zIFJldHVybnMgYSBQcm9taXNlPGJvb2xlYW4+IG9mIHdoZXRoZXIgdGhlIGNoYWluIGhhcyBjb21wbGV0ZWQgYm9vdHN0cmFwcGluZy5cbiAgICovXG4gIGlzQm9vdHN0cmFwcGVkID0gYXN5bmMgKGNoYWluOnN0cmluZyk6UHJvbWlzZTxib29sZWFuPiA9PiB7XG4gICAgY29uc3QgcGFyYW1zOmFueSA9IHtcbiAgICAgIGNoYWluXG4gICAgfTtcbiAgICByZXR1cm4gdGhpcy5jYWxsTWV0aG9kKCdpbmZvLmlzQm9vdHN0cmFwcGVkJywgcGFyYW1zKVxuICAgICAgICAudGhlbigocmVzcG9uc2U6UmVxdWVzdFJlc3BvbnNlRGF0YSkgPT4gcmVzcG9uc2UuZGF0YS5yZXN1bHQuaXNCb290c3RyYXBwZWQpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBwZWVycyBjb25uZWN0ZWQgdG8gdGhlIG5vZGUuXG4gICAqXG4gICAqIEByZXR1cm5zIFByb21pc2UgZm9yIHRoZSBsaXN0IG9mIGNvbm5lY3RlZCBwZWVycyBpbiA8aXA+Ojxwb3J0PiBmb3JtYXQuXG4gICAqL1xuICBwZWVycyA9IGFzeW5jICgpOlByb21pc2U8QXJyYXk8c3RyaW5nPj4gPT4gdGhpcy5jYWxsTWV0aG9kKCdpbmZvLnBlZXJzJylcbiAgICAudGhlbigocmVzcG9uc2U6UmVxdWVzdFJlc3BvbnNlRGF0YSkgPT4gcmVzcG9uc2UuZGF0YS5yZXN1bHQucGVlcnMpO1xuXG4gIGNvbnN0cnVjdG9yKGNvcmU6QXZhbGFuY2hlQ29yZSwgYmFzZXVybDpzdHJpbmcgPSAnL2V4dC9pbmZvJykgeyBzdXBlcihjb3JlLCBiYXNldXJsKTsgfVxufVxuIl19","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SECPOwnerOutput = exports.StakeableLockOut = exports.SECPTransferOutput = exports.AmountOutput = exports.ParseableOutput = exports.TransferableOutput = exports.SelectOutputClass = void 0;\n/**\n * @packageDocumentation\n * @module API-PlatformVM-Outputs\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst output_1 = require(\"../../common/output\");\nconst serialization_1 = require(\"../../utils/serialization\");\nconst bintools = bintools_1.default.getInstance();\nconst serializer = serialization_1.Serialization.getInstance();\n/**\n * Takes a buffer representing the output and returns the proper Output instance.\n *\n * @param outputid A number representing the inputID parsed prior to the bytes passed in\n *\n * @returns An instance of an [[Output]]-extended class.\n */\nexports.SelectOutputClass = (outputid, ...args) => {\n    if (outputid == constants_1.PlatformVMConstants.SECPXFEROUTPUTID) {\n        return new SECPTransferOutput(...args);\n    }\n    else if (outputid == constants_1.PlatformVMConstants.SECPOWNEROUTPUTID) {\n        return new SECPOwnerOutput(...args);\n    }\n    else if (outputid == constants_1.PlatformVMConstants.STAKEABLELOCKOUTID) {\n        return new StakeableLockOut(...args);\n    }\n    throw new Error(\"Error - SelectOutputClass: unknown outputid \" + outputid);\n};\nclass TransferableOutput extends output_1.StandardTransferableOutput {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"TransferableOutput\";\n        this._typeID = undefined;\n    }\n    //serialize is inherited\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.output = exports.SelectOutputClass(fields[\"output\"][\"_typeID\"]);\n        this.output.deserialize(fields[\"output\"], encoding);\n    }\n    fromBuffer(bytes, offset = 0) {\n        this.assetID = bintools.copyFrom(bytes, offset, offset + constants_1.PlatformVMConstants.ASSETIDLEN);\n        offset += constants_1.PlatformVMConstants.ASSETIDLEN;\n        const outputid = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);\n        offset += 4;\n        this.output = exports.SelectOutputClass(outputid);\n        return this.output.fromBuffer(bytes, offset);\n    }\n}\nexports.TransferableOutput = TransferableOutput;\nclass ParseableOutput extends output_1.StandardParseableOutput {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"ParseableOutput\";\n        this._typeID = undefined;\n    }\n    //serialize is inherited\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.output = exports.SelectOutputClass(fields[\"output\"][\"_typeID\"]);\n        this.output.deserialize(fields[\"output\"], encoding);\n    }\n    fromBuffer(bytes, offset = 0) {\n        const outputid = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);\n        offset += 4;\n        this.output = exports.SelectOutputClass(outputid);\n        return this.output.fromBuffer(bytes, offset);\n    }\n}\nexports.ParseableOutput = ParseableOutput;\nclass AmountOutput extends output_1.StandardAmountOutput {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"AmountOutput\";\n        this._typeID = undefined;\n    }\n    //serialize and deserialize both are inherited\n    /**\n     * @param assetID An assetID which is wrapped around the Buffer of the Output\n     */\n    makeTransferable(assetID) {\n        return new TransferableOutput(assetID, this);\n    }\n    select(id, ...args) {\n        return exports.SelectOutputClass(id, ...args);\n    }\n}\nexports.AmountOutput = AmountOutput;\n/**\n * An [[Output]] class which specifies an Output that carries an ammount for an assetID and uses secp256k1 signature scheme.\n */\nclass SECPTransferOutput extends AmountOutput {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"SECPTransferOutput\";\n        this._typeID = constants_1.PlatformVMConstants.SECPXFEROUTPUTID;\n    }\n    //serialize and deserialize both are inherited\n    /**\n     * Returns the outputID for this output\n     */\n    getOutputID() {\n        return this._typeID;\n    }\n    create(...args) {\n        return new SECPTransferOutput(...args);\n    }\n    clone() {\n        const newout = this.create();\n        newout.fromBuffer(this.toBuffer());\n        return newout;\n    }\n}\nexports.SECPTransferOutput = SECPTransferOutput;\n/**\n * An [[Output]] class which specifies an input that has a locktime which can also enable staking of the value held, preventing transfers but not validation.\n */\nclass StakeableLockOut extends AmountOutput {\n    /**\n     * A [[Output]] class which specifies a [[ParseableOutput]] that has a locktime which can also enable staking of the value held, preventing transfers but not validation.\n     *\n     * @param amount A {@link https://github.com/indutny/bn.js/|BN} representing the amount in the output\n     * @param addresses An array of {@link https://github.com/feross/buffer|Buffer}s representing addresses\n     * @param locktime A {@link https://github.com/indutny/bn.js/|BN} representing the locktime\n     * @param threshold A number representing the the threshold number of signers required to sign the transaction\n     * @param stakeableLocktime A {@link https://github.com/indutny/bn.js/|BN} representing the stakeable locktime\n     * @param transferableOutput A [[ParseableOutput]] which is embedded into this output.\n     */\n    constructor(amount = undefined, addresses = undefined, locktime = undefined, threshold = undefined, stakeableLocktime = undefined, transferableOutput = undefined) {\n        super(amount, addresses, locktime, threshold);\n        this._typeName = \"StakeableLockOut\";\n        this._typeID = constants_1.PlatformVMConstants.STAKEABLELOCKOUTID;\n        if (typeof stakeableLocktime !== \"undefined\") {\n            this.stakeableLocktime = bintools.fromBNToBuffer(stakeableLocktime, 8);\n        }\n        if (typeof transferableOutput !== \"undefined\") {\n            this.transferableOutput = transferableOutput;\n            this.synchronize();\n        }\n    }\n    //serialize and deserialize both are inherited\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        let outobj = Object.assign(Object.assign({}, fields), { \"stakeableLocktime\": serializer.encoder(this.stakeableLocktime, encoding, \"Buffer\", \"decimalString\", 8), \"transferableOutput\": this.transferableOutput.serialize(encoding) });\n        delete outobj[\"addresses\"];\n        delete outobj[\"locktime\"];\n        delete outobj[\"threshold\"];\n        delete outobj[\"amount\"];\n        return outobj;\n    }\n    ;\n    deserialize(fields, encoding = \"hex\") {\n        fields[\"addresses\"] = [];\n        fields[\"locktime\"] = \"0\";\n        fields[\"threshold\"] = \"1\";\n        fields[\"amount\"] = \"99\";\n        super.deserialize(fields, encoding);\n        this.stakeableLocktime = serializer.decoder(fields[\"stakeableLocktime\"], encoding, \"decimalString\", \"Buffer\", 8);\n        this.transferableOutput = new ParseableOutput();\n        this.transferableOutput.deserialize(fields[\"transferableOutput\"], encoding);\n        this.synchronize();\n    }\n    //call this every time you load in data\n    synchronize() {\n        let output = this.transferableOutput.getOutput();\n        this.addresses = output.getAddresses().map((a) => {\n            let addr = new output_1.Address();\n            addr.fromBuffer(a);\n            return addr;\n        });\n        this.numaddrs = buffer_1.Buffer.alloc(4);\n        this.numaddrs.writeUInt32BE(this.addresses.length, 0);\n        this.locktime = bintools.fromBNToBuffer(output.getLocktime(), 8);\n        this.threshold = buffer_1.Buffer.alloc(4);\n        this.threshold.writeUInt32BE(output.getThreshold(), 0);\n        this.amount = bintools.fromBNToBuffer(output.getAmount(), 8);\n        this.amountValue = output.getAmount();\n    }\n    getStakeableLocktime() {\n        return bintools.fromBufferToBN(this.stakeableLocktime);\n    }\n    getTransferableOutput() {\n        return this.transferableOutput;\n    }\n    /**\n     * @param assetID An assetID which is wrapped around the Buffer of the Output\n     */\n    makeTransferable(assetID) {\n        return new TransferableOutput(assetID, this);\n    }\n    select(id, ...args) {\n        return exports.SelectOutputClass(id, ...args);\n    }\n    /**\n     * Popuates the instance from a {@link https://github.com/feross/buffer|Buffer} representing the [[StakeableLockOut]] and returns the size of the output.\n     */\n    fromBuffer(outbuff, offset = 0) {\n        this.stakeableLocktime = bintools.copyFrom(outbuff, offset, offset + 8);\n        offset += 8;\n        this.transferableOutput = new ParseableOutput();\n        offset = this.transferableOutput.fromBuffer(outbuff, offset);\n        this.synchronize();\n        return offset;\n    }\n    /**\n     * Returns the buffer representing the [[StakeableLockOut]] instance.\n     */\n    toBuffer() {\n        let xferoutBuff = this.transferableOutput.toBuffer();\n        const bsize = this.stakeableLocktime.length + xferoutBuff.length;\n        const barr = [this.stakeableLocktime, xferoutBuff];\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n    /**\n     * Returns the outputID for this output\n     */\n    getOutputID() {\n        return this._typeID;\n    }\n    create(...args) {\n        return new StakeableLockOut(...args);\n    }\n    clone() {\n        const newout = this.create();\n        newout.fromBuffer(this.toBuffer());\n        return newout;\n    }\n}\nexports.StakeableLockOut = StakeableLockOut;\n/**\n * An [[Output]] class which only specifies an Output ownership and uses secp256k1 signature scheme.\n */\nclass SECPOwnerOutput extends output_1.Output {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"SECPOwnerOutput\";\n        this._typeID = constants_1.PlatformVMConstants.SECPOWNEROUTPUTID;\n    }\n    //serialize and deserialize both are inherited\n    /**\n     * Returns the outputID for this output\n     */\n    getOutputID() {\n        return this._typeID;\n    }\n    /**\n     *\n     * @param assetID An assetID which is wrapped around the Buffer of the Output\n     */\n    makeTransferable(assetID) {\n        return new TransferableOutput(assetID, this);\n    }\n    create(...args) {\n        return new SECPOwnerOutput(...args);\n    }\n    clone() {\n        const newout = this.create();\n        newout.fromBuffer(this.toBuffer());\n        return newout;\n    }\n    select(id, ...args) {\n        return exports.SelectOutputClass(id, ...args);\n    }\n}\nexports.SECPOwnerOutput = SECPOwnerOutput;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\n/**\n * @packageDocumentation\n * @module Common-Output\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BaseNFTOutput = exports.StandardAmountOutput = exports.StandardTransferableOutput = exports.StandardParseableOutput = exports.Output = exports.OutputOwners = exports.Address = void 0;\nconst buffer_1 = require(\"buffer/\");\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst bintools_1 = __importDefault(require(\"../utils/bintools\"));\nconst nbytes_1 = require(\"./nbytes\");\nconst helperfunctions_1 = require(\"../utils/helperfunctions\");\nconst serialization_1 = require(\"../utils/serialization\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serializer = serialization_1.Serialization.getInstance();\n/**\n * Class for representing an address used in [[Output]] types\n */\nclass Address extends nbytes_1.NBytes {\n    /**\n     * Class for representing an address used in [[Output]] types\n     */\n    constructor() {\n        super();\n        this._typeName = \"Address\";\n        this._typeID = undefined;\n        //serialize and deserialize both are inherited\n        this.bytes = buffer_1.Buffer.alloc(20);\n        this.bsize = 20;\n    }\n    /**\n       * Returns a base-58 representation of the [[Address]].\n       */\n    toString() {\n        return bintools.cb58Encode(this.toBuffer());\n    }\n    /**\n       * Takes a base-58 string containing an [[Address]], parses it, populates the class, and returns the length of the Address in bytes.\n       *\n       * @param bytes A base-58 string containing a raw [[Address]]\n       *\n       * @returns The length of the raw [[Address]]\n       */\n    fromString(addr) {\n        const addrbuff = bintools.b58ToBuffer(addr);\n        if (addrbuff.length === 24 && bintools.validateChecksum(addrbuff)) {\n            const newbuff = bintools.copyFrom(addrbuff, 0, addrbuff.length - 4);\n            if (newbuff.length === 20) {\n                this.bytes = newbuff;\n            }\n        }\n        else if (addrbuff.length === 24) {\n            throw new Error('Error - Address.fromString: invalid checksum on address');\n        }\n        else if (addrbuff.length === 20) {\n            this.bytes = addrbuff;\n        }\n        else {\n            /* istanbul ignore next */\n            throw new Error('Error - Address.fromString: invalid address');\n        }\n        return this.getSize();\n    }\n    clone() {\n        let newbase = new Address();\n        newbase.fromBuffer(this.toBuffer());\n        return newbase;\n    }\n    create(...args) {\n        return new Address();\n    }\n}\nexports.Address = Address;\n/**\n * Returns a function used to sort an array of [[Address]]es\n */\nAddress.comparator = () => (a, b) => buffer_1.Buffer.compare(a.toBuffer(), b.toBuffer());\n/**\n * Defines the most basic values for output ownership. Mostly inherited from, but can be used in population of NFT Owner data.\n */\nclass OutputOwners extends serialization_1.Serializable {\n    /**\n     * An [[Output]] class which contains addresses, locktimes, and thresholds.\n     *\n     * @param addresses An array of {@link https://github.com/feross/buffer|Buffer}s representing output owner's addresses\n     * @param locktime A {@link https://github.com/indutny/bn.js/|BN} representing the locktime\n     * @param threshold A number representing the the threshold number of signers required to sign the transaction\n     */\n    constructor(addresses = undefined, locktime = undefined, threshold = undefined) {\n        super();\n        this._typeName = \"OutputOwners\";\n        this._typeID = undefined;\n        this.locktime = buffer_1.Buffer.alloc(8);\n        this.threshold = buffer_1.Buffer.alloc(4);\n        this.numaddrs = buffer_1.Buffer.alloc(4);\n        this.addresses = [];\n        /**\n         * Returns the threshold of signers required to spend this output.\n         */\n        this.getThreshold = () => this.threshold.readUInt32BE(0);\n        /**\n         * Returns the a {@link https://github.com/indutny/bn.js/|BN} repersenting the UNIX Timestamp when the lock is made available.\n         */\n        this.getLocktime = () => bintools.fromBufferToBN(this.locktime);\n        /**\n         * Returns an array of {@link https://github.com/feross/buffer|Buffer}s for the addresses.\n         */\n        this.getAddresses = () => {\n            const result = [];\n            for (let i = 0; i < this.addresses.length; i++) {\n                result.push(this.addresses[i].toBuffer());\n            }\n            return result;\n        };\n        /**\n         * Returns the index of the address.\n         *\n         * @param address A {@link https://github.com/feross/buffer|Buffer} of the address to look up to return its index.\n         *\n         * @returns The index of the address.\n         */\n        this.getAddressIdx = (address) => {\n            for (let i = 0; i < this.addresses.length; i++) {\n                if (this.addresses[i].toBuffer().toString('hex') === address.toString('hex')) {\n                    return i;\n                }\n            }\n            /* istanbul ignore next */\n            return -1;\n        };\n        /**\n         * Returns the address from the index provided.\n         *\n         * @param idx The index of the address.\n         *\n         * @returns Returns the string representing the address.\n         */\n        this.getAddress = (idx) => {\n            if (idx < this.addresses.length) {\n                return this.addresses[idx].toBuffer();\n            }\n            throw new Error('Error - Output.getAddress: idx out of range');\n        };\n        /**\n         * Given an array of address {@link https://github.com/feross/buffer|Buffer}s and an optional timestamp, returns true if the addresses meet the threshold required to spend the output.\n         */\n        this.meetsThreshold = (addresses, asOf = undefined) => {\n            let now;\n            if (typeof asOf === 'undefined') {\n                now = helperfunctions_1.UnixNow();\n            }\n            else {\n                now = asOf;\n            }\n            const qualified = this.getSpenders(addresses, now);\n            const threshold = this.threshold.readUInt32BE(0);\n            if (qualified.length >= threshold) {\n                return true;\n            }\n            return false;\n        };\n        /**\n         * Given an array of addresses and an optional timestamp, select an array of address {@link https://github.com/feross/buffer|Buffer}s of qualified spenders for the output.\n         */\n        this.getSpenders = (addresses, asOf = undefined) => {\n            const qualified = [];\n            let now;\n            if (typeof asOf === 'undefined') {\n                now = helperfunctions_1.UnixNow();\n            }\n            else {\n                now = asOf;\n            }\n            const locktime = bintools.fromBufferToBN(this.locktime);\n            if (now.lte(locktime)) { // not unlocked, not spendable\n                return qualified;\n            }\n            const threshold = this.threshold.readUInt32BE(0);\n            for (let i = 0; i < this.addresses.length && qualified.length < threshold; i++) {\n                for (let j = 0; j < addresses.length && qualified.length < threshold; j++) {\n                    if (addresses[j].toString('hex') === this.addresses[i].toBuffer().toString('hex')) {\n                        qualified.push(addresses[j]);\n                    }\n                }\n            }\n            return qualified;\n        };\n        if (typeof addresses !== \"undefined\" && addresses.length) {\n            const addrs = [];\n            for (let i = 0; i < addresses.length; i++) {\n                addrs[i] = new Address();\n                addrs[i].fromBuffer(addresses[i]);\n            }\n            this.addresses = addrs;\n            this.addresses.sort(Address.comparator());\n            this.numaddrs.writeUInt32BE(this.addresses.length, 0);\n        }\n        if (typeof threshold !== undefined) {\n            this.threshold.writeUInt32BE((threshold || 1), 0);\n        }\n        if (typeof locktime !== \"undefined\") {\n            this.locktime = bintools.fromBNToBuffer(locktime, 8);\n        }\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { \"locktime\": serializer.encoder(this.locktime, encoding, \"Buffer\", \"decimalString\", 8), \"threshold\": serializer.encoder(this.threshold, encoding, \"Buffer\", \"decimalString\", 4), \"addresses\": this.addresses.map((a) => a.serialize(encoding)) });\n    }\n    ;\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.locktime = serializer.decoder(fields[\"locktime\"], encoding, \"decimalString\", \"Buffer\", 8);\n        this.threshold = serializer.decoder(fields[\"threshold\"], encoding, \"decimalString\", \"Buffer\", 4);\n        this.addresses = fields[\"addresses\"].map((a) => {\n            let addr = new Address();\n            addr.deserialize(a, encoding);\n            return addr;\n        });\n        this.numaddrs = buffer_1.Buffer.alloc(4);\n        this.numaddrs.writeUInt32BE(this.addresses.length, 0);\n    }\n    /**\n     * Returns a base-58 string representing the [[Output]].\n     */\n    fromBuffer(bytes, offset = 0) {\n        this.locktime = bintools.copyFrom(bytes, offset, offset + 8);\n        offset += 8;\n        this.threshold = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        this.numaddrs = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const numaddrs = this.numaddrs.readUInt32BE(0);\n        this.addresses = [];\n        for (let i = 0; i < numaddrs; i++) {\n            const addr = new Address();\n            offset = addr.fromBuffer(bytes, offset);\n            this.addresses.push(addr);\n        }\n        this.addresses.sort(Address.comparator());\n        return offset;\n    }\n    /**\n     * Returns the buffer representing the [[Output]] instance.\n     */\n    toBuffer() {\n        this.addresses.sort(Address.comparator());\n        this.numaddrs.writeUInt32BE(this.addresses.length, 0);\n        let bsize = this.locktime.length + this.threshold.length + this.numaddrs.length;\n        const barr = [this.locktime, this.threshold, this.numaddrs];\n        for (let i = 0; i < this.addresses.length; i++) {\n            const b = this.addresses[i].toBuffer();\n            barr.push(b);\n            bsize += b.length;\n        }\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n    /**\n     * Returns a base-58 string representing the [[Output]].\n     */\n    toString() {\n        return bintools.bufferToB58(this.toBuffer());\n    }\n}\nexports.OutputOwners = OutputOwners;\nOutputOwners.comparator = () => (a, b) => {\n    const aoutid = buffer_1.Buffer.alloc(4);\n    aoutid.writeUInt32BE(a.getOutputID(), 0);\n    const abuff = a.toBuffer();\n    const boutid = buffer_1.Buffer.alloc(4);\n    boutid.writeUInt32BE(b.getOutputID(), 0);\n    const bbuff = b.toBuffer();\n    const asort = buffer_1.Buffer.concat([aoutid, abuff], aoutid.length + abuff.length);\n    const bsort = buffer_1.Buffer.concat([boutid, bbuff], boutid.length + bbuff.length);\n    return buffer_1.Buffer.compare(asort, bsort);\n};\nclass Output extends OutputOwners {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"Output\";\n        this._typeID = undefined;\n    }\n}\nexports.Output = Output;\nclass StandardParseableOutput extends serialization_1.Serializable {\n    /**\n     * Class representing an [[ParseableOutput]] for a transaction.\n     *\n     * @param output A number representing the InputID of the [[ParseableOutput]]\n     */\n    constructor(output = undefined) {\n        super();\n        this._typeName = \"StandardParseableOutput\";\n        this._typeID = undefined;\n        this.getOutput = () => this.output;\n        if (output instanceof Output) {\n            this.output = output;\n        }\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { \"output\": this.output.serialize(encoding) });\n    }\n    ;\n    toBuffer() {\n        const outbuff = this.output.toBuffer();\n        const outid = buffer_1.Buffer.alloc(4);\n        outid.writeUInt32BE(this.output.getOutputID(), 0);\n        const barr = [outid, outbuff];\n        return buffer_1.Buffer.concat(barr, outid.length + outbuff.length);\n    }\n}\nexports.StandardParseableOutput = StandardParseableOutput;\n/**\n * Returns a function used to sort an array of [[ParseableOutput]]s\n */\nStandardParseableOutput.comparator = () => (a, b) => {\n    const sorta = a.toBuffer();\n    const sortb = b.toBuffer();\n    return buffer_1.Buffer.compare(sorta, sortb);\n};\nclass StandardTransferableOutput extends StandardParseableOutput {\n    /**\n     * Class representing an [[StandardTransferableOutput]] for a transaction.\n     *\n     * @param assetID A {@link https://github.com/feross/buffer|Buffer} representing the assetID of the [[Output]]\n     * @param output A number representing the InputID of the [[StandardTransferableOutput]]\n     */\n    constructor(assetID = undefined, output = undefined) {\n        super(output);\n        this._typeName = \"StandardTransferableOutput\";\n        this._typeID = undefined;\n        this.assetID = undefined;\n        this.getAssetID = () => this.assetID;\n        if (typeof assetID !== 'undefined') {\n            this.assetID = assetID;\n        }\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { \"assetID\": serializer.encoder(this.assetID, encoding, \"Buffer\", \"cb58\") });\n    }\n    ;\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.assetID = serializer.decoder(fields[\"assetID\"], encoding, \"cb58\", \"Buffer\", 32);\n    }\n    toBuffer() {\n        const parseableBuff = super.toBuffer();\n        const barr = [this.assetID, parseableBuff];\n        return buffer_1.Buffer.concat(barr, this.assetID.length + parseableBuff.length);\n    }\n}\nexports.StandardTransferableOutput = StandardTransferableOutput;\n/**\n * An [[Output]] class which specifies a token amount .\n */\nclass StandardAmountOutput extends Output {\n    /**\n     * A [[StandardAmountOutput]] class which issues a payment on an assetID.\n     *\n     * @param amount A {@link https://github.com/indutny/bn.js/|BN} representing the amount in the output\n     * @param addresses An array of {@link https://github.com/feross/buffer|Buffer}s representing addresses\n     * @param locktime A {@link https://github.com/indutny/bn.js/|BN} representing the locktime\n     * @param threshold A number representing the the threshold number of signers required to sign the transaction\n     */\n    constructor(amount = undefined, addresses = undefined, locktime = undefined, threshold = undefined) {\n        super(addresses, locktime, threshold);\n        this._typeName = \"StandardAmountOutput\";\n        this._typeID = undefined;\n        this.amount = buffer_1.Buffer.alloc(8);\n        this.amountValue = new bn_js_1.default(0);\n        /**\n         * Returns the amount as a {@link https://github.com/indutny/bn.js/|BN}.\n         */\n        this.getAmount = () => this.amountValue.clone();\n        if (typeof amount !== \"undefined\") {\n            this.amountValue = amount.clone();\n            this.amount = bintools.fromBNToBuffer(amount, 8);\n        }\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { \"amount\": serializer.encoder(this.amount, encoding, \"Buffer\", \"decimalString\", 8) });\n    }\n    ;\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.amount = serializer.decoder(fields[\"amount\"], encoding, \"decimalString\", \"Buffer\", 8);\n        this.amountValue = bintools.fromBufferToBN(this.amount);\n    }\n    /**\n     * Popuates the instance from a {@link https://github.com/feross/buffer|Buffer} representing the [[StandardAmountOutput]] and returns the size of the output.\n     */\n    fromBuffer(outbuff, offset = 0) {\n        this.amount = bintools.copyFrom(outbuff, offset, offset + 8);\n        this.amountValue = bintools.fromBufferToBN(this.amount);\n        offset += 8;\n        return super.fromBuffer(outbuff, offset);\n    }\n    /**\n     * Returns the buffer representing the [[StandardAmountOutput]] instance.\n     */\n    toBuffer() {\n        const superbuff = super.toBuffer();\n        const bsize = this.amount.length + superbuff.length;\n        this.numaddrs.writeUInt32BE(this.addresses.length, 0);\n        const barr = [this.amount, superbuff];\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n}\nexports.StandardAmountOutput = StandardAmountOutput;\n/**\n * An [[Output]] class which specifies an NFT.\n */\nclass BaseNFTOutput extends Output {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"BaseNFTOutput\";\n        this._typeID = undefined;\n        this.groupID = buffer_1.Buffer.alloc(4);\n        /**\n         * Returns the groupID as a number.\n         */\n        this.getGroupID = () => {\n            return this.groupID.readUInt32BE(0);\n        };\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { \"groupID\": serializer.encoder(this.groupID, encoding, \"Buffer\", \"decimalString\", 4) });\n    }\n    ;\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.groupID = serializer.decoder(fields[\"groupID\"], encoding, \"decimalString\", \"Buffer\", 4);\n    }\n}\nexports.BaseNFTOutput = BaseNFTOutput;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UTXOSet = exports.AssetAmountDestination = exports.UTXO = void 0;\n/**\n * @packageDocumentation\n * @module API-PlatformVM-UTXOs\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst outputs_1 = require(\"./outputs\");\nconst inputs_1 = require(\"./inputs\");\nconst helperfunctions_1 = require(\"../../utils/helperfunctions\");\nconst utxos_1 = require(\"../../common/utxos\");\nconst constants_1 = require(\"./constants\");\nconst tx_1 = require(\"./tx\");\nconst exporttx_1 = require(\"../platformvm/exporttx\");\nconst constants_2 = require(\"../../utils/constants\");\nconst importtx_1 = require(\"../platformvm/importtx\");\nconst basetx_1 = require(\"../platformvm/basetx\");\nconst assetamount_1 = require(\"../../common/assetamount\");\nconst validationtx_1 = require(\"./validationtx\");\nconst createsubnettx_1 = require(\"./createsubnettx\");\nconst serialization_1 = require(\"../../utils/serialization\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serializer = serialization_1.Serialization.getInstance();\n/**\n * Class for representing a single UTXO.\n */\nclass UTXO extends utxos_1.StandardUTXO {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"UTXO\";\n        this._typeID = undefined;\n    }\n    //serialize is inherited\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.output = outputs_1.SelectOutputClass(fields[\"output\"][\"_typeID\"]);\n        this.output.deserialize(fields[\"output\"], encoding);\n    }\n    fromBuffer(bytes, offset = 0) {\n        this.codecid = bintools.copyFrom(bytes, offset, offset + 2);\n        offset += 2;\n        this.txid = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        this.outputidx = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        this.assetid = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        const outputid = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);\n        offset += 4;\n        this.output = outputs_1.SelectOutputClass(outputid);\n        return this.output.fromBuffer(bytes, offset);\n    }\n    /**\n     * Takes a base-58 string containing a [[UTXO]], parses it, populates the class, and returns the length of the StandardUTXO in bytes.\n     *\n     * @param serialized A base-58 string containing a raw [[UTXO]]\n     *\n     * @returns The length of the raw [[UTXO]]\n     *\n     * @remarks\n     * unlike most fromStrings, it expects the string to be serialized in cb58 format\n     */\n    fromString(serialized) {\n        /* istanbul ignore next */\n        return this.fromBuffer(bintools.cb58Decode(serialized));\n    }\n    /**\n     * Returns a base-58 representation of the [[UTXO]].\n     *\n     * @remarks\n     * unlike most toStrings, this returns in cb58 serialization format\n     */\n    toString() {\n        /* istanbul ignore next */\n        return bintools.cb58Encode(this.toBuffer());\n    }\n    clone() {\n        const utxo = new UTXO();\n        utxo.fromBuffer(this.toBuffer());\n        return utxo;\n    }\n    create(codecID = constants_1.PlatformVMConstants.LATESTCODEC, txid = undefined, outputidx = undefined, assetid = undefined, output = undefined) {\n        return new UTXO(codecID, txid, outputidx, assetid, output);\n    }\n}\nexports.UTXO = UTXO;\nclass AssetAmountDestination extends assetamount_1.StandardAssetAmountDestination {\n}\nexports.AssetAmountDestination = AssetAmountDestination;\n/**\n * Class representing a set of [[UTXO]]s.\n */\nclass UTXOSet extends utxos_1.StandardUTXOSet {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"UTXOSet\";\n        this._typeID = undefined;\n        this.getConsumableUXTO = (asOf = helperfunctions_1.UnixNow(), stakeable = false) => {\n            return this.getAllUTXOs().filter((utxo) => {\n                if (stakeable) {\n                    // stakeable transactions can consume any UTXO.\n                    return true;\n                }\n                const output = utxo.getOutput();\n                if (!(output instanceof outputs_1.StakeableLockOut)) {\n                    // non-stakeable transactions can consume any UTXO that isn't locked.\n                    return true;\n                }\n                const stakeableOutput = output;\n                if (stakeableOutput.getStakeableLocktime().lt(asOf)) {\n                    // If the stakeable outputs locktime has ended, then this UTXO can still\n                    // be consumed by a non-stakeable transaction.\n                    return true;\n                }\n                // This output is locked and can't be consumed by a non-stakeable\n                // transaction.\n                return false;\n            });\n        };\n        this.getMinimumSpendable = (aad, asOf = helperfunctions_1.UnixNow(), locktime = new bn_js_1.default(0), threshold = 1, stakeable = false) => {\n            let utxoArray = this.getConsumableUXTO(asOf, stakeable);\n            let tmpUTXOArray = [];\n            if (stakeable) {\n                // If this is a stakeable transaction then have StakeableLockOut come before SECPTransferOutput\n                // so that users first stake locked tokens before staking unlocked tokens\n                utxoArray.forEach((utxo) => {\n                    // StakeableLockOuts\n                    if (utxo.getOutput().getTypeID() === 22) {\n                        tmpUTXOArray.push(utxo);\n                    }\n                });\n                // Sort the StakeableLockOuts by StakeableLocktime so that the greatest StakeableLocktime are spent first\n                tmpUTXOArray.sort((a, b) => {\n                    let stakeableLockOut1 = a.getOutput();\n                    let stakeableLockOut2 = b.getOutput();\n                    return stakeableLockOut2.getStakeableLocktime().toNumber() - stakeableLockOut1.getStakeableLocktime().toNumber();\n                });\n                utxoArray.forEach((utxo) => {\n                    // SECPTransferOutputs\n                    if (utxo.getOutput().getTypeID() === 7) {\n                        tmpUTXOArray.push(utxo);\n                    }\n                });\n                utxoArray = tmpUTXOArray;\n            }\n            // outs is a map from assetID to a tuple of (lockedStakeable, unlocked)\n            // which are arrays of outputs.\n            const outs = {};\n            // We only need to iterate over UTXOs until we have spent sufficient funds\n            // to met the requested amounts.\n            utxoArray.forEach((utxo, index) => {\n                const assetID = utxo.getAssetID();\n                const assetKey = assetID.toString(\"hex\");\n                const fromAddresses = aad.getSenders();\n                const output = utxo.getOutput();\n                if (!(output instanceof outputs_1.AmountOutput) || !aad.assetExists(assetKey) || !output.meetsThreshold(fromAddresses, asOf)) {\n                    // We should only try to spend fungible assets.\n                    // We should only spend {{ assetKey }}.\n                    // We need to be able to spend the output.\n                    return;\n                }\n                const assetAmount = aad.getAssetAmount(assetKey);\n                if (assetAmount.isFinished()) {\n                    // We've already spent the needed UTXOs for this assetID.\n                    return;\n                }\n                if (!(assetKey in outs)) {\n                    // If this is the first time spending this assetID, we need to\n                    // initialize the outs object correctly.\n                    outs[assetKey] = {\n                        lockedStakeable: [],\n                        unlocked: [],\n                    };\n                }\n                const amountOutput = output;\n                // amount is the amount of funds available from this UTXO.\n                const amount = amountOutput.getAmount();\n                // Set up the SECP input with the same amount as the output.\n                let input = new inputs_1.SECPTransferInput(amount);\n                let locked = false;\n                if (amountOutput instanceof outputs_1.StakeableLockOut) {\n                    const stakeableOutput = amountOutput;\n                    const stakeableLocktime = stakeableOutput.getStakeableLocktime();\n                    if (stakeableLocktime.gt(asOf)) {\n                        // Add a new input and mark it as being locked.\n                        input = new inputs_1.StakeableLockIn(amount, stakeableLocktime, new inputs_1.ParseableInput(input));\n                        // Mark this UTXO as having been re-locked.\n                        locked = true;\n                    }\n                }\n                assetAmount.spendAmount(amount, locked);\n                if (locked) {\n                    // Track the UTXO as locked.\n                    outs[assetKey].lockedStakeable.push(amountOutput);\n                }\n                else {\n                    // Track the UTXO as unlocked.\n                    outs[assetKey].unlocked.push(amountOutput);\n                }\n                // Get the indices of the outputs that should be used to authorize the\n                // spending of this input.\n                // TODO: getSpenders should return an array of indices rather than an\n                // array of addresses.\n                const spenders = amountOutput.getSpenders(fromAddresses, asOf);\n                spenders.forEach((spender) => {\n                    const idx = amountOutput.getAddressIdx(spender);\n                    if (idx === -1) {\n                        // This should never happen, which is why the error is thrown rather\n                        // than being returned. If this were to ever happen this would be an\n                        // error in the internal logic rather having called this function with\n                        // invalid arguments.\n                        /* istanbul ignore next */\n                        throw new Error('Error - UTXOSet.getMinimumSpendable: no such '\n                            + `address in output: ${spender}`);\n                    }\n                    input.addSignatureIdx(idx, spender);\n                });\n                const txID = utxo.getTxID();\n                const outputIdx = utxo.getOutputIdx();\n                const transferInput = new inputs_1.TransferableInput(txID, outputIdx, assetID, input);\n                aad.addInput(transferInput);\n            });\n            if (!aad.canComplete()) {\n                // After running through all the UTXOs, we still weren't able to get all\n                // the necessary funds, so this transaction can't be made.\n                return new Error('Error - UTXOSet.getMinimumSpendable: insufficient '\n                    + 'funds to create the transaction');\n            }\n            // TODO: We should separate the above functionality into a single function\n            // that just selects the UTXOs to consume.\n            const zero = new bn_js_1.default(0);\n            // assetAmounts is an array of asset descriptions and how much is left to\n            // spend for them.\n            const assetAmounts = aad.getAmounts();\n            assetAmounts.forEach((assetAmount) => {\n                // change is the amount that should be returned back to the source of the\n                // funds.\n                const change = assetAmount.getChange();\n                // isStakeableLockChange is if the change is locked or not.\n                const isStakeableLockChange = assetAmount.getStakeableLockChange();\n                // lockedChange is the amount of locked change that should be returned to\n                // the sender\n                const lockedChange = isStakeableLockChange ? change : zero.clone();\n                const assetID = assetAmount.getAssetID();\n                const assetKey = assetAmount.getAssetIDString();\n                const lockedOutputs = outs[assetKey].lockedStakeable;\n                lockedOutputs.forEach((lockedOutput, i) => {\n                    const stakeableLocktime = lockedOutput.getStakeableLocktime();\n                    const parseableOutput = lockedOutput.getTransferableOutput();\n                    // We know that parseableOutput contains an AmountOutput because the\n                    // first loop filters for fungible assets.\n                    const output = parseableOutput.getOutput();\n                    let outputAmountRemaining = output.getAmount();\n                    // The only output that could generate change is the last output.\n                    // Otherwise, any further UTXOs wouldn't have needed to be spent.\n                    if (i == lockedOutputs.length - 1 && lockedChange.gt(zero)) {\n                        // update outputAmountRemaining to no longer hold the change that we\n                        // are returning.\n                        outputAmountRemaining = outputAmountRemaining.sub(lockedChange);\n                        // Create the inner output.\n                        const newChangeOutput = outputs_1.SelectOutputClass(output.getOutputID(), lockedChange, output.getAddresses(), output.getLocktime(), output.getThreshold());\n                        // Wrap the inner output in the StakeableLockOut wrapper.\n                        let newLockedChangeOutput = outputs_1.SelectOutputClass(lockedOutput.getOutputID(), lockedChange, output.getAddresses(), output.getLocktime(), output.getThreshold(), stakeableLocktime, new outputs_1.ParseableOutput(newChangeOutput));\n                        const transferOutput = new outputs_1.TransferableOutput(assetID, newLockedChangeOutput);\n                        aad.addChange(transferOutput);\n                    }\n                    // We know that outputAmountRemaining > 0. Otherwise, we would never\n                    // have consumed this UTXO, as it would be only change.\n                    // Create the inner output.\n                    const newOutput = outputs_1.SelectOutputClass(output.getOutputID(), outputAmountRemaining, output.getAddresses(), output.getLocktime(), output.getThreshold());\n                    // Wrap the inner output in the StakeableLockOut wrapper.\n                    const newLockedOutput = outputs_1.SelectOutputClass(lockedOutput.getOutputID(), outputAmountRemaining, output.getAddresses(), output.getLocktime(), output.getThreshold(), stakeableLocktime, new outputs_1.ParseableOutput(newOutput));\n                    const transferOutput = new outputs_1.TransferableOutput(assetID, newLockedOutput);\n                    aad.addOutput(transferOutput);\n                });\n                // unlockedChange is the amount of unlocked change that should be returned\n                // to the sender\n                const unlockedChange = isStakeableLockChange ? zero.clone() : change;\n                if (unlockedChange.gt(zero)) {\n                    const newChangeOutput = new outputs_1.SECPTransferOutput(unlockedChange, aad.getChangeAddresses(), zero.clone(), // make sure that we don't lock the change output.\n                    1);\n                    const transferOutput = new outputs_1.TransferableOutput(assetID, newChangeOutput);\n                    aad.addChange(transferOutput);\n                }\n                // totalAmountSpent is the total amount of tokens consumed.\n                const totalAmountSpent = assetAmount.getSpent();\n                // stakeableLockedAmount is the total amount of locked tokens consumed.\n                const stakeableLockedAmount = assetAmount.getStakeableLockSpent();\n                // totalUnlockedSpent is the total amount of unlocked tokens consumed.\n                const totalUnlockedSpent = totalAmountSpent.sub(stakeableLockedAmount);\n                // amountBurnt is the amount of unlocked tokens that must be burn.\n                const amountBurnt = assetAmount.getBurn();\n                // totalUnlockedAvailable is the total amount of unlocked tokens available\n                // to be produced.\n                const totalUnlockedAvailable = totalUnlockedSpent.sub(amountBurnt);\n                // unlockedAmount is the amount of unlocked tokens that should be sent.\n                const unlockedAmount = totalUnlockedAvailable.sub(unlockedChange);\n                if (unlockedAmount.gt(zero)) {\n                    const newOutput = new outputs_1.SECPTransferOutput(unlockedAmount, aad.getDestinations(), locktime, threshold);\n                    const transferOutput = new outputs_1.TransferableOutput(assetID, newOutput);\n                    aad.addOutput(transferOutput);\n                }\n            });\n            return undefined;\n        };\n        /**\n         * Creates an [[UnsignedTx]] wrapping a [[BaseTx]]. For more granular control, you may create your own\n         * [[UnsignedTx]] wrapping a [[BaseTx]] manually (with their corresponding [[TransferableInput]]s and [[TransferableOutput]]s).\n         *\n         * @param networkid The number representing NetworkID of the node\n         * @param blockchainid The {@link https://github.com/feross/buffer|Buffer} representing the BlockchainID for the transaction\n         * @param amount The amount of the asset to be spent in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}.\n         * @param assetID {@link https://github.com/feross/buffer|Buffer} of the asset ID for the UTXO\n         * @param toAddresses The addresses to send the funds\n         * @param fromAddresses The addresses being used to send the funds from the UTXOs {@link https://github.com/feross/buffer|Buffer}\n         * @param changeAddresses Optional. The addresses that can spend the change remaining from the spent UTXOs. Default: toAddresses\n         * @param fee Optional. The amount of fees to burn in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}\n         * @param feeAssetID Optional. The assetID of the fees being burned. Default: assetID\n         * @param memo Optional. Contains arbitrary data, up to 256 bytes\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         * @param locktime Optional. The locktime field created in the resulting outputs\n         * @param threshold Optional. The number of signatures required to spend the funds in the resultant UTXO\n         *\n         * @returns An unsigned transaction created from the passed in parameters.\n         *\n         */\n        this.buildBaseTx = (networkid, blockchainid, amount, assetID, toAddresses, fromAddresses, changeAddresses = undefined, fee = undefined, feeAssetID = undefined, memo = undefined, asOf = helperfunctions_1.UnixNow(), locktime = new bn_js_1.default(0), threshold = 1) => {\n            if (threshold > toAddresses.length) {\n                /* istanbul ignore next */\n                throw new Error(`Error - UTXOSet.buildBaseTx: threshold is greater than number of addresses`);\n            }\n            if (typeof changeAddresses === \"undefined\") {\n                changeAddresses = toAddresses;\n            }\n            if (typeof feeAssetID === \"undefined\") {\n                feeAssetID = assetID;\n            }\n            const zero = new bn_js_1.default(0);\n            if (amount.eq(zero)) {\n                return undefined;\n            }\n            const aad = new AssetAmountDestination(toAddresses, fromAddresses, changeAddresses);\n            if (assetID.toString(\"hex\") === feeAssetID.toString(\"hex\")) {\n                aad.addAssetAmount(assetID, amount, fee);\n            }\n            else {\n                aad.addAssetAmount(assetID, amount, zero);\n                if (this._feeCheck(fee, feeAssetID)) {\n                    aad.addAssetAmount(feeAssetID, zero, fee);\n                }\n            }\n            let ins = [];\n            let outs = [];\n            const minSpendableErr = this.getMinimumSpendable(aad, asOf, locktime, threshold);\n            if (typeof minSpendableErr === \"undefined\") {\n                ins = aad.getInputs();\n                outs = aad.getAllOutputs();\n            }\n            else {\n                throw minSpendableErr;\n            }\n            const baseTx = new basetx_1.BaseTx(networkid, blockchainid, outs, ins, memo);\n            return new tx_1.UnsignedTx(baseTx);\n        };\n        /**\n          * Creates an unsigned ImportTx transaction.\n          *\n          * @param networkid The number representing NetworkID of the node\n          * @param blockchainid The {@link https://github.com/feross/buffer|Buffer} representing the BlockchainID for the transaction\n          * @param toAddresses The addresses to send the funds\n          * @param fromAddresses The addresses being used to send the funds from the UTXOs {@link https://github.com/feross/buffer|Buffer}\n          * @param changeAddresses Optional. The addresses that can spend the change remaining from the spent UTXOs. Default: toAddresses\n          * @param importIns An array of [[TransferableInput]]s being imported\n          * @param sourceChain A {@link https://github.com/feross/buffer|Buffer} for the chainid where the imports are coming from.\n          * @param fee Optional. The amount of fees to burn in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}. Fee will come from the inputs first, if they can.\n          * @param feeAssetID Optional. The assetID of the fees being burned.\n          * @param memo Optional contains arbitrary bytes, up to 256 bytes\n          * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n          * @param locktime Optional. The locktime field created in the resulting outputs\n          * @param threshold Optional. The number of signatures required to spend the funds in the resultant UTXO\n          * @returns An unsigned transaction created from the passed in parameters.\n          *\n          */\n        this.buildImportTx = (networkid, blockchainid, toAddresses, fromAddresses, changeAddresses, atomics, sourceChain = undefined, fee = undefined, feeAssetID = undefined, memo = undefined, asOf = helperfunctions_1.UnixNow(), locktime = new bn_js_1.default(0), threshold = 1) => {\n            const zero = new bn_js_1.default(0);\n            let ins = [];\n            let outs = [];\n            if (typeof fee === \"undefined\") {\n                fee = zero.clone();\n            }\n            const importIns = [];\n            let feepaid = new bn_js_1.default(0);\n            let feeAssetStr = feeAssetID.toString(\"hex\");\n            for (let i = 0; i < atomics.length; i++) {\n                const utxo = atomics[i];\n                const assetID = utxo.getAssetID();\n                const output = utxo.getOutput();\n                let amt = output.getAmount().clone();\n                let infeeamount = amt.clone();\n                let assetStr = assetID.toString(\"hex\");\n                if (typeof feeAssetID !== \"undefined\" &&\n                    fee.gt(zero) &&\n                    feepaid.lt(fee) &&\n                    assetStr === feeAssetStr) {\n                    feepaid = feepaid.add(infeeamount);\n                    if (feepaid.gte(fee)) {\n                        infeeamount = feepaid.sub(fee);\n                        feepaid = fee.clone();\n                    }\n                    else {\n                        infeeamount = zero.clone();\n                    }\n                }\n                const txid = utxo.getTxID();\n                const outputidx = utxo.getOutputIdx();\n                const input = new inputs_1.SECPTransferInput(amt);\n                const xferin = new inputs_1.TransferableInput(txid, outputidx, assetID, input);\n                const from = output.getAddresses();\n                const spenders = output.getSpenders(from, asOf);\n                for (let j = 0; j < spenders.length; j++) {\n                    const idx = output.getAddressIdx(spenders[j]);\n                    if (idx === -1) {\n                        /* istanbul ignore next */\n                        throw new Error('Error - UTXOSet.buildImportTx: no such '\n                            + `address in output: ${spenders[j]}`);\n                    }\n                    xferin.getInput().addSignatureIdx(idx, spenders[j]);\n                }\n                importIns.push(xferin);\n                //add extra outputs for each amount (calculated from the imported inputs), minus fees\n                if (infeeamount.gt(zero)) {\n                    const spendout = outputs_1.SelectOutputClass(output.getOutputID(), infeeamount, toAddresses, locktime, threshold);\n                    const xferout = new outputs_1.TransferableOutput(assetID, spendout);\n                    outs.push(xferout);\n                }\n            }\n            // get remaining fees from the provided addresses\n            let feeRemaining = fee.sub(feepaid);\n            if (feeRemaining.gt(zero) && this._feeCheck(feeRemaining, feeAssetID)) {\n                const aad = new AssetAmountDestination(toAddresses, fromAddresses, changeAddresses);\n                aad.addAssetAmount(feeAssetID, zero, feeRemaining);\n                const minSpendableErr = this.getMinimumSpendable(aad, asOf, locktime, threshold);\n                if (typeof minSpendableErr === \"undefined\") {\n                    ins = aad.getInputs();\n                    outs = aad.getAllOutputs();\n                }\n                else {\n                    throw minSpendableErr;\n                }\n            }\n            const importTx = new importtx_1.ImportTx(networkid, blockchainid, outs, ins, memo, sourceChain, importIns);\n            return new tx_1.UnsignedTx(importTx);\n        };\n        /**\n          * Creates an unsigned ExportTx transaction.\n          *\n          * @param networkid The number representing NetworkID of the node\n          * @param blockchainid The {@link https://github.com/feross/buffer|Buffer} representing the BlockchainID for the transaction\n          * @param amount The amount being exported as a {@link https://github.com/indutny/bn.js/|BN}\n          * @param avaxAssetID {@link https://github.com/feross/buffer|Buffer} of the asset ID for AVAX\n          * @param toAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who recieves the AVAX\n          * @param fromAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who owns the AVAX\n          * @param changeAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who gets the change leftover of the AVAX\n          * @param destinationChain Optional. A {@link https://github.com/feross/buffer|Buffer} for the chainid where to send the asset.\n          * @param fee Optional. The amount of fees to burn in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}\n          * @param feeAssetID Optional. The assetID of the fees being burned.\n          * @param memo Optional contains arbitrary bytes, up to 256 bytes\n          * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n          * @param locktime Optional. The locktime field created in the resulting outputs\n          * @param threshold Optional. The number of signatures required to spend the funds in the resultant UTXO\n          *\n          * @returns An unsigned transaction created from the passed in parameters.\n          *\n          */\n        this.buildExportTx = (networkid, blockchainid, amount, avaxAssetID, // TODO: rename this to amountAssetID\n        toAddresses, fromAddresses, changeAddresses = undefined, destinationChain = undefined, fee = undefined, feeAssetID = undefined, memo = undefined, asOf = helperfunctions_1.UnixNow(), locktime = new bn_js_1.default(0), threshold = 1) => {\n            let ins = [];\n            let outs = [];\n            let exportouts = [];\n            if (typeof changeAddresses === \"undefined\") {\n                changeAddresses = toAddresses;\n            }\n            const zero = new bn_js_1.default(0);\n            if (amount.eq(zero)) {\n                return undefined;\n            }\n            if (typeof feeAssetID === \"undefined\") {\n                feeAssetID = avaxAssetID;\n            }\n            else if (feeAssetID.toString(\"hex\") !== avaxAssetID.toString(\"hex\")) {\n                /* istanbul ignore next */\n                throw new Error('Error - UTXOSet.buildExportTx: '\n                    + `feeAssetID must match avaxAssetID`);\n            }\n            if (typeof destinationChain === \"undefined\") {\n                destinationChain = bintools.cb58Decode(constants_2.Defaults.network[networkid].X[\"blockchainID\"]);\n            }\n            const aad = new AssetAmountDestination(toAddresses, fromAddresses, changeAddresses);\n            if (avaxAssetID.toString(\"hex\") === feeAssetID.toString(\"hex\")) {\n                aad.addAssetAmount(avaxAssetID, amount, fee);\n            }\n            else {\n                aad.addAssetAmount(avaxAssetID, amount, zero);\n                if (this._feeCheck(fee, feeAssetID)) {\n                    aad.addAssetAmount(feeAssetID, zero, fee);\n                }\n            }\n            const minSpendableErr = this.getMinimumSpendable(aad, asOf, locktime, threshold);\n            if (typeof minSpendableErr === \"undefined\") {\n                ins = aad.getInputs();\n                outs = aad.getChangeOutputs();\n                exportouts = aad.getOutputs();\n            }\n            else {\n                throw minSpendableErr;\n            }\n            const exportTx = new exporttx_1.ExportTx(networkid, blockchainid, outs, ins, memo, destinationChain, exportouts);\n            return new tx_1.UnsignedTx(exportTx);\n        };\n        /**\n        * Class representing an unsigned [[AddSubnetValidatorTx]] transaction.\n        *\n        * @param networkid Networkid, [[DefaultNetworkID]]\n        * @param blockchainid Blockchainid, default undefined\n        * @param fromAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who pays the fees in AVAX\n        * @param changeAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who gets the change leftover from the fee payment\n        * @param nodeID The node ID of the validator being added.\n        * @param startTime The Unix time when the validator starts validating the Primary Network.\n        * @param endTime The Unix time when the validator stops validating the Primary Network (and staked AVAX is returned).\n        * @param weight The amount of weight for this subnet validator.\n        * @param fee Optional. The amount of fees to burn in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}\n        * @param feeAssetID Optional. The assetID of the fees being burned.\n        * @param memo Optional contains arbitrary bytes, up to 256 bytes\n        * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n        * @param locktime Optional. The locktime field created in the resulting outputs\n        * @param threshold Optional. The number of signatures required to spend the funds in the resultant UTXO\n        *\n        * @returns An unsigned transaction created from the passed in parameters.\n        */\n        /* must implement later once the transaction format signing process is clearer\n        buildAddSubnetValidatorTx = (\n          networkid:number = DefaultNetworkID,\n          blockchainid:Buffer,\n          fromAddresses:Array<Buffer>,\n          changeAddresses:Array<Buffer>,\n          nodeID:Buffer,\n          startTime:BN,\n          endTime:BN,\n          weight:BN,\n          fee:BN = undefined,\n          feeAssetID:Buffer = undefined,\n          memo:Buffer = undefined,\n          asOf:BN = UnixNow()\n        ):UnsignedTx => {\n          let ins:Array<TransferableInput> = [];\n          let outs:Array<TransferableOutput> = [];\n          //let stakeOuts:Array<TransferableOutput> = [];\n          \n          const zero:BN = new BN(0);\n          const now:BN = UnixNow();\n          if (startTime.lt(now) || endTime.lte(startTime)) {\n            throw new Error(\"UTXOSet.buildAddSubnetValidatorTx -- startTime must be in the future and endTime must come after startTime\");\n          }\n         \n          // Not implemented: Fees can be paid from importIns\n          if(this._feeCheck(fee, feeAssetID)) {\n            const aad:AssetAmountDestination = new AssetAmountDestination(fromAddresses, fromAddresses, changeAddresses);\n            aad.addAssetAmount(feeAssetID, zero, fee);\n            const success:Error = this.getMinimumSpendable(aad, asOf);\n            if(typeof success === \"undefined\") {\n              ins = aad.getInputs();\n              outs = aad.getAllOutputs();\n            } else {\n              throw success;\n            }\n          }\n         \n          const UTx:AddSubnetValidatorTx = new AddSubnetValidatorTx(networkid, blockchainid, outs, ins, memo, nodeID, startTime, endTime, weight);\n          return new UnsignedTx(UTx);\n        }\n        */\n        /**\n        * Class representing an unsigned [[AddDelegatorTx]] transaction.\n        *\n        * @param networkid Networkid, [[DefaultNetworkID]]\n        * @param blockchainid Blockchainid, default undefined\n        * @param avaxAssetID {@link https://github.com/feross/buffer|Buffer} of the asset ID for AVAX\n        * @param toAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} recieves the stake at the end of the staking period\n        * @param fromAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who pays the fees and the stake\n        * @param changeAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who gets the change leftover from the staking payment\n        * @param nodeID The node ID of the validator being added.\n        * @param startTime The Unix time when the validator starts validating the Primary Network.\n        * @param endTime The Unix time when the validator stops validating the Primary Network (and staked AVAX is returned).\n        * @param stakeAmount A {@link https://github.com/indutny/bn.js/|BN} for the amount of stake to be delegated in nAVAX.\n        * @param rewardLocktime The locktime field created in the resulting reward outputs\n        * @param rewardThreshold The number of signatures required to spend the funds in the resultant reward UTXO\n        * @param rewardAddresses The addresses the validator reward goes.\n        * @param fee Optional. The amount of fees to burn in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}\n        * @param feeAssetID Optional. The assetID of the fees being burned.\n        * @param memo Optional contains arbitrary bytes, up to 256 bytes\n        * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n        *\n        * @returns An unsigned transaction created from the passed in parameters.\n        */\n        this.buildAddDelegatorTx = (networkid = constants_2.DefaultNetworkID, blockchainid, avaxAssetID, toAddresses, fromAddresses, changeAddresses, nodeID, startTime, endTime, stakeAmount, rewardLocktime, rewardThreshold, rewardAddresses, fee = undefined, feeAssetID = undefined, memo = undefined, asOf = helperfunctions_1.UnixNow()) => {\n            let ins = [];\n            let outs = [];\n            let stakeOuts = [];\n            const zero = new bn_js_1.default(0);\n            const now = helperfunctions_1.UnixNow();\n            if (startTime.lt(now) || endTime.lte(startTime)) {\n                throw new Error(\"UTXOSet.buildAddDelegatorTx -- startTime must be in the future and endTime must come after startTime\");\n            }\n            const aad = new AssetAmountDestination(toAddresses, fromAddresses, changeAddresses);\n            if (avaxAssetID.toString(\"hex\") === feeAssetID.toString(\"hex\")) {\n                aad.addAssetAmount(avaxAssetID, stakeAmount, fee);\n            }\n            else {\n                aad.addAssetAmount(avaxAssetID, stakeAmount, zero);\n                if (this._feeCheck(fee, feeAssetID)) {\n                    aad.addAssetAmount(feeAssetID, zero, fee);\n                }\n            }\n            const minSpendableErr = this.getMinimumSpendable(aad, asOf, undefined, undefined, true);\n            if (typeof minSpendableErr === \"undefined\") {\n                ins = aad.getInputs();\n                outs = aad.getChangeOutputs();\n                stakeOuts = aad.getOutputs();\n            }\n            else {\n                throw minSpendableErr;\n            }\n            const rewardOutputOwners = new outputs_1.SECPOwnerOutput(rewardAddresses, rewardLocktime, rewardThreshold);\n            const UTx = new validationtx_1.AddDelegatorTx(networkid, blockchainid, outs, ins, memo, nodeID, startTime, endTime, stakeAmount, stakeOuts, new outputs_1.ParseableOutput(rewardOutputOwners));\n            return new tx_1.UnsignedTx(UTx);\n        };\n        /**\n          * Class representing an unsigned [[AddValidatorTx]] transaction.\n          *\n          * @param networkid Networkid, [[DefaultNetworkID]]\n          * @param blockchainid Blockchainid, default undefined\n          * @param avaxAssetID {@link https://github.com/feross/buffer|Buffer} of the asset ID for AVAX\n          * @param toAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} recieves the stake at the end of the staking period\n          * @param fromAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who pays the fees and the stake\n          * @param changeAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who gets the change leftover from the staking payment\n          * @param nodeID The node ID of the validator being added.\n          * @param startTime The Unix time when the validator starts validating the Primary Network.\n          * @param endTime The Unix time when the validator stops validating the Primary Network (and staked AVAX is returned).\n          * @param stakeAmount A {@link https://github.com/indutny/bn.js/|BN} for the amount of stake to be delegated in nAVAX.\n          * @param rewardLocktime The locktime field created in the resulting reward outputs\n          * @param rewardThreshold The number of signatures required to spend the funds in the resultant reward UTXO\n          * @param rewardAddresses The addresses the validator reward goes.\n          * @param delegationFee A number for the percentage of reward to be given to the validator when someone delegates to them. Must be between 0 and 100.\n          * @param minStake A {@link https://github.com/indutny/bn.js/|BN} representing the minimum stake required to validate on this network.\n          * @param fee Optional. The amount of fees to burn in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}\n          * @param feeAssetID Optional. The assetID of the fees being burned.\n          * @param memo Optional contains arbitrary bytes, up to 256 bytes\n          * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n          *\n          * @returns An unsigned transaction created from the passed in parameters.\n          */\n        this.buildAddValidatorTx = (networkid = constants_2.DefaultNetworkID, blockchainid, avaxAssetID, toAddresses, fromAddresses, changeAddresses, nodeID, startTime, endTime, stakeAmount, rewardLocktime, rewardThreshold, rewardAddresses, delegationFee, fee = undefined, feeAssetID = undefined, memo = undefined, asOf = helperfunctions_1.UnixNow()) => {\n            let ins = [];\n            let outs = [];\n            let stakeOuts = [];\n            const zero = new bn_js_1.default(0);\n            const now = helperfunctions_1.UnixNow();\n            if (startTime.lt(now) || endTime.lte(startTime)) {\n                throw new Error(\"UTXOSet.buildAddValidatorTx -- startTime must be in the future and endTime must come after startTime\");\n            }\n            if (delegationFee > 100 || delegationFee < 0) {\n                throw new Error(\"UTXOSet.buildAddValidatorTx -- startTime must be in the range of 0 to 100, inclusively\");\n            }\n            const aad = new AssetAmountDestination(toAddresses, fromAddresses, changeAddresses);\n            if (avaxAssetID.toString(\"hex\") === feeAssetID.toString(\"hex\")) {\n                aad.addAssetAmount(avaxAssetID, stakeAmount, fee);\n            }\n            else {\n                aad.addAssetAmount(avaxAssetID, stakeAmount, zero);\n                if (this._feeCheck(fee, feeAssetID)) {\n                    aad.addAssetAmount(feeAssetID, zero, fee);\n                }\n            }\n            const minSpendableErr = this.getMinimumSpendable(aad, asOf, undefined, undefined, true);\n            if (typeof minSpendableErr === \"undefined\") {\n                ins = aad.getInputs();\n                outs = aad.getChangeOutputs();\n                stakeOuts = aad.getOutputs();\n            }\n            else {\n                throw minSpendableErr;\n            }\n            const rewardOutputOwners = new outputs_1.SECPOwnerOutput(rewardAddresses, rewardLocktime, rewardThreshold);\n            const UTx = new validationtx_1.AddValidatorTx(networkid, blockchainid, outs, ins, memo, nodeID, startTime, endTime, stakeAmount, stakeOuts, new outputs_1.ParseableOutput(rewardOutputOwners), delegationFee);\n            return new tx_1.UnsignedTx(UTx);\n        };\n        /**\n          * Class representing an unsigned [[CreateSubnetTx]] transaction.\n          *\n          * @param networkid Networkid, [[DefaultNetworkID]]\n          * @param blockchainid Blockchainid, default undefined\n          * @param fromAddresses The addresses being used to send the funds from the UTXOs {@link https://github.com/feross/buffer|Buffer}\n          * @param changeAddresses The addresses that can spend the change remaining from the spent UTXOs.\n          * @param subnetOwnerAddresses An array of {@link https://github.com/feross/buffer|Buffer} for the addresses to add to a subnet\n          * @param subnetOwnerThreshold The number of owners's signatures required to add a validator to the network\n          * @param fee Optional. The amount of fees to burn in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}\n          * @param feeAssetID Optional. The assetID of the fees being burned\n          * @param memo Optional contains arbitrary bytes, up to 256 bytes\n          * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n          *\n          * @returns An unsigned transaction created from the passed in parameters.\n          */\n        this.buildCreateSubnetTx = (networkid = constants_2.DefaultNetworkID, blockchainid, fromAddresses, changeAddresses, subnetOwnerAddresses, subnetOwnerThreshold, fee = undefined, feeAssetID = undefined, memo = undefined, asOf = helperfunctions_1.UnixNow()) => {\n            const zero = new bn_js_1.default(0);\n            let ins = [];\n            let outs = [];\n            if (this._feeCheck(fee, feeAssetID)) {\n                const aad = new AssetAmountDestination(fromAddresses, fromAddresses, changeAddresses);\n                aad.addAssetAmount(feeAssetID, zero, fee);\n                const minSpendableErr = this.getMinimumSpendable(aad, asOf, undefined, undefined);\n                if (typeof minSpendableErr === \"undefined\") {\n                    ins = aad.getInputs();\n                    outs = aad.getAllOutputs();\n                }\n                else {\n                    throw minSpendableErr;\n                }\n            }\n            const locktime = new bn_js_1.default(0);\n            const UTx = new createsubnettx_1.CreateSubnetTx(networkid, blockchainid, outs, ins, memo, new outputs_1.SECPOwnerOutput(subnetOwnerAddresses, locktime, subnetOwnerThreshold));\n            return new tx_1.UnsignedTx(UTx);\n        };\n    }\n    //serialize is inherited\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        let utxos = {};\n        for (let utxoid in fields[\"utxos\"]) {\n            let utxoidCleaned = serializer.decoder(utxoid, encoding, \"base58\", \"base58\");\n            utxos[utxoidCleaned] = new UTXO();\n            utxos[utxoidCleaned].deserialize(fields[\"utxos\"][utxoid], encoding);\n        }\n        let addressUTXOs = {};\n        for (let address in fields[\"addressUTXOs\"]) {\n            let addressCleaned = serializer.decoder(address, encoding, \"cb58\", \"hex\");\n            let utxobalance = {};\n            for (let utxoid in fields[\"addressUTXOs\"][address]) {\n                let utxoidCleaned = serializer.decoder(utxoid, encoding, \"base58\", \"base58\");\n                utxobalance[utxoidCleaned] = serializer.decoder(fields[\"addressUTXOs\"][address][utxoid], encoding, \"decimalString\", \"BN\");\n            }\n            addressUTXOs[addressCleaned] = utxobalance;\n        }\n        this.utxos = utxos;\n        this.addressUTXOs = addressUTXOs;\n    }\n    parseUTXO(utxo) {\n        const utxovar = new UTXO();\n        // force a copy\n        if (typeof utxo === 'string') {\n            utxovar.fromBuffer(bintools.cb58Decode(utxo));\n        }\n        else if (utxo instanceof utxos_1.StandardUTXO) {\n            utxovar.fromBuffer(utxo.toBuffer()); // forces a copy\n        }\n        else {\n            /* istanbul ignore next */\n            throw new Error(`Error - UTXO.parseUTXO: utxo parameter is not a UTXO or string: ${utxo}`);\n        }\n        return utxovar;\n    }\n    create(...args) {\n        return new UTXOSet();\n    }\n    clone() {\n        const newset = this.create();\n        const allUTXOs = this.getAllUTXOs();\n        newset.addArray(allUTXOs);\n        return newset;\n    }\n    _feeCheck(fee, feeAssetID) {\n        return (typeof fee !== \"undefined\" &&\n            typeof feeAssetID !== \"undefined\" &&\n            fee.gt(new bn_js_1.default(0)) && feeAssetID instanceof buffer_1.Buffer);\n    }\n}\nexports.UTXOSet = UTXOSet;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\n/**\n * @packageDocumentation\n * @module Common-NBytes\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NBytes = void 0;\nconst bintools_1 = __importDefault(require(\"../utils/bintools\"));\nconst serialization_1 = require(\"../utils/serialization\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serializer = serialization_1.Serialization.getInstance();\n/**\n * Abstract class that implements basic functionality for managing a\n * {@link https://github.com/feross/buffer|Buffer} of an exact length.\n *\n * Create a class that extends this one and override bsize to make it validate for exactly\n * the correct length.\n */\nclass NBytes extends serialization_1.Serializable {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"NBytes\";\n        this._typeID = undefined;\n        /**\n         * Returns the length of the {@link https://github.com/feross/buffer|Buffer}.\n         *\n         * @returns The exact length requirement of this class\n         */\n        this.getSize = () => this.bsize;\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { \"bsize\": serializer.encoder(this.bsize, encoding, \"number\", \"decimalString\", 4), \"bytes\": serializer.encoder(this.bytes, encoding, \"Buffer\", \"hex\", this.bsize) });\n    }\n    ;\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.bsize = serializer.decoder(fields[\"bsize\"], encoding, \"decimalString\", \"number\", 4);\n        this.bytes = serializer.decoder(fields[\"bytes\"], encoding, \"hex\", \"Buffer\", this.bsize);\n    }\n    /**\n     * Takes a base-58 encoded string, verifies its length, and stores it.\n     *\n     * @returns The size of the {@link https://github.com/feross/buffer|Buffer}\n     */\n    fromString(b58str) {\n        try {\n            this.fromBuffer(bintools.b58ToBuffer(b58str));\n        }\n        catch (e) {\n            /* istanbul ignore next */\n            const emsg = `Error - NBytes.fromString: ${e}`;\n            /* istanbul ignore next */\n            throw new Error(emsg);\n        }\n        return this.bsize;\n    }\n    /**\n     * Takes a [[Buffer]], verifies its length, and stores it.\n     *\n     * @returns The size of the {@link https://github.com/feross/buffer|Buffer}\n     */\n    fromBuffer(buff, offset = 0) {\n        try {\n            if (buff.length - offset < this.bsize) {\n                /* istanbul ignore next */\n                throw new Error(`Buffer length must be ${this.bsize} bytes. Only have ${buff.length - offset} remaining in buffer.`);\n            }\n            this.bytes = bintools.copyFrom(buff, offset, offset + this.bsize);\n        }\n        catch (e) {\n            /* istanbul ignore next */\n            const emsg = `Error - NBytes.fromBuffer: ${e}`;\n            /* istanbul ignore next */\n            throw new Error(emsg);\n        }\n        return offset + this.bsize;\n    }\n    /**\n     * @returns A reference to the stored {@link https://github.com/feross/buffer|Buffer}\n     */\n    toBuffer() {\n        return this.bytes;\n    }\n    /**\n     * @returns A base-58 string of the stored {@link https://github.com/feross/buffer|Buffer}\n     */\n    toString() {\n        return bintools.bufferToB58(this.toBuffer());\n    }\n}\nexports.NBytes = NBytes;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmJ5dGVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbW1vbi9uYnl0ZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7R0FHRzs7Ozs7O0FBR0gsaUVBQXlDO0FBQ3pDLDBEQUF5RjtBQUd6Rjs7R0FFRztBQUNILE1BQU0sUUFBUSxHQUFZLGtCQUFRLENBQUMsV0FBVyxFQUFFLENBQUM7QUFDakQsTUFBTSxVQUFVLEdBQUcsNkJBQWEsQ0FBQyxXQUFXLEVBQUUsQ0FBQztBQUUvQzs7Ozs7O0dBTUc7QUFDSCxNQUFzQixNQUFPLFNBQVEsNEJBQVk7SUFBakQ7O1FBQ1ksY0FBUyxHQUFHLFFBQVEsQ0FBQztRQUNyQixZQUFPLEdBQUcsU0FBUyxDQUFDO1FBbUI5Qjs7OztXQUlHO1FBQ0gsWUFBTyxHQUFHLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7SUEyRDdCLENBQUM7SUFqRkMsU0FBUyxDQUFDLFdBQThCLEtBQUs7UUFDM0MsSUFBSSxNQUFNLEdBQVUsS0FBSyxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUM5Qyx1Q0FDSyxNQUFNLEtBQ1QsT0FBTyxFQUFFLFVBQVUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLGVBQWUsRUFBRSxDQUFDLENBQUMsRUFDL0UsT0FBTyxFQUFFLFVBQVUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQy9FO0lBQ0gsQ0FBQztJQUFBLENBQUM7SUFDRixXQUFXLENBQUMsTUFBYSxFQUFFLFdBQThCLEtBQUs7UUFDNUQsS0FBSyxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDcEMsSUFBSSxDQUFDLEtBQUssR0FBRyxVQUFVLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsRUFBRSxRQUFRLEVBQUUsZUFBZSxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUN6RixJQUFJLENBQUMsS0FBSyxHQUFHLFVBQVUsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMxRixDQUFDO0lBWUQ7Ozs7T0FJRztJQUNILFVBQVUsQ0FBQyxNQUFhO1FBQ3RCLElBQUk7WUFDRixJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztTQUMvQztRQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ1YsMEJBQTBCO1lBQzFCLE1BQU0sSUFBSSxHQUFVLDhCQUE4QixDQUFDLEVBQUUsQ0FBQztZQUN0RCwwQkFBMEI7WUFDMUIsTUFBTSxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUN2QjtRQUNELE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztJQUNwQixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILFVBQVUsQ0FBQyxJQUFXLEVBQUUsU0FBZ0IsQ0FBQztRQUN2QyxJQUFJO1lBQ0YsSUFBSSxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sR0FBRyxJQUFJLENBQUMsS0FBSyxFQUFFO2dCQUNyQywwQkFBMEI7Z0JBQzFCLE1BQU0sSUFBSSxLQUFLLENBQUMseUJBQXlCLElBQUksQ0FBQyxLQUFLLHFCQUFxQixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sdUJBQXVCLENBQUMsQ0FBQzthQUN0SDtZQUVELElBQUksQ0FBQyxLQUFLLEdBQUcsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLE1BQU0sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDbkU7UUFBQyxPQUFPLENBQUMsRUFBRTtZQUNWLDBCQUEwQjtZQUMxQixNQUFNLElBQUksR0FBVSw4QkFBOEIsQ0FBQyxFQUFFLENBQUM7WUFDdEQsMEJBQTBCO1lBQzFCLE1BQU0sSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDdkI7UUFDRCxPQUFPLE1BQU0sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQzdCLENBQUM7SUFFRDs7T0FFRztJQUNILFFBQVE7UUFDTixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDcEIsQ0FBQztJQUVEOztPQUVHO0lBQ0gsUUFBUTtRQUNOLE9BQU8sUUFBUSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztJQUMvQyxDQUFDO0NBTUY7QUFyRkQsd0JBcUZDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAcGFja2FnZURvY3VtZW50YXRpb25cbiAqIEBtb2R1bGUgQ29tbW9uLU5CeXRlc1xuICovXG5cbmltcG9ydCB7IEJ1ZmZlciB9IGZyb20gJ2J1ZmZlci8nO1xuaW1wb3J0IEJpblRvb2xzIGZyb20gJy4uL3V0aWxzL2JpbnRvb2xzJztcbmltcG9ydCB7IFNlcmlhbGl6YWJsZSwgU2VyaWFsaXphdGlvbiwgU2VyaWFsaXplZEVuY29kaW5nIH0gZnJvbSAnLi4vdXRpbHMvc2VyaWFsaXphdGlvbic7XG5cblxuLyoqXG4gKiBAaWdub3JlXG4gKi9cbmNvbnN0IGJpbnRvb2xzOkJpblRvb2xzID0gQmluVG9vbHMuZ2V0SW5zdGFuY2UoKTtcbmNvbnN0IHNlcmlhbGl6ZXIgPSBTZXJpYWxpemF0aW9uLmdldEluc3RhbmNlKCk7XG5cbi8qKlxuICogQWJzdHJhY3QgY2xhc3MgdGhhdCBpbXBsZW1lbnRzIGJhc2ljIGZ1bmN0aW9uYWxpdHkgZm9yIG1hbmFnaW5nIGFcbiAqIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlcnxCdWZmZXJ9IG9mIGFuIGV4YWN0IGxlbmd0aC5cbiAqXG4gKiBDcmVhdGUgYSBjbGFzcyB0aGF0IGV4dGVuZHMgdGhpcyBvbmUgYW5kIG92ZXJyaWRlIGJzaXplIHRvIG1ha2UgaXQgdmFsaWRhdGUgZm9yIGV4YWN0bHlcbiAqIHRoZSBjb3JyZWN0IGxlbmd0aC5cbiAqL1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIE5CeXRlcyBleHRlbmRzIFNlcmlhbGl6YWJsZSB7XG4gIHByb3RlY3RlZCBfdHlwZU5hbWUgPSBcIk5CeXRlc1wiO1xuICBwcm90ZWN0ZWQgX3R5cGVJRCA9IHVuZGVmaW5lZDtcblxuICBzZXJpYWxpemUoZW5jb2Rpbmc6U2VyaWFsaXplZEVuY29kaW5nID0gXCJoZXhcIik6b2JqZWN0IHtcbiAgICBsZXQgZmllbGRzOm9iamVjdCA9IHN1cGVyLnNlcmlhbGl6ZShlbmNvZGluZyk7XG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLmZpZWxkcyxcbiAgICAgIFwiYnNpemVcIjogc2VyaWFsaXplci5lbmNvZGVyKHRoaXMuYnNpemUsIGVuY29kaW5nLCBcIm51bWJlclwiLCBcImRlY2ltYWxTdHJpbmdcIiwgNCksXG4gICAgICBcImJ5dGVzXCI6IHNlcmlhbGl6ZXIuZW5jb2Rlcih0aGlzLmJ5dGVzLCBlbmNvZGluZywgXCJCdWZmZXJcIiwgXCJoZXhcIiwgdGhpcy5ic2l6ZSlcbiAgICB9XG4gIH07XG4gIGRlc2VyaWFsaXplKGZpZWxkczpvYmplY3QsIGVuY29kaW5nOlNlcmlhbGl6ZWRFbmNvZGluZyA9IFwiaGV4XCIpIHtcbiAgICBzdXBlci5kZXNlcmlhbGl6ZShmaWVsZHMsIGVuY29kaW5nKTtcbiAgICB0aGlzLmJzaXplID0gc2VyaWFsaXplci5kZWNvZGVyKGZpZWxkc1tcImJzaXplXCJdLCBlbmNvZGluZywgXCJkZWNpbWFsU3RyaW5nXCIsIFwibnVtYmVyXCIsIDQpO1xuICAgIHRoaXMuYnl0ZXMgPSBzZXJpYWxpemVyLmRlY29kZXIoZmllbGRzW1wiYnl0ZXNcIl0sIGVuY29kaW5nLCBcImhleFwiLCBcIkJ1ZmZlclwiLCB0aGlzLmJzaXplKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBieXRlczpCdWZmZXI7XG4gIHByb3RlY3RlZCBic2l6ZTpudW1iZXI7XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGxlbmd0aCBvZiB0aGUge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyfEJ1ZmZlcn0uXG4gICAqXG4gICAqIEByZXR1cm5zIFRoZSBleGFjdCBsZW5ndGggcmVxdWlyZW1lbnQgb2YgdGhpcyBjbGFzc1xuICAgKi9cbiAgZ2V0U2l6ZSA9ICgpID0+IHRoaXMuYnNpemU7XG5cbiAgLyoqXG4gICAqIFRha2VzIGEgYmFzZS01OCBlbmNvZGVkIHN0cmluZywgdmVyaWZpZXMgaXRzIGxlbmd0aCwgYW5kIHN0b3JlcyBpdC5cbiAgICpcbiAgICogQHJldHVybnMgVGhlIHNpemUgb2YgdGhlIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlcnxCdWZmZXJ9XG4gICAqL1xuICBmcm9tU3RyaW5nKGI1OHN0cjpzdHJpbmcpOm51bWJlciB7XG4gICAgdHJ5IHtcbiAgICAgIHRoaXMuZnJvbUJ1ZmZlcihiaW50b29scy5iNThUb0J1ZmZlcihiNThzdHIpKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgY29uc3QgZW1zZzpzdHJpbmcgPSBgRXJyb3IgLSBOQnl0ZXMuZnJvbVN0cmluZzogJHtlfWA7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGVtc2cpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5ic2l6ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUYWtlcyBhIFtbQnVmZmVyXV0sIHZlcmlmaWVzIGl0cyBsZW5ndGgsIGFuZCBzdG9yZXMgaXQuXG4gICAqXG4gICAqIEByZXR1cm5zIFRoZSBzaXplIG9mIHRoZSB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXJ8QnVmZmVyfVxuICAgKi9cbiAgZnJvbUJ1ZmZlcihidWZmOkJ1ZmZlciwgb2Zmc2V0Om51bWJlciA9IDApOm51bWJlciB7XG4gICAgdHJ5IHtcbiAgICAgIGlmIChidWZmLmxlbmd0aCAtIG9mZnNldCA8IHRoaXMuYnNpemUpIHtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBCdWZmZXIgbGVuZ3RoIG11c3QgYmUgJHt0aGlzLmJzaXplfSBieXRlcy4gT25seSBoYXZlICR7YnVmZi5sZW5ndGggLSBvZmZzZXR9IHJlbWFpbmluZyBpbiBidWZmZXIuYCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuYnl0ZXMgPSBiaW50b29scy5jb3B5RnJvbShidWZmLCBvZmZzZXQsIG9mZnNldCArIHRoaXMuYnNpemUpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICBjb25zdCBlbXNnOnN0cmluZyA9IGBFcnJvciAtIE5CeXRlcy5mcm9tQnVmZmVyOiAke2V9YDtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoZW1zZyk7XG4gICAgfVxuICAgIHJldHVybiBvZmZzZXQgKyB0aGlzLmJzaXplO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm5zIEEgcmVmZXJlbmNlIHRvIHRoZSBzdG9yZWQge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyfEJ1ZmZlcn1cbiAgICovXG4gIHRvQnVmZmVyKCk6QnVmZmVyIHtcbiAgICByZXR1cm4gdGhpcy5ieXRlcztcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJucyBBIGJhc2UtNTggc3RyaW5nIG9mIHRoZSBzdG9yZWQge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyfEJ1ZmZlcn1cbiAgICovXG4gIHRvU3RyaW5nKCk6c3RyaW5nIHtcbiAgICByZXR1cm4gYmludG9vbHMuYnVmZmVyVG9CNTgodGhpcy50b0J1ZmZlcigpKTtcbiAgfVxuXG4gIGFic3RyYWN0IGNsb25lKCk6dGhpcztcblxuICBhYnN0cmFjdCBjcmVhdGUoLi4uYXJnczphbnlbXSk6dGhpcztcbiAgXG59Il19","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SECP256k1KeyChain = exports.SECP256k1KeyPair = void 0;\n/**\n * @packageDocumentation\n * @module Common-SECP256k1KeyChain\n */\nconst buffer_1 = require(\"buffer/\");\nconst elliptic = __importStar(require(\"elliptic\"));\nconst create_hash_1 = __importDefault(require(\"create-hash\"));\nconst bintools_1 = __importDefault(require(\"../utils/bintools\"));\nconst keychain_1 = require(\"./keychain\");\n/**\n * @ignore\n */\nconst EC = elliptic.ec;\n/**\n * @ignore\n */\nconst ec = new EC('secp256k1');\n/**\n * @ignore\n */\nconst ecparams = ec.curve;\n/**\n * @ignore\n */\nconst BN = ecparams.n.constructor;\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\n/**\n * Class for representing a private and public keypair on the Platform Chain.\n */\nclass SECP256k1KeyPair extends keychain_1.StandardKeyPair {\n    /**\n     * Class for representing a private and public keypair in Avalanche PlatformVM.\n     */\n    constructor() {\n        super();\n        /**\n         * @ignore\n         */\n        this._sigFromSigBuffer = (sig) => {\n            const r = new BN(bintools.copyFrom(sig, 0, 32));\n            const s = new BN(bintools.copyFrom(sig, 32, 64));\n            const recoveryParam = bintools.copyFrom(sig, 64, 65).readUIntBE(0, 1);\n            const sigOpt = {\n                r: r,\n                s: s,\n                recoveryParam: recoveryParam\n            };\n            return sigOpt;\n        };\n        /**\n           * Generates a new keypair.\n           */\n        this.generateKey = () => {\n            this.keypair = ec.genKeyPair();\n            // doing hex translation to get Buffer class\n            this.privk = buffer_1.Buffer.from(this.keypair.getPrivate('hex').padStart(64, '0'), 'hex');\n            this.pubk = buffer_1.Buffer.from(this.keypair.getPublic(true, 'hex').padStart(66, '0'), 'hex');\n        };\n        /**\n           * Imports a private key and generates the appropriate public key.\n           *\n           * @param privk A {@link https://github.com/feross/buffer|Buffer} representing the private key\n           *\n           * @returns true on success, false on failure\n           */\n        this.importKey = (privk) => {\n            this.keypair = ec.keyFromPrivate(privk.toString('hex'), 'hex');\n            // doing hex translation to get Buffer class\n            this.privk = buffer_1.Buffer.from(this.keypair.getPrivate('hex').padStart(64, '0'), 'hex');\n            this.pubk = buffer_1.Buffer.from(this.keypair.getPublic(true, 'hex').padStart(66, '0'), 'hex');\n            return true; // silly I know, but the interface requires so it returns true on success, so if Buffer fails validation...\n        };\n        /**\n         * Returns the address as a {@link https://github.com/feross/buffer|Buffer}.\n         *\n         * @returns A {@link https://github.com/feross/buffer|Buffer} representation of the address\n         */\n        this.getAddress = () => {\n            return this.addressFromPublicKey(this.pubk);\n        };\n        /**\n           * Returns an address given a public key.\n           *\n           * @param pubk A {@link https://github.com/feross/buffer|Buffer} representing the public key\n           *\n           * @returns A {@link https://github.com/feross/buffer|Buffer} for the address of the public key.\n           */\n        this.addressFromPublicKey = (pubk) => {\n            if (pubk.length === 65) {\n                /* istanbul ignore next */\n                pubk = buffer_1.Buffer.from(ec.keyFromPublic(pubk).getPublic(true, 'hex').padStart(66, '0'), 'hex'); // make compact, stick back into buffer\n            }\n            if (pubk.length === 33) {\n                const sha256 = buffer_1.Buffer.from(create_hash_1.default('sha256').update(pubk).digest());\n                const ripesha = buffer_1.Buffer.from(create_hash_1.default('rmd160').update(sha256).digest());\n                return ripesha;\n            }\n            /* istanbul ignore next */\n            throw new Error('Unable to make address.');\n        };\n        /**\n         * Returns a string representation of the private key.\n         *\n         * @returns A cb58 serialized string representation of the public key\n         */\n        this.getPrivateKeyString = () => {\n            return \"PrivateKey-\" + bintools.cb58Encode(this.privk);\n        };\n        /**\n         * Returns the public key.\n         *\n         * @returns A cb58 serialized string representation of the public key\n         */\n        this.getPublicKeyString = () => {\n            return bintools.cb58Encode(this.pubk);\n        };\n        /**\n         * Takes a message, signs it, and returns the signature.\n         *\n         * @param msg The message to sign, be sure to hash first if expected\n         *\n         * @returns A {@link https://github.com/feross/buffer|Buffer} containing the signature\n         */\n        this.sign = (msg) => {\n            const sigObj = this.keypair.sign(msg, undefined, { canonical: true });\n            const recovery = buffer_1.Buffer.alloc(1);\n            recovery.writeUInt8(sigObj.recoveryParam, 0);\n            const r = buffer_1.Buffer.from(sigObj.r.toArray(\"be\", 32)); //we have to skip native Buffer class, so this is the way\n            const s = buffer_1.Buffer.from(sigObj.s.toArray(\"be\", 32)); //we have to skip native Buffer class, so this is the way\n            const result = buffer_1.Buffer.concat([r, s, recovery], 65);\n            return result;\n        };\n        /**\n         * Verifies that the private key associated with the provided public key produces the signature associated with the given message.\n         *\n         * @param msg The message associated with the signature\n         * @param sig The signature of the signed message\n         *\n         * @returns True on success, false on failure\n         */\n        this.verify = (msg, sig) => {\n            const sigObj = this._sigFromSigBuffer(sig);\n            return ec.verify(msg, sigObj, this.keypair);\n        };\n        /**\n         * Recovers the public key of a message signer from a message and its associated signature.\n         *\n         * @param msg The message that's signed\n         * @param sig The signature that's signed on the message\n         *\n         * @returns A {@link https://github.com/feross/buffer|Buffer} containing the public key of the signer\n         */\n        this.recover = (msg, sig) => {\n            const sigObj = this._sigFromSigBuffer(sig);\n            const pubk = ec.recoverPubKey(msg, sigObj, sigObj.recoveryParam);\n            return buffer_1.Buffer.from(pubk.encodeCompressed());\n        };\n    }\n}\nexports.SECP256k1KeyPair = SECP256k1KeyPair;\n/**\n * Class for representing a key chain in Avalanche.\n *\n * @typeparam SECP256k1KeyPair Class extending [[StandardKeyPair]] which is used as the key in [[SECP256k1KeyChain]]\n */\nclass SECP256k1KeyChain extends keychain_1.StandardKeyChain {\n    addKey(newKey) {\n        super.addKey(newKey);\n    }\n}\nexports.SECP256k1KeyChain = SECP256k1KeyChain;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * @packageDocumentation\n * @module AvalancheCore\n */\nconst axios_1 = __importDefault(require(\"axios\"));\nconst apibase_1 = require(\"./common/apibase\");\nconst helperfunctions_1 = require(\"./utils/helperfunctions\");\n/**\n * AvalancheCore is middleware for interacting with Avalanche node RPC APIs.\n *\n * Example usage:\n * ```js\n * let avalanche = new AvalancheCore(\"127.0.0.1\", 9650, \"https\");\n * ```\n *\n */\nclass AvalancheCore {\n    /**\n     * Creates a new Avalanche instance. Sets the address and port of the main Avalanche Client.\n     *\n     * @param ip The hostname to resolve to reach the Avalanche Client APIs\n     * @param port The port to resolve to reach the Avalanche Client APIs\n     * @param protocol The protocol string to use before a \"://\" in a request, ex: \"http\", \"https\", \"git\", \"ws\", etc ...\n     */\n    constructor(ip, port, protocol = 'http') {\n        this.networkID = 0;\n        this.hrp = '';\n        this.auth = undefined;\n        this.apis = {};\n        /**\n           * Sets the address and port of the main Avalanche Client.\n           *\n           * @param ip The hostname to resolve to reach the Avalanche Client RPC APIs\n           * @param port The port to resolve to reach the Avalanche Client RPC APIs\n           * @param protocol The protocol string to use before a \"://\" in a request,\n           * ex: \"http\", \"https\", \"git\", \"ws\", etc ...\n           */\n        this.setAddress = (ip, port, protocol = 'http') => {\n            this.ip = ip;\n            this.port = port;\n            this.protocol = protocol;\n            this.url = `${protocol}://${ip}:${port}`;\n        };\n        /**\n           * Returns the protocol such as \"http\", \"https\", \"git\", \"ws\", etc.\n           */\n        this.getProtocol = () => this.protocol;\n        /**\n           * Returns the IP for the Avalanche node.\n           */\n        this.getIP = () => this.ip;\n        /**\n           * Returns the port for the Avalanche node.\n           */\n        this.getPort = () => this.port;\n        /**\n           * Returns the URL of the Avalanche node (ip + port);\n           */\n        this.getURL = () => this.url;\n        /**\n           * Returns the networkID;\n           */\n        this.getNetworkID = () => this.networkID;\n        /**\n           * Sets the networkID\n           */\n        this.setNetworkID = (netid) => {\n            this.networkID = netid;\n            this.hrp = helperfunctions_1.getPreferredHRP(this.networkID);\n        };\n        /**\n         * Returns the Human-Readable-Part of the network associated with this key.\n         *\n         * @returns The [[KeyPair]]'s Human-Readable-Part of the network's Bech32 addressing scheme\n         */\n        this.getHRP = () => this.hrp;\n        /**\n         * Sets the the Human-Readable-Part of the network associated with this key.\n         *\n         * @param hrp String for the Human-Readable-Part of Bech32 addresses\n         */\n        this.setHRP = (hrp) => {\n            this.hrp = hrp;\n        };\n        /**\n         * Sets the temporary auth token used for communicating with the node.\n         *\n         * @param auth A temporary token provided by the node enabling access to the endpoints on the node.\n         */\n        this.setAuthToken = (auth) => {\n            this.auth = auth;\n        };\n        this._setHeaders = (headers) => {\n            if (typeof this.auth === \"string\") {\n                headers[\"Authorization\"] = \"Bearer \" + this.auth;\n            }\n            return headers;\n        };\n        /**\n         * Adds an API to the middleware. The API resolves to a registered blockchain's RPC.\n         *\n         * In TypeScript:\n         * ```js\n         * avalanche.addAPI<MyVMClass>(\"mychain\", MyVMClass, \"/ext/bc/mychain\");\n         * ```\n         *\n         * In Javascript:\n         * ```js\n         * avalanche.addAPI(\"mychain\", MyVMClass, \"/ext/bc/mychain\");\n         * ```\n         *\n         * @typeparam GA Class of the API being added\n         * @param apiName A label for referencing the API in the future\n         * @param ConstructorFN A reference to the class which instantiates the API\n         * @param baseurl Path to resolve to reach the API\n         *\n         */\n        this.addAPI = (apiName, ConstructorFN, baseurl = undefined, ...args) => {\n            if (typeof baseurl === 'undefined') {\n                this.apis[apiName] = new ConstructorFN(this, undefined, ...args);\n            }\n            else {\n                this.apis[apiName] = new ConstructorFN(this, baseurl, ...args);\n            }\n        };\n        /**\n         * Retrieves a reference to an API by its apiName label.\n         *\n         * @param apiName Name of the API to return\n         */\n        this.api = (apiName) => this.apis[apiName];\n        /**\n         * @ignore\n         */\n        this._request = (xhrmethod, baseurl, getdata, postdata, headers = {}, axiosConfig = undefined) => __awaiter(this, void 0, void 0, function* () {\n            let config;\n            if (axiosConfig) {\n                config = axiosConfig;\n            }\n            else {\n                config = {\n                    baseURL: `${this.protocol}://${this.ip}:${this.port}`,\n                    responseType: 'text',\n                };\n            }\n            config.url = baseurl;\n            config.method = xhrmethod;\n            config.headers = headers;\n            config.data = postdata;\n            config.params = getdata;\n            return axios_1.default.request(config).then((resp) => {\n                // purging all that is axios\n                const xhrdata = new apibase_1.RequestResponseData();\n                xhrdata.data = resp.data;\n                xhrdata.headers = resp.headers;\n                xhrdata.request = resp.request;\n                xhrdata.status = resp.status;\n                xhrdata.statusText = resp.statusText;\n                return xhrdata;\n            });\n        });\n        /**\n         * Makes a GET call to an API.\n         *\n         * @param baseurl Path to the api\n         * @param getdata Object containing the key value pairs sent in GET\n         * @param parameters Object containing the parameters of the API call\n         * @param headers An array HTTP Request Headers\n         * @param axiosConfig Configuration for the axios javascript library that will be the\n         * foundation for the rest of the parameters\n         *\n         * @returns A promise for [[RequestResponseData]]\n         */\n        this.get = (baseurl, getdata, headers = {}, axiosConfig = undefined) => this._request('GET', baseurl, getdata, {}, this._setHeaders(headers), axiosConfig);\n        /**\n         * Makes a DELETE call to an API.\n         *\n         * @param baseurl Path to the API\n         * @param getdata Object containing the key value pairs sent in DELETE\n         * @param parameters Object containing the parameters of the API call\n         * @param headers An array HTTP Request Headers\n         * @param axiosConfig Configuration for the axios javascript library that will be the\n         * foundation for the rest of the parameters\n         *\n         * @returns A promise for [[RequestResponseData]]\n         */\n        this.delete = (baseurl, getdata, headers = {}, axiosConfig = undefined) => this._request('DELETE', baseurl, getdata, {}, this._setHeaders(headers), axiosConfig);\n        /**\n         * Makes a POST call to an API.\n         *\n         * @param baseurl Path to the API\n         * @param getdata Object containing the key value pairs sent in POST\n         * @param postdata Object containing the key value pairs sent in POST\n         * @param parameters Object containing the parameters of the API call\n         * @param headers An array HTTP Request Headers\n         * @param axiosConfig Configuration for the axios javascript library that will be the\n         * foundation for the rest of the parameters\n         *\n         * @returns A promise for [[RequestResponseData]]\n         */\n        this.post = (baseurl, getdata, postdata, headers = {}, axiosConfig = undefined) => this._request('POST', baseurl, getdata, postdata, this._setHeaders(headers), axiosConfig);\n        /**\n         * Makes a PUT call to an API.\n         *\n         * @param baseurl Path to the baseurl\n         * @param getdata Object containing the key value pairs sent in PUT\n         * @param postdata Object containing the key value pairs sent in PUT\n         * @param parameters Object containing the parameters of the API call\n         * @param headers An array HTTP Request Headers\n         * @param axiosConfig Configuration for the axios javascript library that will be the\n         * foundation for the rest of the parameters\n         *\n         * @returns A promise for [[RequestResponseData]]\n         */\n        this.put = (baseurl, getdata, postdata, headers = {}, axiosConfig = undefined) => this._request('PUT', baseurl, getdata, postdata, this._setHeaders(headers), axiosConfig);\n        /**\n         * Makes a PATCH call to an API.\n         *\n         * @param baseurl Path to the baseurl\n         * @param getdata Object containing the key value pairs sent in PATCH\n         * @param postdata Object containing the key value pairs sent in PATCH\n         * @param parameters Object containing the parameters of the API call\n         * @param headers An array HTTP Request Headers\n         * @param axiosConfig Configuration for the axios javascript library that will be the\n         * foundation for the rest of the parameters\n         *\n         * @returns A promise for [[RequestResponseData]]\n         */\n        this.patch = (baseurl, getdata, postdata, headers = {}, axiosConfig = undefined) => this._request('PATCH', baseurl, getdata, postdata, this._setHeaders(headers), axiosConfig);\n        this.setAddress(ip, port, protocol);\n    }\n}\nexports.default = AvalancheCore;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.HealthAPI = void 0;\nconst jrpcapi_1 = require(\"../../common/jrpcapi\");\n/**\n * Class for interacting with a node API that is using the node's HealthApi.\n *\n * @category RPCAPIs\n *\n * @remarks This extends the [[JRPCAPI]] class. This class should not be directly called. Instead, use the [[Avalanche.addAPI]] function to register this interface with Avalanche.\n */\nclass HealthAPI extends jrpcapi_1.JRPCAPI {\n    /**\n       * This class should not be instantiated directly. Instead use the [[Avalanche.addAPI]] method.\n       *\n       * @param core A reference to the Avalanche class\n       * @param baseurl Defaults to the string \"/ext/health\" as the path to blockchain's baseurl\n       */\n    constructor(core, baseurl = '/ext/health') {\n        super(core, baseurl);\n        /**\n           *\n           * @returns Promise for an object containing the health check response\n           */\n        this.getLiveness = () => __awaiter(this, void 0, void 0, function* () {\n            return this.callMethod('health.getLiveness')\n                .then((response) => response.data.result);\n        });\n    }\n}\nexports.HealthAPI = HealthAPI;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2FwaXMvaGVhbHRoL2FwaS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFLQSxrREFBK0M7QUFJL0M7Ozs7OztHQU1HO0FBQ0gsTUFBYSxTQUFVLFNBQVEsaUJBQU87SUFRcEM7Ozs7O1NBS0s7SUFDTCxZQUFZLElBQWtCLEVBQUUsVUFBaUIsYUFBYTtRQUFJLEtBQUssQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFidkY7OzthQUdLO1FBQ0wsZ0JBQVcsR0FBRyxHQUF5QixFQUFFO1lBQUMsT0FBQSxJQUFJLENBQUMsVUFBVSxDQUFDLG9CQUFvQixDQUFDO2lCQUM1RSxJQUFJLENBQUMsQ0FBQyxRQUE0QixFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO1VBQUEsQ0FBQztJQVF3QixDQUFDO0NBQzFGO0FBZkQsOEJBZUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBwYWNrYWdlRG9jdW1lbnRhdGlvblxuICogQG1vZHVsZSBBUEktSGVhbHRoXG4gKi9cbmltcG9ydCBBdmFsYW5jaGVDb3JlIGZyb20gJy4uLy4uL2F2YWxhbmNoZSc7XG5pbXBvcnQgeyBKUlBDQVBJIH0gZnJvbSAnLi4vLi4vY29tbW9uL2pycGNhcGknO1xuaW1wb3J0IHsgUmVxdWVzdFJlc3BvbnNlRGF0YSB9IGZyb20gJy4uLy4uL2NvbW1vbi9hcGliYXNlJztcblxuXG4vKipcbiAqIENsYXNzIGZvciBpbnRlcmFjdGluZyB3aXRoIGEgbm9kZSBBUEkgdGhhdCBpcyB1c2luZyB0aGUgbm9kZSdzIEhlYWx0aEFwaS5cbiAqXG4gKiBAY2F0ZWdvcnkgUlBDQVBJc1xuICpcbiAqIEByZW1hcmtzIFRoaXMgZXh0ZW5kcyB0aGUgW1tKUlBDQVBJXV0gY2xhc3MuIFRoaXMgY2xhc3Mgc2hvdWxkIG5vdCBiZSBkaXJlY3RseSBjYWxsZWQuIEluc3RlYWQsIHVzZSB0aGUgW1tBdmFsYW5jaGUuYWRkQVBJXV0gZnVuY3Rpb24gdG8gcmVnaXN0ZXIgdGhpcyBpbnRlcmZhY2Ugd2l0aCBBdmFsYW5jaGUuXG4gKi9cbmV4cG9ydCBjbGFzcyBIZWFsdGhBUEkgZXh0ZW5kcyBKUlBDQVBJIHtcbiAgLyoqXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBQcm9taXNlIGZvciBhbiBvYmplY3QgY29udGFpbmluZyB0aGUgaGVhbHRoIGNoZWNrIHJlc3BvbnNlXG4gICAgICovXG4gIGdldExpdmVuZXNzID0gYXN5bmMgKCk6UHJvbWlzZTxvYmplY3Q+ID0+IHRoaXMuY2FsbE1ldGhvZCgnaGVhbHRoLmdldExpdmVuZXNzJylcbiAgICAudGhlbigocmVzcG9uc2U6UmVxdWVzdFJlc3BvbnNlRGF0YSkgPT4gcmVzcG9uc2UuZGF0YS5yZXN1bHQpO1xuXG4gIC8qKlxuICAgICAqIFRoaXMgY2xhc3Mgc2hvdWxkIG5vdCBiZSBpbnN0YW50aWF0ZWQgZGlyZWN0bHkuIEluc3RlYWQgdXNlIHRoZSBbW0F2YWxhbmNoZS5hZGRBUEldXSBtZXRob2QuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY29yZSBBIHJlZmVyZW5jZSB0byB0aGUgQXZhbGFuY2hlIGNsYXNzXG4gICAgICogQHBhcmFtIGJhc2V1cmwgRGVmYXVsdHMgdG8gdGhlIHN0cmluZyBcIi9leHQvaGVhbHRoXCIgYXMgdGhlIHBhdGggdG8gYmxvY2tjaGFpbidzIGJhc2V1cmxcbiAgICAgKi9cbiAgY29uc3RydWN0b3IoY29yZTpBdmFsYW5jaGVDb3JlLCBiYXNldXJsOnN0cmluZyA9ICcvZXh0L2hlYWx0aCcpIHsgc3VwZXIoY29yZSwgYmFzZXVybCk7IH1cbn1cblxuIl19","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CreateSubnetTx = void 0;\n/**\n * @packageDocumentation\n * @module API-PlatformVM-CreateSubnetTx\n */\nconst buffer_1 = require(\"buffer/\");\nconst basetx_1 = require(\"./basetx\");\nconst constants_1 = require(\"./constants\");\nconst constants_2 = require(\"../../utils/constants\");\nconst outputs_1 = require(\"./outputs\");\nconst serialization_1 = require(\"../../utils/serialization\");\nconst serializer = serialization_1.Serialization.getInstance();\nclass CreateSubnetTx extends basetx_1.BaseTx {\n    /**\n     * Class representing an unsigned Create Subnet transaction.\n     *\n     * @param networkid Optional networkid, [[DefaultNetworkID]]\n     * @param blockchainid Optional blockchainid, default Buffer.alloc(32, 16)\n     * @param outs Optional array of the [[TransferableOutput]]s\n     * @param ins Optional array of the [[TransferableInput]]s\n     * @param memo Optional {@link https://github.com/feross/buffer|Buffer} for the memo field\n     * @param subnetOwners Optional [[SECPOwnerOutput]] class for specifying who owns the subnet.\n    */\n    constructor(networkid = constants_2.DefaultNetworkID, blockchainid = buffer_1.Buffer.alloc(32, 16), outs = undefined, ins = undefined, memo = undefined, subnetOwners = undefined) {\n        super(networkid, blockchainid, outs, ins, memo);\n        this._typeName = \"SECPCredential\";\n        this._typeID = constants_1.PlatformVMConstants.CREATESUBNETTX;\n        this.subnetOwners = undefined;\n        /**\n         * Returns the id of the [[CreateSubnetTx]]\n         */\n        this.getTxType = () => {\n            return this._typeID;\n        };\n        this.subnetOwners = subnetOwners;\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { \"subnetOwners\": this.subnetOwners.serialize(encoding) });\n    }\n    ;\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.subnetOwners = new outputs_1.SECPOwnerOutput();\n        this.subnetOwners.deserialize(fields[\"subnetOwners\"], encoding);\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} for the reward address.\n     */\n    getSubnetOwners() {\n        return this.subnetOwners;\n    }\n    /**\n     * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[CreateSubnetTx]], parses it, populates the class, and returns the length of the [[CreateSubnetTx]] in bytes.\n     *\n     * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[CreateSubnetTx]]\n     * @param offset A number for the starting position in the bytes.\n     *\n     * @returns The length of the raw [[CreateSubnetTx]]\n     *\n     * @remarks assume not-checksummed\n     */\n    fromBuffer(bytes, offset = 0) {\n        offset = super.fromBuffer(bytes, offset);\n        this.subnetOwners = new outputs_1.SECPOwnerOutput();\n        offset = this.subnetOwners.fromBuffer(bytes, offset);\n        return offset;\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[CreateSubnetTx]].\n     */\n    toBuffer() {\n        if (typeof this.subnetOwners === \"undefined\" || !(this.subnetOwners instanceof outputs_1.SECPOwnerOutput)) {\n            throw new Error(\"CreateSubnetTx.toBuffer -- this.subnetOwners is not a SECPOwnerOutput\");\n        }\n        let typeID = buffer_1.Buffer.alloc(4);\n        typeID.writeUInt32BE(this.subnetOwners.getOutputID(), 0);\n        let barr = [super.toBuffer(), typeID, this.subnetOwners.toBuffer()];\n        return buffer_1.Buffer.concat(barr);\n    }\n}\nexports.CreateSubnetTx = CreateSubnetTx;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlc3VibmV0dHguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpcy9wbGF0Zm9ybXZtL2NyZWF0ZXN1Ym5ldHR4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBOzs7R0FHRztBQUNILG9DQUFpQztBQUNqQyxxQ0FBa0M7QUFDbEMsMkNBQWtEO0FBQ2xELHFEQUF5RDtBQUN6RCx1Q0FBK0Q7QUFFL0QsNkRBQThFO0FBRTlFLE1BQU0sVUFBVSxHQUFHLDZCQUFhLENBQUMsV0FBVyxFQUFFLENBQUM7QUFFL0MsTUFBYSxjQUFlLFNBQVEsZUFBTTtJQStEeEM7Ozs7Ozs7OztNQVNFO0lBQ0YsWUFDRSxZQUFtQiw0QkFBZ0IsRUFDbkMsZUFBc0IsZUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQzFDLE9BQWlDLFNBQVMsRUFDMUMsTUFBK0IsU0FBUyxFQUN4QyxPQUFjLFNBQVMsRUFDdkIsZUFBK0IsU0FBUztRQUV4QyxLQUFLLENBQUMsU0FBUyxFQUFFLFlBQVksRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBaEZ4QyxjQUFTLEdBQUcsZ0JBQWdCLENBQUM7UUFDN0IsWUFBTyxHQUFHLCtCQUFtQixDQUFDLGNBQWMsQ0FBQztRQWU3QyxpQkFBWSxHQUFtQixTQUFTLENBQUM7UUFFbkQ7O1dBRUc7UUFDSCxjQUFTLEdBQUcsR0FBVSxFQUFFO1lBQ3RCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztRQUN0QixDQUFDLENBQUE7UUEwREMsSUFBSSxDQUFDLFlBQVksR0FBRyxZQUFZLENBQUM7SUFDbkMsQ0FBQztJQS9FRCxTQUFTLENBQUMsV0FBOEIsS0FBSztRQUMzQyxJQUFJLE1BQU0sR0FBVSxLQUFLLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzlDLHVDQUNLLE1BQU0sS0FDVCxjQUFjLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLElBQ3REO0lBQ0gsQ0FBQztJQUFBLENBQUM7SUFDRixXQUFXLENBQUMsTUFBYSxFQUFFLFdBQThCLEtBQUs7UUFDNUQsS0FBSyxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDcEMsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLHlCQUFlLEVBQUUsQ0FBQztRQUMxQyxJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDbEUsQ0FBQztJQVdEOztPQUVHO0lBQ0gsZUFBZTtRQUNYLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQztJQUM3QixDQUFDO0lBRUQ7Ozs7Ozs7OztPQVNHO0lBQ0gsVUFBVSxDQUFDLEtBQVksRUFBRSxTQUFnQixDQUFDO1FBQ3RDLE1BQU0sR0FBRyxLQUFLLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztRQUN6QyxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUkseUJBQWUsRUFBRSxDQUFDO1FBQzFDLE1BQU0sR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDckQsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQztJQUVIOztPQUVHO0lBQ0gsUUFBUTtRQUNKLElBQUcsT0FBTyxJQUFJLENBQUMsWUFBWSxLQUFLLFdBQVcsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksWUFBWSx5QkFBZSxDQUFDLEVBQUU7WUFDNUYsTUFBTSxJQUFJLEtBQUssQ0FBQyx1RUFBdUUsQ0FBQyxDQUFDO1NBQzVGO1FBQ0QsSUFBSSxNQUFNLEdBQVUsZUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNwQyxNQUFNLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDekQsSUFBSSxJQUFJLEdBQWlCLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7UUFDbEYsT0FBTyxlQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQy9CLENBQUM7Q0F1QkY7QUFwRkQsd0NBb0ZDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAcGFja2FnZURvY3VtZW50YXRpb25cbiAqIEBtb2R1bGUgQVBJLVBsYXRmb3JtVk0tQ3JlYXRlU3VibmV0VHhcbiAqL1xuaW1wb3J0IHsgQnVmZmVyIH0gZnJvbSAnYnVmZmVyLyc7XG5pbXBvcnQgeyBCYXNlVHggfSBmcm9tICcuL2Jhc2V0eCc7XG5pbXBvcnQgeyBQbGF0Zm9ybVZNQ29uc3RhbnRzIH0gZnJvbSAnLi9jb25zdGFudHMnO1xuaW1wb3J0IHsgRGVmYXVsdE5ldHdvcmtJRCB9IGZyb20gJy4uLy4uL3V0aWxzL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBUcmFuc2ZlcmFibGVPdXRwdXQsIFNFQ1BPd25lck91dHB1dH0gZnJvbSAnLi9vdXRwdXRzJztcbmltcG9ydCB7IFRyYW5zZmVyYWJsZUlucHV0IH0gZnJvbSAnLi9pbnB1dHMnO1xuaW1wb3J0IHsgU2VyaWFsaXphdGlvbiwgU2VyaWFsaXplZEVuY29kaW5nIH0gZnJvbSAnLi4vLi4vdXRpbHMvc2VyaWFsaXphdGlvbic7XG5cbmNvbnN0IHNlcmlhbGl6ZXIgPSBTZXJpYWxpemF0aW9uLmdldEluc3RhbmNlKCk7XG5cbmV4cG9ydCBjbGFzcyBDcmVhdGVTdWJuZXRUeCBleHRlbmRzIEJhc2VUeCB7XG4gIHByb3RlY3RlZCBfdHlwZU5hbWUgPSBcIlNFQ1BDcmVkZW50aWFsXCI7XG4gIHByb3RlY3RlZCBfdHlwZUlEID0gUGxhdGZvcm1WTUNvbnN0YW50cy5DUkVBVEVTVUJORVRUWDtcblxuICBzZXJpYWxpemUoZW5jb2Rpbmc6U2VyaWFsaXplZEVuY29kaW5nID0gXCJoZXhcIik6b2JqZWN0IHtcbiAgICBsZXQgZmllbGRzOm9iamVjdCA9IHN1cGVyLnNlcmlhbGl6ZShlbmNvZGluZyk7XG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLmZpZWxkcyxcbiAgICAgIFwic3VibmV0T3duZXJzXCI6IHRoaXMuc3VibmV0T3duZXJzLnNlcmlhbGl6ZShlbmNvZGluZylcbiAgICB9XG4gIH07XG4gIGRlc2VyaWFsaXplKGZpZWxkczpvYmplY3QsIGVuY29kaW5nOlNlcmlhbGl6ZWRFbmNvZGluZyA9IFwiaGV4XCIpIHtcbiAgICBzdXBlci5kZXNlcmlhbGl6ZShmaWVsZHMsIGVuY29kaW5nKTtcbiAgICB0aGlzLnN1Ym5ldE93bmVycyA9IG5ldyBTRUNQT3duZXJPdXRwdXQoKTtcbiAgICB0aGlzLnN1Ym5ldE93bmVycy5kZXNlcmlhbGl6ZShmaWVsZHNbXCJzdWJuZXRPd25lcnNcIl0sIGVuY29kaW5nKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBzdWJuZXRPd25lcnM6U0VDUE93bmVyT3V0cHV0ID0gdW5kZWZpbmVkO1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBpZCBvZiB0aGUgW1tDcmVhdGVTdWJuZXRUeF1dXG4gICAqL1xuICBnZXRUeFR5cGUgPSAoKTpudW1iZXIgPT4ge1xuICAgIHJldHVybiB0aGlzLl90eXBlSUQ7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlcnxCdWZmZXJ9IGZvciB0aGUgcmV3YXJkIGFkZHJlc3MuXG4gICAqL1xuICBnZXRTdWJuZXRPd25lcnMoKTpTRUNQT3duZXJPdXRwdXQge1xuICAgICAgcmV0dXJuIHRoaXMuc3VibmV0T3duZXJzO1xuICB9XG5cbiAgLyoqXG4gICAqIFRha2VzIGEge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyfEJ1ZmZlcn0gY29udGFpbmluZyBhbiBbW0NyZWF0ZVN1Ym5ldFR4XV0sIHBhcnNlcyBpdCwgcG9wdWxhdGVzIHRoZSBjbGFzcywgYW5kIHJldHVybnMgdGhlIGxlbmd0aCBvZiB0aGUgW1tDcmVhdGVTdWJuZXRUeF1dIGluIGJ5dGVzLlxuICAgKlxuICAgKiBAcGFyYW0gYnl0ZXMgQSB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXJ8QnVmZmVyfSBjb250YWluaW5nIGEgcmF3IFtbQ3JlYXRlU3VibmV0VHhdXVxuICAgKiBAcGFyYW0gb2Zmc2V0IEEgbnVtYmVyIGZvciB0aGUgc3RhcnRpbmcgcG9zaXRpb24gaW4gdGhlIGJ5dGVzLlxuICAgKlxuICAgKiBAcmV0dXJucyBUaGUgbGVuZ3RoIG9mIHRoZSByYXcgW1tDcmVhdGVTdWJuZXRUeF1dXG4gICAqXG4gICAqIEByZW1hcmtzIGFzc3VtZSBub3QtY2hlY2tzdW1tZWRcbiAgICovXG4gIGZyb21CdWZmZXIoYnl0ZXM6QnVmZmVyLCBvZmZzZXQ6bnVtYmVyID0gMCk6bnVtYmVyIHtcbiAgICAgIG9mZnNldCA9IHN1cGVyLmZyb21CdWZmZXIoYnl0ZXMsIG9mZnNldCk7XG4gICAgICB0aGlzLnN1Ym5ldE93bmVycyA9IG5ldyBTRUNQT3duZXJPdXRwdXQoKTtcbiAgICAgIG9mZnNldCA9IHRoaXMuc3VibmV0T3duZXJzLmZyb21CdWZmZXIoYnl0ZXMsIG9mZnNldCk7XG4gICAgICByZXR1cm4gb2Zmc2V0O1xuICAgIH1cbiAgXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyfEJ1ZmZlcn0gcmVwcmVzZW50YXRpb24gb2YgdGhlIFtbQ3JlYXRlU3VibmV0VHhdXS5cbiAgICovXG4gIHRvQnVmZmVyKCk6QnVmZmVyIHtcbiAgICAgIGlmKHR5cGVvZiB0aGlzLnN1Ym5ldE93bmVycyA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhKHRoaXMuc3VibmV0T3duZXJzIGluc3RhbmNlb2YgU0VDUE93bmVyT3V0cHV0KSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNyZWF0ZVN1Ym5ldFR4LnRvQnVmZmVyIC0tIHRoaXMuc3VibmV0T3duZXJzIGlzIG5vdCBhIFNFQ1BPd25lck91dHB1dFwiKTtcbiAgICAgIH1cbiAgICAgIGxldCB0eXBlSUQ6QnVmZmVyID0gQnVmZmVyLmFsbG9jKDQpO1xuICAgICAgdHlwZUlELndyaXRlVUludDMyQkUodGhpcy5zdWJuZXRPd25lcnMuZ2V0T3V0cHV0SUQoKSwgMCk7XG4gICAgICBsZXQgYmFycjpBcnJheTxCdWZmZXI+ID0gW3N1cGVyLnRvQnVmZmVyKCksIHR5cGVJRCwgdGhpcy5zdWJuZXRPd25lcnMudG9CdWZmZXIoKV07XG4gICAgICByZXR1cm4gQnVmZmVyLmNvbmNhdChiYXJyKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDbGFzcyByZXByZXNlbnRpbmcgYW4gdW5zaWduZWQgQ3JlYXRlIFN1Ym5ldCB0cmFuc2FjdGlvbi5cbiAgICpcbiAgICogQHBhcmFtIG5ldHdvcmtpZCBPcHRpb25hbCBuZXR3b3JraWQsIFtbRGVmYXVsdE5ldHdvcmtJRF1dXG4gICAqIEBwYXJhbSBibG9ja2NoYWluaWQgT3B0aW9uYWwgYmxvY2tjaGFpbmlkLCBkZWZhdWx0IEJ1ZmZlci5hbGxvYygzMiwgMTYpXG4gICAqIEBwYXJhbSBvdXRzIE9wdGlvbmFsIGFycmF5IG9mIHRoZSBbW1RyYW5zZmVyYWJsZU91dHB1dF1dc1xuICAgKiBAcGFyYW0gaW5zIE9wdGlvbmFsIGFycmF5IG9mIHRoZSBbW1RyYW5zZmVyYWJsZUlucHV0XV1zXG4gICAqIEBwYXJhbSBtZW1vIE9wdGlvbmFsIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlcnxCdWZmZXJ9IGZvciB0aGUgbWVtbyBmaWVsZFxuICAgKiBAcGFyYW0gc3VibmV0T3duZXJzIE9wdGlvbmFsIFtbU0VDUE93bmVyT3V0cHV0XV0gY2xhc3MgZm9yIHNwZWNpZnlpbmcgd2hvIG93bnMgdGhlIHN1Ym5ldC5cbiAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgbmV0d29ya2lkOm51bWJlciA9IERlZmF1bHROZXR3b3JrSUQsIFxuICAgIGJsb2NrY2hhaW5pZDpCdWZmZXIgPSBCdWZmZXIuYWxsb2MoMzIsIDE2KSwgXG4gICAgb3V0czpBcnJheTxUcmFuc2ZlcmFibGVPdXRwdXQ+ID0gdW5kZWZpbmVkLCBcbiAgICBpbnM6QXJyYXk8VHJhbnNmZXJhYmxlSW5wdXQ+ID0gdW5kZWZpbmVkLFxuICAgIG1lbW86QnVmZmVyID0gdW5kZWZpbmVkLFxuICAgIHN1Ym5ldE93bmVyczpTRUNQT3duZXJPdXRwdXQgPSB1bmRlZmluZWRcbiAgKSB7XG4gICAgc3VwZXIobmV0d29ya2lkLCBibG9ja2NoYWluaWQsIG91dHMsIGlucywgbWVtbyk7XG4gICAgdGhpcy5zdWJuZXRPd25lcnMgPSBzdWJuZXRPd25lcnM7XG4gIH1cbn1cbiAgIl19","\"use strict\";\n/**\n * @packageDocumentation\n * @module Common-APIBase\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.APIBase = exports.RequestResponseData = void 0;\nconst bintools_1 = __importDefault(require(\"../utils/bintools\"));\nconst db_1 = __importDefault(require(\"../utils/db\"));\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\n/**\n * Response data for HTTP requests.\n */\nclass RequestResponseData {\n}\nexports.RequestResponseData = RequestResponseData;\n/**\n * Abstract class defining a generic endpoint that all endpoints must implement (extend).\n */\nclass APIBase {\n    /**\n       *\n       * @param core Reference to the Avalanche instance using this baseurl\n       * @param baseurl Path to the baseurl - ex: \"/ext/bc/X\"\n       */\n    constructor(core, baseurl) {\n        /**\n           * Sets the path of the APIs baseurl.\n           *\n           * @param baseurl Path of the APIs baseurl - ex: \"/ext/bc/X\"\n           */\n        this.setBaseURL = (baseurl) => {\n            if (this.db && this.baseurl !== baseurl) {\n                const backup = this.db.getAll();\n                this.db.clearAll();\n                this.baseurl = baseurl;\n                this.db = db_1.default.getNamespace(baseurl);\n                this.db.setAll(backup, true);\n            }\n            else {\n                this.baseurl = baseurl;\n                this.db = db_1.default.getNamespace(baseurl);\n            }\n        };\n        /**\n           * Returns the baseurl's path.\n           */\n        this.getBaseURL = () => this.baseurl;\n        /**\n           * Returns the baseurl's database.\n           */\n        this.getDB = () => this.db;\n        this.core = core;\n        this.setBaseURL(baseurl);\n    }\n}\nexports.APIBase = APIBase;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpYmFzZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tb24vYXBpYmFzZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7OztHQUdHOzs7Ozs7QUFJSCxpRUFBeUM7QUFDekMscURBQTZCO0FBRzdCOztHQUVHO0FBQ0gsTUFBTSxRQUFRLEdBQUcsa0JBQVEsQ0FBQyxXQUFXLEVBQUUsQ0FBQztBQUV4Qzs7R0FFRztBQUNILE1BQWEsbUJBQW1CO0NBVS9CO0FBVkQsa0RBVUM7QUFFRDs7R0FFRztBQUNILE1BQXNCLE9BQU87SUFtQzNCOzs7O1NBSUs7SUFDTCxZQUFZLElBQWtCLEVBQUUsT0FBYztRQWpDOUM7Ozs7YUFJSztRQUNMLGVBQVUsR0FBRyxDQUFDLE9BQWMsRUFBRSxFQUFFO1lBQzlCLElBQUksSUFBSSxDQUFDLEVBQUUsSUFBSSxJQUFJLENBQUMsT0FBTyxLQUFLLE9BQU8sRUFBRTtnQkFDdkMsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQztnQkFDaEMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQztnQkFDbkIsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7Z0JBQ3ZCLElBQUksQ0FBQyxFQUFFLEdBQUcsWUFBRSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQztnQkFDbkMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO2FBQzlCO2lCQUFNO2dCQUNMLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO2dCQUN2QixJQUFJLENBQUMsRUFBRSxHQUFHLFlBQUUsQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUM7YUFDcEM7UUFDSCxDQUFDLENBQUM7UUFFRjs7YUFFSztRQUNMLGVBQVUsR0FBRyxHQUFZLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO1FBRXpDOzthQUVLO1FBQ0wsVUFBSyxHQUFHLEdBQVksRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7UUFRN0IsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUMzQixDQUFDO0NBQ0Y7QUE1Q0QsMEJBNENDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAcGFja2FnZURvY3VtZW50YXRpb25cbiAqIEBtb2R1bGUgQ29tbW9uLUFQSUJhc2VcbiAqL1xuXG5pbXBvcnQgeyBTdG9yZUFQSSB9IGZyb20gJ3N0b3JlMic7XG5pbXBvcnQgeyBDbGllbnRSZXF1ZXN0IH0gZnJvbSAnaHR0cCc7XG5pbXBvcnQgQmluVG9vbHMgZnJvbSAnLi4vdXRpbHMvYmludG9vbHMnO1xuaW1wb3J0IERCIGZyb20gJy4uL3V0aWxzL2RiJztcbmltcG9ydCBBdmFsYW5jaGVDb3JlIGZyb20gJy4uL2F2YWxhbmNoZSc7XG5cbi8qKlxuICogQGlnbm9yZVxuICovXG5jb25zdCBiaW50b29scyA9IEJpblRvb2xzLmdldEluc3RhbmNlKCk7XG5cbi8qKlxuICogUmVzcG9uc2UgZGF0YSBmb3IgSFRUUCByZXF1ZXN0cy5cbiAqL1xuZXhwb3J0IGNsYXNzIFJlcXVlc3RSZXNwb25zZURhdGEge1xuICBkYXRhOiBhbnk7XG5cbiAgaGVhZGVyczphbnk7XG5cbiAgc3RhdHVzOiBudW1iZXI7XG5cbiAgc3RhdHVzVGV4dDogc3RyaW5nO1xuXG4gIHJlcXVlc3Q6Q2xpZW50UmVxdWVzdCB8IFhNTEh0dHBSZXF1ZXN0O1xufVxuXG4vKipcbiAqIEFic3RyYWN0IGNsYXNzIGRlZmluaW5nIGEgZ2VuZXJpYyBlbmRwb2ludCB0aGF0IGFsbCBlbmRwb2ludHMgbXVzdCBpbXBsZW1lbnQgKGV4dGVuZCkuXG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBBUElCYXNlIHtcbiAgcHJvdGVjdGVkIGNvcmU6QXZhbGFuY2hlQ29yZTtcblxuICBwcm90ZWN0ZWQgYmFzZXVybDpzdHJpbmc7XG5cbiAgcHJvdGVjdGVkIGRiOlN0b3JlQVBJO1xuXG4gIC8qKlxuICAgICAqIFNldHMgdGhlIHBhdGggb2YgdGhlIEFQSXMgYmFzZXVybC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBiYXNldXJsIFBhdGggb2YgdGhlIEFQSXMgYmFzZXVybCAtIGV4OiBcIi9leHQvYmMvWFwiXG4gICAgICovXG4gIHNldEJhc2VVUkwgPSAoYmFzZXVybDpzdHJpbmcpID0+IHtcbiAgICBpZiAodGhpcy5kYiAmJiB0aGlzLmJhc2V1cmwgIT09IGJhc2V1cmwpIHtcbiAgICAgIGNvbnN0IGJhY2t1cCA9IHRoaXMuZGIuZ2V0QWxsKCk7XG4gICAgICB0aGlzLmRiLmNsZWFyQWxsKCk7XG4gICAgICB0aGlzLmJhc2V1cmwgPSBiYXNldXJsO1xuICAgICAgdGhpcy5kYiA9IERCLmdldE5hbWVzcGFjZShiYXNldXJsKTtcbiAgICAgIHRoaXMuZGIuc2V0QWxsKGJhY2t1cCwgdHJ1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuYmFzZXVybCA9IGJhc2V1cmw7XG4gICAgICB0aGlzLmRiID0gREIuZ2V0TmFtZXNwYWNlKGJhc2V1cmwpO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBiYXNldXJsJ3MgcGF0aC5cbiAgICAgKi9cbiAgZ2V0QmFzZVVSTCA9ICgpIDogc3RyaW5nID0+IHRoaXMuYmFzZXVybDtcblxuICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBiYXNldXJsJ3MgZGF0YWJhc2UuXG4gICAgICovXG4gIGdldERCID0gKCk6U3RvcmVBUEkgPT4gdGhpcy5kYjtcblxuICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSBjb3JlIFJlZmVyZW5jZSB0byB0aGUgQXZhbGFuY2hlIGluc3RhbmNlIHVzaW5nIHRoaXMgYmFzZXVybFxuICAgICAqIEBwYXJhbSBiYXNldXJsIFBhdGggdG8gdGhlIGJhc2V1cmwgLSBleDogXCIvZXh0L2JjL1hcIlxuICAgICAqL1xuICBjb25zdHJ1Y3Rvcihjb3JlOkF2YWxhbmNoZUNvcmUsIGJhc2V1cmw6c3RyaW5nKSB7XG4gICAgdGhpcy5jb3JlID0gY29yZTtcbiAgICB0aGlzLnNldEJhc2VVUkwoYmFzZXVybCk7XG4gIH1cbn1cblxuIl19","\"use strict\";\n/**\n * @packageDocumentation\n * @module Common-KeyChain\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.StandardKeyChain = exports.StandardKeyPair = void 0;\nconst buffer_1 = require(\"buffer/\");\n/**\n * Class for representing a private and public keypair in Avalanche.\n * All APIs that need key pairs should extend on this class.\n */\nclass StandardKeyPair {\n    constructor() {\n        /**\n           * Returns a reference to the private key.\n           *\n           * @returns A {@link https://github.com/feross/buffer|Buffer} containing the private key\n           */\n        this.getPrivateKey = () => this.privk;\n        /**\n           * Returns a reference to the public key.\n           *\n           * @returns A {@link https://github.com/feross/buffer|Buffer} containing the public key\n           */\n        this.getPublicKey = () => this.pubk;\n    }\n}\nexports.StandardKeyPair = StandardKeyPair;\n/**\n * Class for representing a key chain in Avalanche.\n * All endpoints that need key chains should extend on this class.\n *\n * @typeparam KPClass extending [[StandardKeyPair]] which is used as the key in [[StandardKeyChain]]\n */\nclass StandardKeyChain {\n    constructor() {\n        this.keys = {};\n        /**\n           * Gets an array of addresses stored in the [[StandardKeyChain]].\n           *\n           * @returns An array of {@link https://github.com/feross/buffer|Buffer}  representations\n           * of the addresses\n           */\n        this.getAddresses = () => Object.values(this.keys).map((kp) => kp.getAddress());\n        /**\n           * Gets an array of addresses stored in the [[StandardKeyChain]].\n           *\n           * @returns An array of string representations of the addresses\n           */\n        this.getAddressStrings = () => Object.values(this.keys)\n            .map((kp) => kp.getAddressString());\n        /**\n           * Removes the key pair from the list of they keys managed in the [[StandardKeyChain]].\n           *\n           * @param key A {@link https://github.com/feross/buffer|Buffer} for the address or\n           * KPClass to remove\n           *\n           * @returns The boolean true if a key was removed.\n           */\n        this.removeKey = (key) => {\n            let kaddr;\n            if (key instanceof buffer_1.Buffer) {\n                kaddr = key.toString('hex');\n            }\n            else {\n                kaddr = key.getAddress().toString('hex');\n            }\n            if (kaddr in this.keys) {\n                delete this.keys[kaddr];\n                return true;\n            }\n            return false;\n        };\n        /**\n           * Checks if there is a key associated with the provided address.\n           *\n           * @param address The address to check for existence in the keys database\n           *\n           * @returns True on success, false if not found\n           */\n        this.hasKey = (address) => (address.toString('hex') in this.keys);\n        /**\n           * Returns the [[StandardKeyPair]] listed under the provided address\n           *\n           * @param address The {@link https://github.com/feross/buffer|Buffer} of the address to\n           * retrieve from the keys database\n           *\n           * @returns A reference to the [[StandardKeyPair]] in the keys database\n           */\n        this.getKey = (address) => this.keys[address.toString('hex')];\n    }\n    /**\n       * Adds the key pair to the list of the keys managed in the [[StandardKeyChain]].\n       *\n       * @param newKey A key pair of the appropriate class to be added to the [[StandardKeyChain]]\n       */\n    addKey(newKey) {\n        this.keys[newKey.getAddress().toString('hex')] = newKey;\n    }\n    ;\n}\nexports.StandardKeyChain = StandardKeyChain;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./api\"), exports);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpcy9pbmZvL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBLHdDQUFzQiIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gJy4vYXBpJztcbiJdfQ==","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.StandardAmountInput = exports.StandardTransferableInput = exports.StandardParseableInput = exports.Input = void 0;\n/**\n * @packageDocumentation\n * @module Common-Inputs\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../utils/bintools\"));\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst credentials_1 = require(\"./credentials\");\nconst serialization_1 = require(\"../utils/serialization\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serializer = serialization_1.Serialization.getInstance();\nclass Input extends serialization_1.Serializable {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"Input\";\n        this._typeID = undefined;\n        this.sigCount = buffer_1.Buffer.alloc(4);\n        this.sigIdxs = []; // idxs of signers from utxo\n        /**\n         * Returns the array of [[SigIdx]] for this [[Input]]\n         */\n        this.getSigIdxs = () => this.sigIdxs;\n        /**\n         * Creates and adds a [[SigIdx]] to the [[Input]].\n         *\n         * @param addressIdx The index of the address to reference in the signatures\n         * @param address The address of the source of the signature\n         */\n        this.addSignatureIdx = (addressIdx, address) => {\n            const sigidx = new credentials_1.SigIdx();\n            const b = buffer_1.Buffer.alloc(4);\n            b.writeUInt32BE(addressIdx, 0);\n            sigidx.fromBuffer(b);\n            sigidx.setSource(address);\n            this.sigIdxs.push(sigidx);\n            this.sigCount.writeUInt32BE(this.sigIdxs.length, 0);\n        };\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { \"sigIdxs\": this.sigIdxs.map((s) => s.serialize(encoding)) });\n    }\n    ;\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.sigIdxs = fields[\"sigIdxs\"].map((s) => {\n            let sidx = new credentials_1.SigIdx();\n            sidx.deserialize(s, encoding);\n            return sidx;\n        });\n        this.sigCount.writeUInt32BE(this.sigIdxs.length, 0);\n    }\n    fromBuffer(bytes, offset = 0) {\n        this.sigCount = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const sigCount = this.sigCount.readUInt32BE(0);\n        this.sigIdxs = [];\n        for (let i = 0; i < sigCount; i++) {\n            const sigidx = new credentials_1.SigIdx();\n            const sigbuff = bintools.copyFrom(bytes, offset, offset + 4);\n            sigidx.fromBuffer(sigbuff);\n            offset += 4;\n            this.sigIdxs.push(sigidx);\n        }\n        return offset;\n    }\n    toBuffer() {\n        this.sigCount.writeUInt32BE(this.sigIdxs.length, 0);\n        let bsize = this.sigCount.length;\n        const barr = [this.sigCount];\n        for (let i = 0; i < this.sigIdxs.length; i++) {\n            const b = this.sigIdxs[i].toBuffer();\n            barr.push(b);\n            bsize += b.length;\n        }\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n    /**\n     * Returns a base-58 representation of the [[Input]].\n     */\n    toString() {\n        return bintools.bufferToB58(this.toBuffer());\n    }\n}\nexports.Input = Input;\nInput.comparator = () => (a, b) => {\n    const aoutid = buffer_1.Buffer.alloc(4);\n    aoutid.writeUInt32BE(a.getInputID(), 0);\n    const abuff = a.toBuffer();\n    const boutid = buffer_1.Buffer.alloc(4);\n    boutid.writeUInt32BE(b.getInputID(), 0);\n    const bbuff = b.toBuffer();\n    const asort = buffer_1.Buffer.concat([aoutid, abuff], aoutid.length + abuff.length);\n    const bsort = buffer_1.Buffer.concat([boutid, bbuff], boutid.length + bbuff.length);\n    return buffer_1.Buffer.compare(asort, bsort);\n};\nclass StandardParseableInput extends serialization_1.Serializable {\n    /**\n     * Class representing an [[StandardParseableInput]] for a transaction.\n     *\n     * @param input A number representing the InputID of the [[StandardParseableInput]]\n     */\n    constructor(input = undefined) {\n        super();\n        this._typeName = \"StandardParseableInput\";\n        this._typeID = undefined;\n        this.getInput = () => this.input;\n        if (input instanceof Input) {\n            this.input = input;\n        }\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { \"input\": this.input.serialize(encoding) });\n    }\n    ;\n    toBuffer() {\n        const inbuff = this.input.toBuffer();\n        const inid = buffer_1.Buffer.alloc(4);\n        inid.writeUInt32BE(this.input.getInputID(), 0);\n        const barr = [inid, inbuff];\n        return buffer_1.Buffer.concat(barr, inid.length + inbuff.length);\n    }\n}\nexports.StandardParseableInput = StandardParseableInput;\n/**\n * Returns a function used to sort an array of [[StandardParseableInput]]s\n */\nStandardParseableInput.comparator = () => (a, b) => {\n    const sorta = a.toBuffer();\n    const sortb = b.toBuffer();\n    return buffer_1.Buffer.compare(sorta, sortb);\n};\nclass StandardTransferableInput extends StandardParseableInput {\n    /**\n     * Class representing an [[StandardTransferableInput]] for a transaction.\n     *\n     * @param txid A {@link https://github.com/feross/buffer|Buffer} containing the transaction ID of the referenced UTXO\n     * @param outputidx A {@link https://github.com/feross/buffer|Buffer} containing the index of the output in the transaction consumed in the [[StandardTransferableInput]]\n     * @param assetID A {@link https://github.com/feross/buffer|Buffer} representing the assetID of the [[Input]]\n     * @param input An [[Input]] to be made transferable\n     */\n    constructor(txid = undefined, outputidx = undefined, assetID = undefined, input = undefined) {\n        super();\n        this._typeName = \"StandardTransferableInput\";\n        this._typeID = undefined;\n        this.txid = buffer_1.Buffer.alloc(32);\n        this.outputidx = buffer_1.Buffer.alloc(4);\n        this.assetid = buffer_1.Buffer.alloc(32);\n        /**\n         * Returns a {@link https://github.com/feross/buffer|Buffer} of the TxID.\n         */\n        this.getTxID = () => this.txid;\n        /**\n         * Returns a {@link https://github.com/feross/buffer|Buffer}  of the OutputIdx.\n         */\n        this.getOutputIdx = () => this.outputidx;\n        /**\n         * Returns a base-58 string representation of the UTXOID this [[StandardTransferableInput]] references.\n         */\n        this.getUTXOID = () => bintools.bufferToB58(buffer_1.Buffer.concat([this.txid, this.outputidx]));\n        /**\n         * Returns the input.\n         */\n        this.getInput = () => this.input;\n        /**\n         * Returns the assetID of the input.\n         */\n        this.getAssetID = () => this.assetid;\n        if (typeof txid !== 'undefined' && typeof outputidx !== 'undefined' && typeof assetID !== 'undefined' && input instanceof Input) {\n            this.input = input;\n            this.txid = txid;\n            this.outputidx = outputidx;\n            this.assetid = assetID;\n        }\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { \"txid\": serializer.encoder(this.txid, encoding, \"Buffer\", \"cb58\"), \"outputidx\": serializer.encoder(this.outputidx, encoding, \"Buffer\", \"decimalString\"), \"assetid\": serializer.encoder(this.assetid, encoding, \"Buffer\", \"cb58\") });\n    }\n    ;\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.txid = serializer.decoder(fields[\"txid\"], encoding, \"cb58\", \"Buffer\", 32);\n        this.outputidx = serializer.decoder(fields[\"outputidx\"], encoding, \"decimalString\", \"Buffer\", 4);\n        this.assetid = serializer.decoder(fields[\"assetid\"], encoding, \"cb58\", \"Buffer\", 32);\n        //input deserialization must be implmented in child classes\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[StandardTransferableInput]].\n     */\n    toBuffer() {\n        const parseableBuff = super.toBuffer();\n        const bsize = this.txid.length + this.outputidx.length + this.assetid.length + parseableBuff.length;\n        const barr = [this.txid, this.outputidx, this.assetid, parseableBuff];\n        const buff = buffer_1.Buffer.concat(barr, bsize);\n        return buff;\n    }\n    /**\n     * Returns a base-58 representation of the [[StandardTransferableInput]].\n     */\n    toString() {\n        /* istanbul ignore next */\n        return bintools.bufferToB58(this.toBuffer());\n    }\n}\nexports.StandardTransferableInput = StandardTransferableInput;\n/**\n * An [[Input]] class which specifies a token amount .\n */\nclass StandardAmountInput extends Input {\n    /**\n     * An [[AmountInput]] class which issues a payment on an assetID.\n     *\n     * @param amount A {@link https://github.com/indutny/bn.js/|BN} representing the amount in the input\n     */\n    constructor(amount = undefined) {\n        super();\n        this._typeName = \"StandardAmountInput\";\n        this._typeID = undefined;\n        this.amount = buffer_1.Buffer.alloc(8);\n        this.amountValue = new bn_js_1.default(0);\n        /**\n         * Returns the amount as a {@link https://github.com/indutny/bn.js/|BN}.\n         */\n        this.getAmount = () => this.amountValue.clone();\n        if (amount) {\n            this.amountValue = amount.clone();\n            this.amount = bintools.fromBNToBuffer(amount, 8);\n        }\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { \"amount\": serializer.encoder(this.amount, encoding, \"Buffer\", \"decimalString\", 8) });\n    }\n    ;\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.amount = serializer.decoder(fields[\"amount\"], encoding, \"decimalString\", \"Buffer\", 8);\n        this.amountValue = bintools.fromBufferToBN(this.amount);\n    }\n    /**\n     * Popuates the instance from a {@link https://github.com/feross/buffer|Buffer} representing the [[AmountInput]] and returns the size of the input.\n     */\n    fromBuffer(bytes, offset = 0) {\n        this.amount = bintools.copyFrom(bytes, offset, offset + 8);\n        this.amountValue = bintools.fromBufferToBN(this.amount);\n        offset += 8;\n        return super.fromBuffer(bytes, offset);\n    }\n    /**\n     * Returns the buffer representing the [[AmountInput]] instance.\n     */\n    toBuffer() {\n        const superbuff = super.toBuffer();\n        const bsize = this.amount.length + superbuff.length;\n        const barr = [this.amount, superbuff];\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n}\nexports.StandardAmountInput = StandardAmountInput;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tbW9uL2lucHV0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOzs7R0FHRztBQUNILG9DQUFpQztBQUNqQyxpRUFBeUM7QUFDekMsa0RBQXVCO0FBQ3ZCLCtDQUF1QztBQUN2QywwREFBeUY7QUFFekY7O0dBRUc7QUFDSCxNQUFNLFFBQVEsR0FBRyxrQkFBUSxDQUFDLFdBQVcsRUFBRSxDQUFDO0FBQ3hDLE1BQU0sVUFBVSxHQUFHLDZCQUFhLENBQUMsV0FBVyxFQUFFLENBQUM7QUFFL0MsTUFBc0IsS0FBTSxTQUFRLDRCQUFZO0lBQWhEOztRQUNZLGNBQVMsR0FBRyxPQUFPLENBQUM7UUFDcEIsWUFBTyxHQUFHLFNBQVMsQ0FBQztRQW1CcEIsYUFBUSxHQUFVLGVBQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbEMsWUFBTyxHQUFpQixFQUFFLENBQUMsQ0FBQyw0QkFBNEI7UUFrQmxFOztXQUVHO1FBQ0gsZUFBVSxHQUFHLEdBQWlCLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO1FBSTlDOzs7OztXQUtHO1FBQ0gsb0JBQWUsR0FBRyxDQUFDLFVBQWlCLEVBQUUsT0FBYyxFQUFFLEVBQUU7WUFDdEQsTUFBTSxNQUFNLEdBQVUsSUFBSSxvQkFBTSxFQUFFLENBQUM7WUFDbkMsTUFBTSxDQUFDLEdBQVUsZUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNqQyxDQUFDLENBQUMsYUFBYSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUMvQixNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3JCLE1BQU0sQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDMUIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDMUIsSUFBSSxDQUFD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QUFDLFdBQVcsR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN4RCxNQUFNLElBQUksQ0FBQyxDQUFDO1FBQ1osT0FBTyxLQUFLLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztJQUN6QyxDQUFDO0lBRUQ7O09BRUc7SUFDSCxRQUFRO1FBQ04sTUFBTSxTQUFTLEdBQVUsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQzFDLE1BQU0sS0FBSyxHQUFVLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUM7UUFDM0QsTUFBTSxJQUFJLEdBQWlCLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQztRQUNwRCxPQUFPLGVBQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ3BDLENBQUM7Q0FjRjtBQXpERCxrREF5REMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBwYWNrYWdlRG9jdW1lbnRhdGlvblxuICogQG1vZHVsZSBDb21tb24tSW5wdXRzXG4gKi9cbmltcG9ydCB7IEJ1ZmZlciB9IGZyb20gJ2J1ZmZlci8nO1xuaW1wb3J0IEJpblRvb2xzIGZyb20gJy4uL3V0aWxzL2JpbnRvb2xzJztcbmltcG9ydCBCTiBmcm9tICdibi5qcyc7XG5pbXBvcnQgeyBTaWdJZHggfSBmcm9tICcuL2NyZWRlbnRpYWxzJztcbmltcG9ydCB7IFNlcmlhbGl6YWJsZSwgU2VyaWFsaXphdGlvbiwgU2VyaWFsaXplZEVuY29kaW5nIH0gZnJvbSAnLi4vdXRpbHMvc2VyaWFsaXphdGlvbic7XG5cbi8qKlxuICogQGlnbm9yZVxuICovXG5jb25zdCBiaW50b29scyA9IEJpblRvb2xzLmdldEluc3RhbmNlKCk7XG5jb25zdCBzZXJpYWxpemVyID0gU2VyaWFsaXphdGlvbi5nZXRJbnN0YW5jZSgpO1xuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgSW5wdXQgZXh0ZW5kcyBTZXJpYWxpemFibGUge1xuICBwcm90ZWN0ZWQgX3R5cGVOYW1lID0gXCJJbnB1dFwiO1xuICBwcm90ZWN0ZWQgX3R5cGVJRCA9IHVuZGVmaW5lZDtcblxuICBzZXJpYWxpemUoZW5jb2Rpbmc6U2VyaWFsaXplZEVuY29kaW5nID0gXCJoZXhcIik6b2JqZWN0IHtcbiAgICBsZXQgZmllbGRzOm9iamVjdCA9IHN1cGVyLnNlcmlhbGl6ZShlbmNvZGluZyk7XG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLmZpZWxkcyxcbiAgICAgIFwic2lnSWR4c1wiOiB0aGlzLnNpZ0lkeHMubWFwKChzKSA9PiBzLnNlcmlhbGl6ZShlbmNvZGluZykpXG4gICAgfVxuICB9O1xuICBkZXNlcmlhbGl6ZShmaWVsZHM6b2JqZWN0LCBlbmNvZGluZzpTZXJpYWxpemVkRW5jb2RpbmcgPSBcImhleFwiKSB7XG4gICAgc3VwZXIuZGVzZXJpYWxpemUoZmllbGRzLCBlbmNvZGluZyk7XG4gICAgdGhpcy5zaWdJZHhzID0gZmllbGRzW1wic2lnSWR4c1wiXS5tYXAoKHM6b2JqZWN0KSA9PiB7XG4gICAgICBsZXQgc2lkeDpTaWdJZHggPSBuZXcgU2lnSWR4KCk7XG4gICAgICBzaWR4LmRlc2VyaWFsaXplKHMsIGVuY29kaW5nKTtcbiAgICAgIHJldHVybiBzaWR4O1xuICAgIH0pO1xuICAgIHRoaXMuc2lnQ291bnQud3JpdGVVSW50MzJCRSh0aGlzLnNpZ0lkeHMubGVuZ3RoLCAwKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBzaWdDb3VudDpCdWZmZXIgPSBCdWZmZXIuYWxsb2MoNCk7XG4gIHByb3RlY3RlZCBzaWdJZHhzOkFycmF5PFNpZ0lkeD4gPSBbXTsgLy8gaWR4cyBvZiBzaWduZXJzIGZyb20gdXR4b1xuXG4gIHN0YXRpYyBjb21wYXJhdG9yID0gKCk6KGE6SW5wdXQsIGI6SW5wdXQpID0+ICgxfC0xfDApID0+IChhOklucHV0LCBiOklucHV0KTooMXwtMXwwKSA9PiB7XG4gICAgY29uc3QgYW91dGlkOkJ1ZmZlciA9IEJ1ZmZlci5hbGxvYyg0KTtcbiAgICBhb3V0aWQud3JpdGVVSW50MzJCRShhLmdldElucHV0SUQoKSwgMCk7XG4gICAgY29uc3QgYWJ1ZmY6QnVmZmVyID0gYS50b0J1ZmZlcigpO1xuXG4gICAgY29uc3QgYm91dGlkOkJ1ZmZlciA9IEJ1ZmZlci5hbGxvYyg0KTtcbiAgICBib3V0aWQud3JpdGVVSW50MzJCRShiLmdldElucHV0SUQoKSwgMCk7XG4gICAgY29uc3QgYmJ1ZmY6QnVmZmVyID0gYi50b0J1ZmZlcigpO1xuXG4gICAgY29uc3QgYXNvcnQ6QnVmZmVyID0gQnVmZmVyLmNvbmNhdChbYW91dGlkLCBhYnVmZl0sIGFvdXRpZC5sZW5ndGggKyBhYnVmZi5sZW5ndGgpO1xuICAgIGNvbnN0IGJzb3J0OkJ1ZmZlciA9IEJ1ZmZlci5jb25jYXQoW2JvdXRpZCwgYmJ1ZmZdLCBib3V0aWQubGVuZ3RoICsgYmJ1ZmYubGVuZ3RoKTtcbiAgICByZXR1cm4gQnVmZmVyLmNvbXBhcmUoYXNvcnQsIGJzb3J0KSBhcyAoMXwtMXwwKTtcbiAgfTtcblxuICBhYnN0cmFjdCBnZXRJbnB1dElEKCk6bnVtYmVyO1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBhcnJheSBvZiBbW1NpZ0lkeF1dIGZvciB0aGlzIFtbSW5wdXRdXVxuICAgKi9cbiAgZ2V0U2lnSWR4cyA9ICgpOkFycmF5PFNpZ0lkeD4gPT4gdGhpcy5zaWdJZHhzO1xuXG4gIGFic3RyYWN0IGdldENyZWRlbnRpYWxJRCgpOm51bWJlcjtcblxuICAvKipcbiAgICogQ3JlYXRlcyBhbmQgYWRkcyBhIFtbU2lnSWR4XV0gdG8gdGhlIFtbSW5wdXRdXS5cbiAgICpcbiAgICogQHBhcmFtIGFkZHJlc3NJZHggVGhlIGluZGV4IG9mIHRoZSBhZGRyZXNzIHRvIHJlZmVyZW5jZSBpbiB0aGUgc2lnbmF0dXJlc1xuICAgKiBAcGFyYW0gYWRkcmVzcyBUaGUgYWRkcmVzcyBvZiB0aGUgc291cmNlIG9mIHRoZSBzaWduYXR1cmVcbiAgICovXG4gIGFkZFNpZ25hdHVyZUlkeCA9IChhZGRyZXNzSWR4Om51bWJlciwgYWRkcmVzczpCdWZmZXIpID0+IHtcbiAgICBjb25zdCBzaWdpZHg6U2lnSWR4ID0gbmV3IFNpZ0lkeCgpO1xuICAgIGNvbnN0IGI6QnVmZmVyID0gQnVmZmVyLmFsbG9jKDQpO1xuICAgIGIud3JpdGVVSW50MzJCRShhZGRyZXNzSWR4LCAwKTtcbiAgICBzaWdpZHguZnJvbUJ1ZmZlcihiKTtcbiAgICBzaWdpZHguc2V0U291cmNlKGFkZHJlc3MpO1xuICAgIHRoaXMuc2lnSWR4cy5wdXNoKHNpZ2lkeCk7XG4gICAgdGhpcy5zaWdDb3VudC53cml0ZVVJbnQzMkJFKHRoaXMuc2lnSWR4cy5sZW5ndGgsIDApO1xuICB9O1xuXG4gIGZyb21CdWZmZXIoYnl0ZXM6QnVmZmVyLCBvZmZzZXQ6bnVtYmVyID0gMCk6bnVtYmVyIHtcbiAgICB0aGlzLnNpZ0NvdW50ID0gYmludG9vbHMuY29weUZyb20oYnl0ZXMsIG9mZnNldCwgb2Zmc2V0ICsgNCk7XG4gICAgb2Zmc2V0ICs9IDQ7XG4gICAgY29uc3Qgc2lnQ291bnQ6bnVtYmVyID0gdGhpcy5zaWdDb3VudC5yZWFkVUludDMyQkUoMCk7XG4gICAgdGhpcy5zaWdJZHhzID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaWdDb3VudDsgaSsrKSB7XG4gICAgICBjb25zdCBzaWdpZHggPSBuZXcgU2lnSWR4KCk7XG4gICAgICBjb25zdCBzaWdidWZmOkJ1ZmZlciA9IGJpbnRvb2xzLmNvcHlGcm9tKGJ5dGVzLCBvZmZzZXQsIG9mZnNldCArIDQpO1xuICAgICAgc2lnaWR4LmZyb21CdWZmZXIoc2lnYnVmZik7XG4gICAgICBvZmZzZXQgKz0gNDtcbiAgICAgIHRoaXMuc2lnSWR4cy5wdXNoKHNpZ2lkeCk7XG4gICAgfVxuICAgIHJldHVybiBvZmZzZXQ7XG4gIH1cblxuICB0b0J1ZmZlcigpOkJ1ZmZlciB7XG4gICAgdGhpcy5zaWdDb3VudC53cml0ZVVJbnQzMkJFKHRoaXMuc2lnSWR4cy5sZW5ndGgsIDApO1xuICAgIGxldCBic2l6ZTpudW1iZXIgPSB0aGlzLnNpZ0NvdW50Lmxlbmd0aDtcbiAgICBjb25zdCBiYXJyOkFycmF5PEJ1ZmZlcj4gPSBbdGhpcy5zaWdDb3VudF07XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnNpZ0lkeHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGI6QnVmZmVyID0gdGhpcy5zaWdJZHhzW2ldLnRvQnVmZmVyKCk7XG4gICAgICBiYXJyLnB1c2goYik7XG4gICAgICBic2l6ZSArPSBiLmxlbmd0aDtcbiAgICB9XG4gICAgcmV0dXJuIEJ1ZmZlci5jb25jYXQoYmFyciwgYnNpemUpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBiYXNlLTU4IHJlcHJlc2VudGF0aW9uIG9mIHRoZSBbW0lucHV0XV0uXG4gICAqL1xuICB0b1N0cmluZygpOnN0cmluZyB7XG4gICAgcmV0dXJuIGJpbnRvb2xzLmJ1ZmZlclRvQjU4KHRoaXMudG9CdWZmZXIoKSk7XG4gIH1cblxuICBhYnN0cmFjdCBjbG9uZSgpOnRoaXM7XG5cbiAgYWJzdHJhY3QgY3JlYXRlKC4uLmFyZ3M6YW55W10pOnRoaXM7XG5cbiAgYWJzdHJhY3Qgc2VsZWN0KGlkOm51bWJlciwgLi4uYXJnczphbnlbXSk6SW5wdXQ7XG4gIFxufVxuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgU3RhbmRhcmRQYXJzZWFibGVJbnB1dCBleHRlbmRzIFNlcmlhbGl6YWJsZSB7XG4gIHByb3RlY3RlZCBfdHlwZU5hbWUgPSBcIlN0YW5kYXJkUGFyc2VhYmxlSW5wdXRcIjtcbiAgcHJvdGVjdGVkIF90eXBlSUQgPSB1bmRlZmluZWQ7XG5cbiAgc2VyaWFsaXplKGVuY29kaW5nOlNlcmlhbGl6ZWRFbmNvZGluZyA9IFwiaGV4XCIpOm9iamVjdCB7XG4gICAgbGV0IGZpZWxkczpvYmplY3QgPSBzdXBlci5zZXJpYWxpemUoZW5jb2RpbmcpO1xuICAgIHJldHVybiB7XG4gICAgICAuLi5maWVsZHMsXG4gICAgICBcImlucHV0XCI6IHRoaXMuaW5wdXQuc2VyaWFsaXplKGVuY29kaW5nKVxuICAgIH1cbiAgfTtcblxuICBwcm90ZWN0ZWQgaW5wdXQ6SW5wdXQ7XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBmdW5jdGlvbiB1c2VkIHRvIHNvcnQgYW4gYXJyYXkgb2YgW1tTdGFuZGFyZFBhcnNlYWJsZUlucHV0XV1zXG4gICAqL1xuICBzdGF0aWMgY29tcGFyYXRvciA9ICgpOihhOlN0YW5kYXJkUGFyc2VhYmxlSW5wdXQsIGI6U3RhbmRhcmRQYXJzZWFibGVJbnB1dCkgPT4gKDF8LTF8MCkgPT4gKGE6U3RhbmRhcmRQYXJzZWFibGVJbnB1dCwgYjpTdGFuZGFyZFBhcnNlYWJsZUlucHV0KTooMXwtMXwwKSA9PiB7XG4gICAgY29uc3Qgc29ydGEgPSBhLnRvQnVmZmVyKCk7XG4gICAgY29uc3Qgc29ydGIgPSBiLnRvQnVmZmVyKCk7XG4gICAgcmV0dXJuIEJ1ZmZlci5jb21wYXJlKHNvcnRhLCBzb3J0YikgYXMgKDF8LTF8MCk7XG4gIH07XG5cbiAgZ2V0SW5wdXQgPSAoKTpJbnB1dCA9PiB0aGlzLmlucHV0O1xuXG4gIC8vIG11c3QgYmUgaW1wbGVtZW50ZWQgdG8gc2VsZWN0IGlucHV0IHR5cGVzIGZvciB0aGUgVk0gaW4gcXVlc3Rpb25cbiAgYWJzdHJhY3QgZnJvbUJ1ZmZlcihieXRlczpCdWZmZXIsIG9mZnNldD86bnVtYmVyKTpudW1iZXI7IFxuXG4gIHRvQnVmZmVyKCk6QnVmZmVyIHtcbiAgICBjb25zdCBpbmJ1ZmY6QnVmZmVyID0gdGhpcy5pbnB1dC50b0J1ZmZlcigpO1xuICAgIGNvbnN0IGluaWQ6QnVmZmVyID0gQnVmZmVyLmFsbG9jKDQpO1xuICAgIGluaWQud3JpdGVVSW50MzJCRSh0aGlzLmlucHV0LmdldElucHV0SUQoKSwgMCk7XG4gICAgY29uc3QgYmFycjpBcnJheTxCdWZmZXI+ID0gW2luaWQsIGluYnVmZl07XG4gICAgcmV0dXJuIEJ1ZmZlci5jb25jYXQoYmFyciwgaW5pZC5sZW5ndGggKyBpbmJ1ZmYubGVuZ3RoKTtcbiAgfVxuICBcbiAgLyoqXG4gICAqIENsYXNzIHJlcHJlc2VudGluZyBhbiBbW1N0YW5kYXJkUGFyc2VhYmxlSW5wdXRdXSBmb3IgYSB0cmFuc2FjdGlvbi5cbiAgICogXG4gICAqIEBwYXJhbSBpbnB1dCBBIG51bWJlciByZXByZXNlbnRpbmcgdGhlIElucHV0SUQgb2YgdGhlIFtbU3RhbmRhcmRQYXJzZWFibGVJbnB1dF1dXG4gICAqL1xuICBjb25zdHJ1Y3RvcihpbnB1dDpJbnB1dCA9IHVuZGVmaW5lZCkge1xuICAgIHN1cGVyKCk7XG4gICAgaWYgKGlucHV0IGluc3RhbmNlb2YgSW5wdXQpIHtcbiAgICAgIHRoaXMuaW5wdXQgPSBpbnB1dDtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFN0YW5kYXJkVHJhbnNmZXJhYmxlSW5wdXQgZXh0ZW5kcyBTdGFuZGFyZFBhcnNlYWJsZUlucHV0e1xuICBwcm90ZWN0ZWQgX3R5cGVOYW1lID0gXCJTdGFuZGFyZFRyYW5zZmVyYWJsZUlucHV0XCI7XG4gIHByb3RlY3RlZCBfdHlwZUlEID0gdW5kZWZpbmVkO1xuXG4gIHNlcmlhbGl6ZShlbmNvZGluZzpTZXJpYWxpemVkRW5jb2RpbmcgPSBcImhleFwiKTpvYmplY3Qge1xuICAgIGxldCBmaWVsZHM6b2JqZWN0ID0gc3VwZXIuc2VyaWFsaXplKGVuY29kaW5nKTtcbiAgICByZXR1cm4ge1xuICAgICAgLi4uZmllbGRzLFxuICAgICAgXCJ0eGlkXCI6IHNlcmlhbGl6ZXIuZW5jb2Rlcih0aGlzLnR4aWQsIGVuY29kaW5nLCBcIkJ1ZmZlclwiLCBcImNiNThcIiksXG4gICAgICBcIm91dHB1dGlkeFwiOiBzZXJpYWxpemVyLmVuY29kZXIodGhpcy5vdXRwdXRpZHgsIGVuY29kaW5nLCBcIkJ1ZmZlclwiLCBcImRlY2ltYWxTdHJpbmdcIiksXG4gICAgICBcImFzc2V0aWRcIjogc2VyaWFsaXplci5lbmNvZGVyKHRoaXMuYXNzZXRpZCwgZW5jb2RpbmcsIFwiQnVmZmVyXCIsIFwiY2I1OFwiKSxcbiAgICB9XG4gIH07XG4gIGRlc2VyaWFsaXplKGZpZWxkczpvYmplY3QsIGVuY29kaW5nOlNlcmlhbGl6ZWRFbmNvZGluZyA9IFwiaGV4XCIpIHtcbiAgICBzdXBlci5kZXNlcmlhbGl6ZShmaWVsZHMsIGVuY29kaW5nKTtcbiAgICB0aGlzLnR4aWQgPSBzZXJpYWxpemVyLmRlY29kZXIoZmllbGRzW1widHhpZFwiXSwgZW5jb2RpbmcsIFwiY2I1OFwiLCBcIkJ1ZmZlclwiLCAzMik7XG4gICAgdGhpcy5vdXRwdXRpZHggPSBzZXJpYWxpemVyLmRlY29kZXIoZmllbGRzW1wib3V0cHV0aWR4XCJdLCBlbmNvZGluZywgXCJkZWNpbWFsU3RyaW5nXCIsIFwiQnVmZmVyXCIsIDQpO1xuICAgIHRoaXMuYXNzZXRpZCA9IHNlcmlhbGl6ZXIuZGVjb2RlcihmaWVsZHNbXCJhc3NldGlkXCJdLCBlbmNvZGluZywgXCJjYjU4XCIsIFwiQnVmZmVyXCIsIDMyKTtcbiAgICAvL2lucHV0IGRlc2VyaWFsaXphdGlvbiBtdXN0IGJlIGltcGxtZW50ZWQgaW4gY2hpbGQgY2xhc3Nlc1xuICB9XG5cbiAgcHJvdGVjdGVkIHR4aWQ6QnVmZmVyID0gQnVmZmVyLmFsbG9jKDMyKTtcbiAgcHJvdGVjdGVkIG91dHB1dGlkeDpCdWZmZXIgPSBCdWZmZXIuYWxsb2MoNCk7XG4gIHByb3RlY3RlZCBhc3NldGlkOkJ1ZmZlciA9IEJ1ZmZlci5hbGxvYygzMik7XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXJ8QnVmZmVyfSBvZiB0aGUgVHhJRC5cbiAgICovXG4gIGdldFR4SUQgPSAoKVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICA6QnVmZmVyID0+IHRoaXMudHhpZDtcblxuICAvKipcbiAgICogUmV0dXJucyBhIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlcnxCdWZmZXJ9ICBvZiB0aGUgT3V0cHV0SWR4LlxuICAgKi9cbiAgZ2V0T3V0cHV0SWR4ID0gKClcbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgOkJ1ZmZlciA9PiB0aGlzLm91dHB1dGlkeDtcblxuICAvKipcbiAgICogUmV0dXJucyBhIGJhc2UtNTggc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBVVFhPSUQgdGhpcyBbW1N0YW5kYXJkVHJhbnNmZXJhYmxlSW5wdXRdXSByZWZlcmVuY2VzLlxuICAgKi9cbiAgZ2V0VVRYT0lEID0gKCk6c3RyaW5nID0+IGJpbnRvb2xzLmJ1ZmZlclRvQjU4KEJ1ZmZlci5jb25jYXQoW3RoaXMudHhpZCwgdGhpcy5vdXRwdXRpZHhdKSk7XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGlucHV0LlxuICAgKi9cbiAgZ2V0SW5wdXQgPSAoKTpJbnB1dCA9PiB0aGlzLmlucHV0O1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBhc3NldElEIG9mIHRoZSBpbnB1dC5cbiAgICovXG4gIGdldEFzc2V0SUQgPSAoKTpCdWZmZXIgPT4gdGhpcy5hc3NldGlkO1xuXG4gIGFic3RyYWN0IGZyb21CdWZmZXIoYnl0ZXM6QnVmZmVyLCBvZmZzZXQ/Om51bWJlcik6bnVtYmVyOyBcblxuICAvKipcbiAgICogUmV0dXJucyBhIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlcnxCdWZmZXJ9IHJlcHJlc2VudGF0aW9uIG9mIHRoZSBbW1N0YW5kYXJkVHJhbnNmZXJhYmxlSW5wdXRdXS5cbiAgICovXG4gIHRvQnVmZmVyKCk6QnVmZmVyIHtcbiAgICBjb25zdCBwYXJzZWFibGVCdWZmOkJ1ZmZlciA9IHN1cGVyLnRvQnVmZmVyKCk7XG4gICAgY29uc3QgYnNpemU6bnVtYmVyID0gdGhpcy50eGlkLmxlbmd0aCArIHRoaXMub3V0cHV0aWR4Lmxlbmd0aCArIHRoaXMuYXNzZXRpZC5sZW5ndGggKyBwYXJzZWFibGVCdWZmLmxlbmd0aDtcbiAgICBjb25zdCBiYXJyOkFycmF5PEJ1ZmZlcj4gPSBbdGhpcy50eGlkLCB0aGlzLm91dHB1dGlkeCwgdGhpcy5hc3NldGlkLCBwYXJzZWFibGVCdWZmXTtcbiAgICBjb25zdCBidWZmOiBCdWZmZXIgPSBCdWZmZXIuY29uY2F0KGJhcnIsIGJzaXplKTtcbiAgICByZXR1cm4gYnVmZjtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgYmFzZS01OCByZXByZXNlbnRhdGlvbiBvZiB0aGUgW1tTdGFuZGFyZFRyYW5zZmVyYWJsZUlucHV0XV0uXG4gICAqL1xuICB0b1N0cmluZygpOnN0cmluZyB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICByZXR1cm4gYmludG9vbHMuYnVmZmVyVG9CNTgodGhpcy50b0J1ZmZlcigpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDbGFzcyByZXByZXNlbnRpbmcgYW4gW1tTdGFuZGFyZFRyYW5zZmVyYWJsZUlucHV0XV0gZm9yIGEgdHJhbnNhY3Rpb24uXG4gICAqXG4gICAqIEBwYXJhbSB0eGlkIEEge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyfEJ1ZmZlcn0gY29udGFpbmluZyB0aGUgdHJhbnNhY3Rpb24gSUQgb2YgdGhlIHJlZmVyZW5jZWQgVVRYT1xuICAgKiBAcGFyYW0gb3V0cHV0aWR4IEEge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyfEJ1ZmZlcn0gY29udGFpbmluZyB0aGUgaW5kZXggb2YgdGhlIG91dHB1dCBpbiB0aGUgdHJhbnNhY3Rpb24gY29uc3VtZWQgaW4gdGhlIFtbU3RhbmRhcmRUcmFuc2ZlcmFibGVJbnB1dF1dXG4gICAqIEBwYXJhbSBhc3NldElEIEEge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyfEJ1ZmZlcn0gcmVwcmVzZW50aW5nIHRoZSBhc3NldElEIG9mIHRoZSBbW0lucHV0XV1cbiAgICogQHBhcmFtIGlucHV0IEFuIFtbSW5wdXRdXSB0byBiZSBtYWRlIHRyYW5zZmVyYWJsZVxuICAgKi9cbiAgY29uc3RydWN0b3IodHhpZDpCdWZmZXIgPSB1bmRlZmluZWQsIG91dHB1dGlkeDpCdWZmZXIgPSB1bmRlZmluZWQsIGFzc2V0SUQ6QnVmZmVyID0gdW5kZWZpbmVkLCBpbnB1dDpJbnB1dCA9IHVuZGVmaW5lZCkge1xuICAgIHN1cGVyKCk7XG4gICAgaWYgKHR5cGVvZiB0eGlkICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygb3V0cHV0aWR4ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgYXNzZXRJRCAhPT0gJ3VuZGVmaW5lZCcgJiYgaW5wdXQgaW5zdGFuY2VvZiBJbnB1dCkge1xuICAgICAgdGhpcy5pbnB1dCA9IGlucHV0O1xuICAgICAgdGhpcy50eGlkID0gdHhpZDtcbiAgICAgIHRoaXMub3V0cHV0aWR4ID0gb3V0cHV0aWR4O1xuICAgICAgdGhpcy5hc3NldGlkID0gYXNzZXRJRDtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBBbiBbW0lucHV0XV0gY2xhc3Mgd2hpY2ggc3BlY2lmaWVzIGEgdG9rZW4gYW1vdW50IC5cbiAqL1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFN0YW5kYXJkQW1vdW50SW5wdXQgZXh0ZW5kcyBJbnB1dCB7XG4gIHByb3RlY3RlZCBfdHlwZU5hbWUgPSBcIlN0YW5kYXJkQW1vdW50SW5wdXRcIjtcbiAgcHJvdGVjdGVkIF90eXBlSUQgPSB1bmRlZmluZWQ7XG5cbiAgc2VyaWFsaXplKGVuY29kaW5nOlNlcmlhbGl6ZWRFbmNvZGluZyA9IFwiaGV4XCIpOm9iamVjdCB7XG4gICAgbGV0IGZpZWxkczpvYmplY3QgPSBzdXBlci5zZXJpYWxpemUoZW5jb2RpbmcpO1xuICAgIHJldHVybiB7XG4gICAgICAuLi5maWVsZHMsXG4gICAgICBcImFtb3VudFwiOiBzZXJpYWxpemVyLmVuY29kZXIodGhpcy5hbW91bnQsIGVuY29kaW5nLCBcIkJ1ZmZlclwiLCBcImRlY2ltYWxTdHJpbmdcIiwgOClcbiAgICB9XG4gIH07XG4gIGRlc2VyaWFsaXplKGZpZWxkczpvYmplY3QsIGVuY29kaW5nOlNlcmlhbGl6ZWRFbmNvZGluZyA9IFwiaGV4XCIpIHtcbiAgICBzdXBlci5kZXNlcmlhbGl6ZShmaWVsZHMsIGVuY29kaW5nKTtcbiAgICB0aGlzLmFtb3VudCA9IHNlcmlhbGl6ZXIuZGVjb2RlcihmaWVsZHNbXCJhbW91bnRcIl0sIGVuY29kaW5nLCBcImRlY2ltYWxTdHJpbmdcIiwgXCJCdWZmZXJcIiwgOCk7XG4gICAgdGhpcy5hbW91bnRWYWx1ZSA9IGJpbnRvb2xzLmZyb21CdWZmZXJUb0JOKHRoaXMuYW1vdW50KTtcbiAgfVxuXG4gIHByb3RlY3RlZCBhbW91bnQ6QnVmZmVyID0gQnVmZmVyLmFsbG9jKDgpO1xuICBwcm90ZWN0ZWQgYW1vdW50VmFsdWU6Qk4gPSBuZXcgQk4oMCk7XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGFtb3VudCBhcyBhIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vaW5kdXRueS9ibi5qcy98Qk59LlxuICAgKi9cbiAgZ2V0QW1vdW50ID0gKCk6Qk4gPT4gdGhpcy5hbW91bnRWYWx1ZS5jbG9uZSgpO1xuXG4gIC8qKlxuICAgKiBQb3B1YXRlcyB0aGUgaW5zdGFuY2UgZnJvbSBhIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlcnxCdWZmZXJ9IHJlcHJlc2VudGluZyB0aGUgW1tBbW91bnRJbnB1dF1dIGFuZCByZXR1cm5zIHRoZSBzaXplIG9mIHRoZSBpbnB1dC5cbiAgICovXG4gIGZyb21CdWZmZXIoYnl0ZXM6QnVmZmVyLCBvZmZzZXQ6bnVtYmVyID0gMCk6bnVtYmVyIHtcbiAgICB0aGlzLmFtb3VudCA9IGJpbnRvb2xzLmNvcHlGcm9tKGJ5dGVzLCBvZmZzZXQsIG9mZnNldCArIDgpO1xuICAgIHRoaXMuYW1vdW50VmFsdWUgPSBiaW50b29scy5mcm9tQnVmZmVyVG9CTih0aGlzLmFtb3VudCk7XG4gICAgb2Zmc2V0ICs9IDg7XG4gICAgcmV0dXJuIHN1cGVyLmZyb21CdWZmZXIoYnl0ZXMsIG9mZnNldCk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgYnVmZmVyIHJlcHJlc2VudGluZyB0aGUgW1tBbW91bnRJbnB1dF1dIGluc3RhbmNlLlxuICAgKi9cbiAgdG9CdWZmZXIoKTpCdWZmZXIge1xuICAgIGNvbnN0IHN1cGVyYnVmZjpCdWZmZXIgPSBzdXBlci50b0J1ZmZlcigpO1xuICAgIGNvbnN0IGJzaXplOm51bWJlciA9IHRoaXMuYW1vdW50Lmxlbmd0aCArIHN1cGVyYnVmZi5sZW5ndGg7XG4gICAgY29uc3QgYmFycjpBcnJheTxCdWZmZXI+ID0gW3RoaXMuYW1vdW50LCBzdXBlcmJ1ZmZdO1xuICAgIHJldHVybiBCdWZmZXIuY29uY2F0KGJhcnIsIGJzaXplKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBbiBbW0Ftb3VudElucHV0XV0gY2xhc3Mgd2hpY2ggaXNzdWVzIGEgcGF5bWVudCBvbiBhbiBhc3NldElELlxuICAgKlxuICAgKiBAcGFyYW0gYW1vdW50IEEge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9pbmR1dG55L2JuLmpzL3xCTn0gcmVwcmVzZW50aW5nIHRoZSBhbW91bnQgaW4gdGhlIGlucHV0XG4gICAqL1xuICBjb25zdHJ1Y3RvcihhbW91bnQ6Qk4gPSB1bmRlZmluZWQpIHtcbiAgICBzdXBlcigpO1xuICAgIGlmIChhbW91bnQpIHtcbiAgICAgIHRoaXMuYW1vdW50VmFsdWUgPSBhbW91bnQuY2xvbmUoKTtcbiAgICAgIHRoaXMuYW1vdW50ID0gYmludG9vbHMuZnJvbUJOVG9CdWZmZXIoYW1vdW50LCA4KTtcbiAgICB9XG4gIH1cbn0iXX0=","\"use strict\";\n/**\n * @packageDocumentation\n * @module Common-AssetAmount\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.StandardAssetAmountDestination = exports.AssetAmount = void 0;\nconst buffer_1 = require(\"buffer/\");\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\n/**\n * Class for managing asset amounts in the UTXOSet fee calcuation\n */\nclass AssetAmount {\n    constructor(assetID, amount, burn) {\n        // assetID that is amount is managing.\n        this.assetID = buffer_1.Buffer.alloc(32);\n        // amount of this asset that should be sent.\n        this.amount = new bn_js_1.default(0);\n        // burn is the amount of this asset that should be burned.\n        this.burn = new bn_js_1.default(0);\n        // spent is the total amount of this asset that has been consumed.\n        this.spent = new bn_js_1.default(0);\n        // stakeableLockSpent is the amount of this asset that has been consumed that\n        // was locked.\n        this.stakeableLockSpent = new bn_js_1.default(0);\n        // change is the excess amount of this asset that was consumed over the amount\n        // requested to be consumed(amount + burn).\n        this.change = new bn_js_1.default(0);\n        // stakeableLockChange is a flag to mark if the input that generated the\n        // change was locked.\n        this.stakeableLockChange = false;\n        // finished is a convenience flag to track \"spent >= amount + burn\"\n        this.finished = false;\n        this.getAssetID = () => {\n            return this.assetID;\n        };\n        this.getAssetIDString = () => {\n            return this.assetID.toString(\"hex\");\n        };\n        this.getAmount = () => {\n            return this.amount;\n        };\n        this.getSpent = () => {\n            return this.spent;\n        };\n        this.getBurn = () => {\n            return this.burn;\n        };\n        this.getChange = () => {\n            return this.change;\n        };\n        this.getStakeableLockSpent = () => {\n            return this.stakeableLockSpent;\n        };\n        this.getStakeableLockChange = () => {\n            return this.stakeableLockChange;\n        };\n        this.isFinished = () => {\n            return this.finished;\n        };\n        // spendAmount should only be called if this asset is still awaiting more\n        // funds to consume.\n        this.spendAmount = (amt, stakeableLocked = false) => {\n            if (this.finished) {\n                /* istanbul ignore next */\n                throw new Error('Error - AssetAmount.spendAmount: attempted to spend '\n                    + 'excess funds');\n            }\n            this.spent = this.spent.add(amt);\n            if (stakeableLocked) {\n                this.stakeableLockSpent = this.stakeableLockSpent.add(amt);\n            }\n            const total = this.amount.add(this.burn);\n            if (this.spent.gte(total)) {\n                this.change = this.spent.sub(total);\n                if (stakeableLocked) {\n                    this.stakeableLockChange = true;\n                }\n                this.finished = true;\n            }\n            return this.finished;\n        };\n        this.assetID = assetID;\n        this.amount = typeof amount === \"undefined\" ? new bn_js_1.default(0) : amount;\n        this.burn = typeof burn === \"undefined\" ? new bn_js_1.default(0) : burn;\n        this.spent = new bn_js_1.default(0);\n        this.stakeableLockSpent = new bn_js_1.default(0);\n        this.stakeableLockChange = false;\n    }\n}\nexports.AssetAmount = AssetAmount;\nclass StandardAssetAmountDestination {\n    constructor(destinations, senders, changeAddresses) {\n        this.amounts = [];\n        this.destinations = [];\n        this.senders = [];\n        this.changeAddresses = [];\n        this.amountkey = {};\n        this.inputs = [];\n        this.outputs = [];\n        this.change = [];\n        // TODO: should this function allow for repeated calls with the same\n        //       assetID?\n        this.addAssetAmount = (assetID, amount, burn) => {\n            let aa = new AssetAmount(assetID, amount, burn);\n            this.amounts.push(aa);\n            this.amountkey[aa.getAssetIDString()] = aa;\n        };\n        this.addInput = (input) => {\n            this.inputs.push(input);\n        };\n        this.addOutput = (output) => {\n            this.outputs.push(output);\n        };\n        this.addChange = (output) => {\n            this.change.push(output);\n        };\n        this.getAmounts = () => {\n            return this.amounts;\n        };\n        this.getDestinations = () => {\n            return this.destinations;\n        };\n        this.getSenders = () => {\n            return this.senders;\n        };\n        this.getChangeAddresses = () => {\n            return this.changeAddresses;\n        };\n        this.getAssetAmount = (assetHexStr) => {\n            return this.amountkey[assetHexStr];\n        };\n        this.assetExists = (assetHexStr) => {\n            return (assetHexStr in this.amountkey);\n        };\n        this.getInputs = () => {\n            return this.inputs;\n        };\n        this.getOutputs = () => {\n            return this.outputs;\n        };\n        this.getChangeOutputs = () => {\n            return this.change;\n        };\n        this.getAllOutputs = () => {\n            return this.outputs.concat(this.change);\n        };\n        this.canComplete = () => {\n            for (let i = 0; i < this.amounts.length; i++) {\n                if (!this.amounts[i].isFinished()) {\n                    return false;\n                }\n            }\n            return true;\n        };\n        this.destinations = destinations;\n        this.changeAddresses = changeAddresses;\n        this.senders = senders;\n    }\n}\nexports.StandardAssetAmountDestination = StandardAssetAmountDestination;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.KeyChain = exports.KeyPair = void 0;\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst secp256k1_1 = require(\"../../common/secp256k1\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\n/**\n * Class for representing a private and public keypair on the Platform Chain.\n */\nclass KeyPair extends secp256k1_1.SECP256k1KeyPair {\n    constructor(hrp, chainid) {\n        super();\n        this.chainid = '';\n        this.hrp = '';\n        /**\n         * Returns the address's string representation.\n         *\n         * @returns A string representation of the address\n         */\n        this.getAddressString = () => {\n            const addr = this.addressFromPublicKey(this.pubk);\n            return bintools.addressToString(this.hrp, this.chainid, addr);\n        };\n        /**\n           * Returns the chainID associated with this key.\n           *\n           * @returns The [[KeyPair]]'s chainID\n           */\n        this.getChainID = () => this.chainid;\n        /**\n         * Sets the the chainID associated with this key.\n         *\n         * @param chainid String for the chainID\n         */\n        this.setChainID = (chainid) => {\n            this.chainid = chainid;\n        };\n        /**\n         * Returns the Human-Readable-Part of the network associated with this key.\n         *\n         * @returns The [[KeyPair]]'s Human-Readable-Part of the network's Bech32 addressing scheme\n         */\n        this.getHRP = () => this.hrp;\n        /**\n         * Sets the the Human-Readable-Part of the network associated with this key.\n         *\n         * @param hrp String for the Human-Readable-Part of Bech32 addresses\n         */\n        this.setHRP = (hrp) => {\n            this.hrp = hrp;\n        };\n        this.chainid = chainid;\n        this.hrp = hrp;\n        this.generateKey();\n    }\n    clone() {\n        let newkp = new KeyPair(this.hrp, this.chainid);\n        newkp.importKey(bintools.copyFrom(this.getPrivateKey()));\n        return newkp;\n    }\n    create(...args) {\n        if (args.length == 2) {\n            return new KeyPair(args[0], args[1]);\n        }\n        return new KeyPair(this.hrp, this.chainid);\n    }\n}\nexports.KeyPair = KeyPair;\n/**\n * Class for representing a key chain in Avalanche.\n *\n * @typeparam KeyPair Class extending [[KeyPair]] which is used as the key in [[KeyChain]]\n */\nclass KeyChain extends secp256k1_1.SECP256k1KeyChain {\n    /**\n     * Returns instance of KeyChain.\n     */\n    constructor(hrp, chainid) {\n        super();\n        this.hrp = '';\n        this.chainid = '';\n        /**\n         * Makes a new key pair, returns the address.\n         *\n         * @returns The new key pair\n         */\n        this.makeKey = () => {\n            let keypair = new KeyPair(this.hrp, this.chainid);\n            this.addKey(keypair);\n            return keypair;\n        };\n        this.addKey = (newKey) => {\n            newKey.setChainID(this.chainid);\n            super.addKey(newKey);\n        };\n        /**\n         * Given a private key, makes a new key pair, returns the address.\n         *\n         * @param privk A {@link https://github.com/feross/buffer|Buffer} or cb58 serialized string representing the private key\n         *\n         * @returns The new key pair\n         */\n        this.importKey = (privk) => {\n            let keypair = new KeyPair(this.hrp, this.chainid);\n            let pk;\n            if (typeof privk === 'string') {\n                pk = bintools.cb58Decode(privk.split('-')[1]);\n            }\n            else {\n                pk = bintools.copyFrom(privk);\n            }\n            keypair.importKey(pk);\n            if (!(keypair.getAddress().toString(\"hex\") in this.keys)) {\n                this.addKey(keypair);\n            }\n            return keypair;\n        };\n        this.hrp = hrp;\n        this.chainid = chainid;\n    }\n    create(...args) {\n        if (args.length == 2) {\n            return new KeyChain(args[0], args[1]);\n        }\n        return new KeyChain(this.hrp, this.chainid);\n    }\n    ;\n    clone() {\n        const newkc = new KeyChain(this.hrp, this.chainid);\n        for (let k in this.keys) {\n            newkc.addKey(this.keys[k].clone());\n        }\n        return newkc;\n    }\n    ;\n    union(kc) {\n        let newkc = kc.clone();\n        for (let k in this.keys) {\n            newkc.addKey(this.keys[k].clone());\n        }\n        return newkc;\n    }\n}\nexports.KeyChain = KeyChain;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.StakeableLockIn = exports.SECPTransferInput = exports.AmountInput = exports.TransferableInput = exports.ParseableInput = exports.SelectInputClass = void 0;\n/**\n * @packageDocumentation\n * @module API-PlatformVM-Inputs\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst input_1 = require(\"../../common/input\");\nconst serialization_1 = require(\"../../utils/serialization\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serializer = serialization_1.Serialization.getInstance();\n/**\n * Takes a buffer representing the output and returns the proper [[Input]] instance.\n *\n * @param inputid A number representing the inputID parsed prior to the bytes passed in\n *\n * @returns An instance of an [[Input]]-extended class.\n */\nexports.SelectInputClass = (inputid, ...args) => {\n    if (inputid === constants_1.PlatformVMConstants.SECPINPUTID) {\n        return new SECPTransferInput(...args);\n    }\n    else if (inputid === constants_1.PlatformVMConstants.STAKEABLELOCKINID) {\n        return new StakeableLockIn(...args);\n    }\n    /* istanbul ignore next */\n    throw new Error(`Error - SelectInputClass: unknown inputid ${inputid}`);\n};\nclass ParseableInput extends input_1.StandardParseableInput {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"ParseableInput\";\n        this._typeID = undefined;\n    }\n    //serialize is inherited\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.input = exports.SelectInputClass(fields[\"input\"][\"_typeID\"]);\n        this.input.deserialize(fields[\"input\"], encoding);\n    }\n    fromBuffer(bytes, offset = 0) {\n        const inputid = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);\n        offset += 4;\n        this.input = exports.SelectInputClass(inputid);\n        return this.input.fromBuffer(bytes, offset);\n    }\n}\nexports.ParseableInput = ParseableInput;\nclass TransferableInput extends input_1.StandardTransferableInput {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"TransferableInput\";\n        this._typeID = undefined;\n    }\n    //serialize is inherited\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.input = exports.SelectInputClass(fields[\"input\"][\"_typeID\"]);\n        this.input.deserialize(fields[\"input\"], encoding);\n    }\n    /**\n     * Takes a {@link https://github.com/feross/buffer|Buffer} containing a [[TransferableInput]], parses it, populates the class, and returns the length of the [[TransferableInput]] in bytes.\n     *\n     * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[TransferableInput]]\n     *\n     * @returns The length of the raw [[TransferableInput]]\n     */\n    fromBuffer(bytes, offset = 0) {\n        this.txid = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        this.outputidx = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        this.assetid = bintools.copyFrom(bytes, offset, offset + constants_1.PlatformVMConstants.ASSETIDLEN);\n        offset += 32;\n        const inputid = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);\n        offset += 4;\n        this.input = exports.SelectInputClass(inputid);\n        return this.input.fromBuffer(bytes, offset);\n    }\n}\nexports.TransferableInput = TransferableInput;\nclass AmountInput extends input_1.StandardAmountInput {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"AmountInput\";\n        this._typeID = undefined;\n    }\n    //serialize and deserialize both are inherited\n    select(id, ...args) {\n        return exports.SelectInputClass(id, ...args);\n    }\n}\nexports.AmountInput = AmountInput;\nclass SECPTransferInput extends AmountInput {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"SECPTransferInput\";\n        this._typeID = constants_1.PlatformVMConstants.SECPINPUTID;\n        this.getCredentialID = () => constants_1.PlatformVMConstants.SECPCREDENTIAL;\n    }\n    //serialize and deserialize both are inherited\n    /**\n     * Returns the inputID for this input\n     */\n    getInputID() {\n        return this._typeID;\n    }\n    create(...args) {\n        return new SECPTransferInput(...args);\n    }\n    clone() {\n        const newout = this.create();\n        newout.fromBuffer(this.toBuffer());\n        return newout;\n    }\n}\nexports.SECPTransferInput = SECPTransferInput;\n/**\n * An [[Input]] class which specifies an input that has a locktime which can also enable staking of the value held, preventing transfers but not validation.\n */\nclass StakeableLockIn extends AmountInput {\n    /**\n     * A [[Output]] class which specifies an [[Input]] that has a locktime which can also enable staking of the value held, preventing transfers but not validation.\n     *\n     * @param amount A {@link https://github.com/indutny/bn.js/|BN} representing the amount in the input\n     * @param stakeableLocktime A {@link https://github.com/indutny/bn.js/|BN} representing the stakeable locktime\n     * @param transferableInput A [[ParseableInput]] which is embedded into this input.\n     */\n    constructor(amount = undefined, stakeableLocktime = undefined, transferableInput = undefined) {\n        super(amount);\n        this._typeName = \"StakeableLockIn\";\n        this._typeID = constants_1.PlatformVMConstants.STAKEABLELOCKINID;\n        this.getCredentialID = () => constants_1.PlatformVMConstants.SECPCREDENTIAL;\n        if (typeof stakeableLocktime !== \"undefined\") {\n            this.stakeableLocktime = bintools.fromBNToBuffer(stakeableLocktime, 8);\n        }\n        if (typeof transferableInput !== \"undefined\") {\n            this.transferableInput = transferableInput;\n            this.synchronize();\n        }\n    }\n    //serialize and deserialize both are inherited\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        let outobj = Object.assign(Object.assign({}, fields), { \"stakeableLocktime\": serializer.encoder(this.stakeableLocktime, encoding, \"Buffer\", \"decimalString\", 8), \"transferableInput\": this.transferableInput.serialize(encoding) });\n        delete outobj[\"sigIdxs\"];\n        delete outobj[\"sigCount\"];\n        delete outobj[\"amount\"];\n        return outobj;\n    }\n    ;\n    deserialize(fields, encoding = \"hex\") {\n        fields[\"sigIdxs\"] = [];\n        fields[\"sigCount\"] = \"0\";\n        fields[\"amount\"] = \"98\";\n        super.deserialize(fields, encoding);\n        this.stakeableLocktime = serializer.decoder(fields[\"stakeableLocktime\"], encoding, \"decimalString\", \"Buffer\", 8);\n        this.transferableInput = new ParseableInput();\n        this.transferableInput.deserialize(fields[\"transferableInput\"], encoding);\n        this.synchronize();\n    }\n    synchronize() {\n        let input = this.transferableInput.getInput();\n        this.sigIdxs = input.getSigIdxs();\n        this.sigCount = buffer_1.Buffer.alloc(4);\n        this.sigCount.writeUInt32BE(this.sigIdxs.length, 0);\n        this.amount = bintools.fromBNToBuffer(input.getAmount(), 8);\n        this.amountValue = input.getAmount();\n    }\n    getStakeableLocktime() {\n        return bintools.fromBufferToBN(this.stakeableLocktime);\n    }\n    getTransferablInput() {\n        return this.transferableInput;\n    }\n    /**\n     * Returns the inputID for this input\n     */\n    getInputID() {\n        return this._typeID;\n    }\n    /**\n     * Popuates the instance from a {@link https://github.com/feross/buffer|Buffer} representing the [[StakeableLockIn]] and returns the size of the output.\n     */\n    fromBuffer(bytes, offset = 0) {\n        this.stakeableLocktime = bintools.copyFrom(bytes, offset, offset + 8);\n        offset += 8;\n        this.transferableInput = new ParseableInput();\n        offset = this.transferableInput.fromBuffer(bytes, offset);\n        this.synchronize();\n        return offset;\n    }\n    /**\n     * Returns the buffer representing the [[StakeableLockIn]] instance.\n     */\n    toBuffer() {\n        const xferinBuff = this.transferableInput.toBuffer();\n        const bsize = this.stakeableLocktime.length + xferinBuff.length;\n        const barr = [this.stakeableLocktime, xferinBuff];\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n    create(...args) {\n        return new StakeableLockIn(...args);\n    }\n    clone() {\n        const newout = this.create();\n        newout.fromBuffer(this.toBuffer());\n        return newout;\n    }\n    select(id, ...args) {\n        return exports.SelectInputClass(id, ...args);\n    }\n}\nexports.StakeableLockIn = StakeableLockIn;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ImportTx = void 0;\n/**\n * @packageDocumentation\n * @module API-PlatformVM-ImportTx\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst inputs_1 = require(\"./inputs\");\nconst credentials_1 = require(\"./credentials\");\nconst credentials_2 = require(\"../../common/credentials\");\nconst basetx_1 = require(\"./basetx\");\nconst constants_2 = require(\"../../utils/constants\");\nconst serialization_1 = require(\"../../utils/serialization\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serializer = serialization_1.Serialization.getInstance();\n/**\n * Class representing an unsigned Import transaction.\n */\nclass ImportTx extends basetx_1.BaseTx {\n    /**\n     * Class representing an unsigned Import transaction.\n     *\n     * @param networkid Optional networkid, [[DefaultNetworkID]]\n     * @param blockchainid Optional blockchainid, default Buffer.alloc(32, 16)\n     * @param outs Optional array of the [[TransferableOutput]]s\n     * @param ins Optional array of the [[TransferableInput]]s\n     * @param memo Optional {@link https://github.com/feross/buffer|Buffer} for the memo field\n     * @param sourceChain Optiona chainid for the source inputs to import. Default platform chainid.\n     * @param importIns Array of [[TransferableInput]]s used in the transaction\n     */\n    constructor(networkid = constants_2.DefaultNetworkID, blockchainid = buffer_1.Buffer.alloc(32, 16), outs = undefined, ins = undefined, memo = undefined, sourceChain = undefined, importIns = undefined) {\n        super(networkid, blockchainid, outs, ins, memo);\n        this._typeName = \"ImportTx\";\n        this._typeID = constants_1.PlatformVMConstants.IMPORTTX;\n        this.sourceChain = buffer_1.Buffer.alloc(32);\n        this.numIns = buffer_1.Buffer.alloc(4);\n        this.importIns = [];\n        /**\n           * Returns the id of the [[ImportTx]]\n           */\n        this.getTxType = () => {\n            return this._typeID;\n        };\n        this.sourceChain = sourceChain; // do no correct, if it's wrong it'll bomb on toBuffer\n        if (typeof importIns !== 'undefined' && Array.isArray(importIns)) {\n            for (let i = 0; i < importIns.length; i++) {\n                if (!(importIns[i] instanceof inputs_1.TransferableInput)) {\n                    throw new Error(\"Error - ImportTx.constructor: invalid TransferableInput in array parameter 'importIns'\");\n                }\n            }\n            this.importIns = importIns;\n        }\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { \"sourceChain\": serializer.encoder(this.sourceChain, encoding, \"Buffer\", \"cb58\"), \"importIns\": this.importIns.map((i) => i.serialize(encoding)) });\n    }\n    ;\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.sourceChain = serializer.decoder(fields[\"sourceChain\"], encoding, \"cb58\", \"Buffer\", 32);\n        this.importIns = fields[\"importIns\"].map((i) => {\n            let ii = new inputs_1.TransferableInput();\n            ii.deserialize(i, encoding);\n            return ii;\n        });\n        this.numIns = buffer_1.Buffer.alloc(4);\n        this.numIns.writeUInt32BE(this.importIns.length, 0);\n    }\n    /**\n       * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[ImportTx]], parses it, populates the class, and returns the length of the [[ImportTx]] in bytes.\n       *\n       * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[ImportTx]]\n       *\n       * @returns The length of the raw [[ImportTx]]\n       *\n       * @remarks assume not-checksummed\n       */\n    fromBuffer(bytes, offset = 0) {\n        offset = super.fromBuffer(bytes, offset);\n        this.sourceChain = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        this.numIns = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const numIns = this.numIns.readUInt32BE(0);\n        for (let i = 0; i < numIns; i++) {\n            const anIn = new inputs_1.TransferableInput();\n            offset = anIn.fromBuffer(bytes, offset);\n            this.importIns.push(anIn);\n        }\n        return offset;\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[ImportTx]].\n     */\n    toBuffer() {\n        if (typeof this.sourceChain === \"undefined\") {\n            throw new Error(\"ImportTx.toBuffer -- this.sourceChain is undefined\");\n        }\n        this.numIns.writeUInt32BE(this.importIns.length, 0);\n        let barr = [super.toBuffer(), this.sourceChain, this.numIns];\n        this.importIns = this.importIns.sort(inputs_1.TransferableInput.comparator());\n        for (let i = 0; i < this.importIns.length; i++) {\n            barr.push(this.importIns[i].toBuffer());\n        }\n        return buffer_1.Buffer.concat(barr);\n    }\n    /**\n       * Returns an array of [[TransferableInput]]s in this transaction.\n       */\n    getImportInputs() {\n        return this.importIns;\n    }\n    /**\n       * Takes the bytes of an [[UnsignedTx]] and returns an array of [[Credential]]s\n       *\n       * @param msg A Buffer for the [[UnsignedTx]]\n       * @param kc An [[KeyChain]] used in signing\n       *\n       * @returns An array of [[Credential]]s\n       */\n    sign(msg, kc) {\n        const sigs = super.sign(msg, kc);\n        for (let i = 0; i < this.importIns.length; i++) {\n            const cred = credentials_1.SelectCredentialClass(this.importIns[i].getInput().getCredentialID());\n            const sigidxs = this.importIns[i].getInput().getSigIdxs();\n            for (let j = 0; j < sigidxs.length; j++) {\n                const keypair = kc.getKey(sigidxs[j].getSource());\n                const signval = keypair.sign(msg);\n                const sig = new credentials_2.Signature();\n                sig.fromBuffer(signval);\n                cred.addSignature(sig);\n            }\n            sigs.push(cred);\n        }\n        return sigs;\n    }\n    clone() {\n        let newbase = new ImportTx();\n        newbase.fromBuffer(this.toBuffer());\n        return newbase;\n    }\n    create(...args) {\n        return new ImportTx(...args);\n    }\n}\nexports.ImportTx = ImportTx;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./apibase\"), exports);\n__exportStar(require(\"./assetamount\"), exports);\n__exportStar(require(\"./credentials\"), exports);\n__exportStar(require(\"./evmtx\"), exports);\n__exportStar(require(\"./input\"), exports);\n__exportStar(require(\"./interfaces\"), exports);\n__exportStar(require(\"./jrpcapi\"), exports);\n__exportStar(require(\"./keychain\"), exports);\n__exportStar(require(\"./nbytes\"), exports);\n__exportStar(require(\"./output\"), exports);\n__exportStar(require(\"./restapi\"), exports);\n__exportStar(require(\"./secp256k1\"), exports);\n__exportStar(require(\"./tx\"), exports);\n__exportStar(require(\"./utxos\"), exports);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tbW9uL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBLDRDQUEwQjtBQUMxQixnREFBOEI7QUFDOUIsZ0RBQThCO0FBQzlCLDBDQUF3QjtBQUN4QiwwQ0FBd0I7QUFDeEIsK0NBQTZCO0FBQzdCLDRDQUEwQjtBQUMxQiw2Q0FBMkI7QUFDM0IsMkNBQXlCO0FBQ3pCLDJDQUF5QjtBQUN6Qiw0Q0FBMEI7QUFDMUIsOENBQTRCO0FBQzVCLHVDQUFxQjtBQUNyQiwwQ0FBd0IiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tICcuL2FwaWJhc2UnO1xuZXhwb3J0ICogZnJvbSAnLi9hc3NldGFtb3VudCc7XG5leHBvcnQgKiBmcm9tICcuL2NyZWRlbnRpYWxzJztcbmV4cG9ydCAqIGZyb20gJy4vZXZtdHgnO1xuZXhwb3J0ICogZnJvbSAnLi9pbnB1dCc7XG5leHBvcnQgKiBmcm9tICcuL2ludGVyZmFjZXMnO1xuZXhwb3J0ICogZnJvbSAnLi9qcnBjYXBpJztcbmV4cG9ydCAqIGZyb20gJy4va2V5Y2hhaW4nO1xuZXhwb3J0ICogZnJvbSAnLi9uYnl0ZXMnO1xuZXhwb3J0ICogZnJvbSAnLi9vdXRwdXQnO1xuZXhwb3J0ICogZnJvbSAnLi9yZXN0YXBpJztcbmV4cG9ydCAqIGZyb20gJy4vc2VjcDI1NmsxJztcbmV4cG9ydCAqIGZyb20gJy4vdHgnO1xuZXhwb3J0ICogZnJvbSAnLi91dHhvcyc7XG4iXX0=","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./api\"), exports);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpcy9oZWFsdGgvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUEsd0NBQXNCIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSAnLi9hcGknO1xuIl19","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.StandardUTXOSet = exports.StandardUTXO = void 0;\n/**\n * @packageDocumentation\n * @module Common-UTXOs\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../utils/bintools\"));\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst output_1 = require(\"./output\");\nconst helperfunctions_1 = require(\"../utils/helperfunctions\");\nconst serialization_1 = require(\"../utils/serialization\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serializer = serialization_1.Serialization.getInstance();\n/**\n * Class for representing a single StandardUTXO.\n */\nclass StandardUTXO extends serialization_1.Serializable {\n    /**\n       * Class for representing a single StandardUTXO.\n       *\n       * @param codecID Optional number which specifies the codeID of the UTXO. Default 1\n       * @param txid Optional {@link https://github.com/feross/buffer|Buffer} of transaction ID for the StandardUTXO\n       * @param txidx Optional {@link https://github.com/feross/buffer|Buffer} or number for the index of the transaction's [[Output]]\n       * @param assetid Optional {@link https://github.com/feross/buffer|Buffer} of the asset ID for the StandardUTXO\n       * @param outputid Optional {@link https://github.com/feross/buffer|Buffer} or number of the output ID for the StandardUTXO\n       */\n    constructor(codecID = 0, txid = undefined, outputidx = undefined, assetid = undefined, output = undefined) {\n        super();\n        this._typeName = \"StandardUTXO\";\n        this._typeID = undefined;\n        this.codecid = buffer_1.Buffer.alloc(2);\n        this.txid = buffer_1.Buffer.alloc(32);\n        this.outputidx = buffer_1.Buffer.alloc(4);\n        this.assetid = buffer_1.Buffer.alloc(32);\n        this.output = undefined;\n        /**\n           * Returns the numeric representation of the CodecID.\n           */\n        this.getCodecID = () => this.codecid.readUInt8(0);\n        /**\n         * Returns the {@link https://github.com/feross/buffer|Buffer} representation of the CodecID\n          */\n        this.getCodecIDBuffer = () => this.codecid;\n        /**\n           * Returns a {@link https://github.com/feross/buffer|Buffer} of the TxID.\n           */\n        this.getTxID = () => this.txid;\n        /**\n           * Returns a {@link https://github.com/feross/buffer|Buffer}  of the OutputIdx.\n           */\n        this.getOutputIdx = () => this.outputidx;\n        /**\n           * Returns the assetID as a {@link https://github.com/feross/buffer|Buffer}.\n           */\n        this.getAssetID = () => this.assetid;\n        /**\n           * Returns the UTXOID as a base-58 string (UTXOID is a string )\n           */\n        this.getUTXOID = () => bintools.bufferToB58(buffer_1.Buffer.concat([this.getTxID(), this.getOutputIdx()]));\n        /**\n         * Returns a reference to the output;\n        */\n        this.getOutput = () => this.output;\n        if (typeof codecID !== 'undefined') {\n            this.codecid.writeUInt8(codecID, 0);\n        }\n        if (typeof txid !== 'undefined') {\n            this.txid = txid;\n        }\n        if (typeof outputidx === 'number') {\n            this.outputidx.writeUInt32BE(outputidx, 0);\n        }\n        else if (outputidx instanceof buffer_1.Buffer) {\n            this.outputidx = outputidx;\n        }\n        if (typeof assetid !== 'undefined') {\n            this.assetid = assetid;\n        }\n        if (typeof output !== 'undefined') {\n            this.output = output;\n        }\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { \"codecid\": serializer.encoder(this.codecid, encoding, \"Buffer\", \"decimalString\"), \"txid\": serializer.encoder(this.txid, encoding, \"Buffer\", \"cb58\"), \"outputidx\": serializer.encoder(this.outputidx, encoding, \"Buffer\", \"decimalString\"), \"assetid\": serializer.encoder(this.assetid, encoding, \"Buffer\", \"cb58\"), \"output\": this.output.serialize(encoding) });\n    }\n    ;\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.codecid = serializer.decoder(fields[\"codecid\"], encoding, \"decimalString\", \"Buffer\", 2);\n        this.txid = serializer.decoder(fields[\"txid\"], encoding, \"cb58\", \"Buffer\", 32);\n        this.outputidx = serializer.decoder(fields[\"outputidx\"], encoding, \"decimalString\", \"Buffer\", 4);\n        this.assetid = serializer.decoder(fields[\"assetid\"], encoding, \"cb58\", \"Buffer\", 32);\n    }\n    /**\n       * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[StandardUTXO]].\n       */\n    toBuffer() {\n        const outbuff = this.output.toBuffer();\n        const outputidbuffer = buffer_1.Buffer.alloc(4);\n        outputidbuffer.writeUInt32BE(this.output.getOutputID(), 0);\n        const barr = [this.codecid, this.txid, this.outputidx, this.assetid, outputidbuffer, outbuff];\n        return buffer_1.Buffer.concat(barr, this.codecid.length + this.txid.length\n            + this.outputidx.length + this.assetid.length\n            + outputidbuffer.length + outbuff.length);\n    }\n}\nexports.StandardUTXO = StandardUTXO;\n/**\n * Class representing a set of [[StandardUTXO]]s.\n */\nclass StandardUTXOSet extends serialization_1.Serializable {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"StandardUTXOSet\";\n        this._typeID = undefined;\n        this.utxos = {};\n        this.addressUTXOs = {}; // maps address to utxoids:locktime\n        /**\n         * Returns true if the [[StandardUTXO]] is in the StandardUTXOSet.\n         *\n         * @param utxo Either a [[StandardUTXO]] a cb58 serialized string representing a StandardUTXO\n         */\n        this.includes = (utxo) => {\n            let utxoX = undefined;\n            let utxoid = undefined;\n            try {\n                utxoX = this.parseUTXO(utxo);\n                utxoid = utxoX.getUTXOID();\n            }\n            catch (e) {\n                if (e instanceof Error) {\n                    console.log(e.message);\n                }\n                else {\n                    console.log(e);\n                }\n                return false;\n            }\n            return (utxoid in this.utxos);\n        };\n        /**\n           * Removes a [[StandardUTXO]] from the [[StandardUTXOSet]] if it exists.\n           *\n           * @param utxo Either a [[StandardUTXO]] an cb58 serialized string representing a StandardUTXO\n           *\n           * @returns A [[StandardUTXO]] if it was removed and undefined if nothing was removed.\n           */\n        this.remove = (utxo) => {\n            let utxovar = undefined;\n            try {\n                utxovar = this.parseUTXO(utxo);\n            }\n            catch (e) {\n                if (e instanceof Error) {\n                    console.log(e.message);\n                }\n                else {\n                    console.log(e);\n                }\n                return undefined;\n            }\n            const utxoid = utxovar.getUTXOID();\n            if (!(utxoid in this.utxos)) {\n                return undefined;\n            }\n            delete this.utxos[utxoid];\n            const addresses = Object.keys(this.addressUTXOs);\n            for (let i = 0; i < addresses.length; i++) {\n                if (utxoid in this.addressUTXOs[addresses[i]]) {\n                    delete this.addressUTXOs[addresses[i]][utxoid];\n                }\n            }\n            return utxovar;\n        };\n        /**\n           * Removes an array of [[StandardUTXO]]s to the [[StandardUTXOSet]].\n           *\n           * @param utxo Either a [[StandardUTXO]] an cb58 serialized string representing a StandardUTXO\n           * @param overwrite If true, if the UTXOID already exists, overwrite it... default false\n           *\n           * @returns An array of UTXOs which were removed.\n           */\n        this.removeArray = (utxos) => {\n            const removed = [];\n            for (let i = 0; i < utxos.length; i++) {\n                const result = this.remove(utxos[i]);\n                if (typeof result !== 'undefined') {\n                    removed.push(result);\n                }\n            }\n            return removed;\n        };\n        /**\n           * Gets a [[StandardUTXO]] from the [[StandardUTXOSet]] by its UTXOID.\n           *\n           * @param utxoid String representing the UTXOID\n           *\n           * @returns A [[StandardUTXO]] if it exists in the set.\n           */\n        this.getUTXO = (utxoid) => this.utxos[utxoid];\n        /**\n           * Gets all the [[StandardUTXO]]s, optionally that match with UTXOIDs in an array\n           *\n           * @param utxoids An optional array of UTXOIDs, returns all [[StandardUTXO]]s if not provided\n           *\n           * @returns An array of [[StandardUTXO]]s.\n           */\n        this.getAllUTXOs = (utxoids = undefined) => {\n            let results = [];\n            if (typeof utxoids !== 'undefined' && Array.isArray(utxoids)) {\n                for (let i = 0; i < utxoids.length; i++) {\n                    if (utxoids[i] in this.utxos && !(utxoids[i] in results)) {\n                        results.push(this.utxos[utxoids[i]]);\n                    }\n                }\n            }\n            else {\n                results = Object.values(this.utxos);\n            }\n            return results;\n        };\n        /**\n           * Gets all the [[StandardUTXO]]s as strings, optionally that match with UTXOIDs in an array.\n           *\n           * @param utxoids An optional array of UTXOIDs, returns all [[StandardUTXO]]s if not provided\n           *\n           * @returns An array of [[StandardUTXO]]s as cb58 serialized strings.\n           */\n        this.getAllUTXOStrings = (utxoids = undefined) => {\n            const results = [];\n            const utxos = Object.keys(this.utxos);\n            if (typeof utxoids !== 'undefined' && Array.isArray(utxoids)) {\n                for (let i = 0; i < utxoids.length; i++) {\n                    if (utxoids[i] in this.utxos) {\n                        results.push(this.utxos[utxoids[i]].toString());\n                    }\n                }\n            }\n            else {\n                for (const u of utxos) {\n                    results.push(this.utxos[u].toString());\n                }\n            }\n            return results;\n        };\n        /**\n           * Given an address or array of addresses, returns all the UTXOIDs for those addresses\n           *\n           * @param address An array of address {@link https://github.com/feross/buffer|Buffer}s\n           * @param spendable If true, only retrieves UTXOIDs whose locktime has passed\n           *\n           * @returns An array of addresses.\n           */\n        this.getUTXOIDs = (addresses = undefined, spendable = true) => {\n            if (typeof addresses !== 'undefined') {\n                const results = [];\n                const now = helperfunctions_1.UnixNow();\n                for (let i = 0; i < addresses.length; i++) {\n                    if (addresses[i].toString('hex') in this.addressUTXOs) {\n                        const entries = Object.entries(this.addressUTXOs[addresses[i].toString('hex')]);\n                        for (const [utxoid, locktime] of entries) {\n                            if ((results.indexOf(utxoid) === -1\n                                && (spendable && locktime.lte(now)))\n                                || !spendable) {\n                                results.push(utxoid);\n                            }\n                        }\n                    }\n                }\n                return results;\n            }\n            return Object.keys(this.utxos);\n        };\n        /**\n           * Gets the addresses in the [[StandardUTXOSet]] and returns an array of {@link https://github.com/feross/buffer|Buffer}.\n           */\n        this.getAddresses = () => Object.keys(this.addressUTXOs)\n            .map((k) => buffer_1.Buffer.from(k, 'hex'));\n        /**\n           * Returns the balance of a set of addresses in the StandardUTXOSet.\n           *\n           * @param addresses An array of addresses\n           * @param assetID Either a {@link https://github.com/feross/buffer|Buffer} or an cb58 serialized representation of an AssetID\n           * @param asOf The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n           *\n           * @returns Returns the total balance as a {@link https://github.com/indutny/bn.js/|BN}.\n           */\n        this.getBalance = (addresses, assetID, asOf = undefined) => {\n            const utxoids = this.getUTXOIDs(addresses);\n            const utxos = this.getAllUTXOs(utxoids);\n            let spend = new bn_js_1.default(0);\n            let asset;\n            if (typeof assetID === 'string') {\n                asset = bintools.cb58Decode(assetID);\n            }\n            else {\n                asset = assetID;\n            }\n            for (let i = 0; i < utxos.length; i++) {\n                if (utxos[i].getOutput() instanceof output_1.StandardAmountOutput\n                    && utxos[i].getAssetID().toString('hex') === asset.toString('hex')\n                    && utxos[i].getOutput().meetsThreshold(addresses, asOf)) {\n                    spend = spend.add(utxos[i].getOutput().getAmount());\n                }\n            }\n            return spend;\n        };\n        /**\n           * Gets all the Asset IDs, optionally that match with Asset IDs in an array\n           *\n           * @param utxoids An optional array of Addresses as string or Buffer, returns all Asset IDs if not provided\n           *\n           * @returns An array of {@link https://github.com/feross/buffer|Buffer} representing the Asset IDs.\n           */\n        this.getAssetIDs = (addresses = undefined) => {\n            const results = new Set();\n            let utxoids = [];\n            if (typeof addresses !== 'undefined') {\n                utxoids = this.getUTXOIDs(addresses);\n            }\n            else {\n                utxoids = this.getUTXOIDs();\n            }\n            for (let i = 0; i < utxoids.length; i++) {\n                if (utxoids[i] in this.utxos && !(utxoids[i] in results)) {\n                    results.add(this.utxos[utxoids[i]].getAssetID());\n                }\n            }\n            return [...results];\n        };\n        /**\n           * Returns a new set with copy of UTXOs in this and set parameter.\n           *\n           * @param utxoset The [[StandardUTXOSet]] to merge with this one\n           * @param hasUTXOIDs Will subselect a set of [[StandardUTXO]]s which have the UTXOIDs provided in this array, defults to all UTXOs\n           *\n           * @returns A new StandardUTXOSet that contains all the filtered elements.\n           */\n        this.merge = (utxoset, hasUTXOIDs = undefined) => {\n            const results = this.create();\n            const utxos1 = this.getAllUTXOs(hasUTXOIDs);\n            const utxos2 = utxoset.getAllUTXOs(hasUTXOIDs);\n            const process = (utxo) => {\n                results.add(utxo);\n            };\n            utxos1.forEach(process);\n            utxos2.forEach(process);\n            return results;\n        };\n        /**\n           * Set intersetion between this set and a parameter.\n           *\n           * @param utxoset The set to intersect\n           *\n           * @returns A new StandardUTXOSet containing the intersection\n           */\n        this.intersection = (utxoset) => {\n            const us1 = this.getUTXOIDs();\n            const us2 = utxoset.getUTXOIDs();\n            const results = us1.filter((utxoid) => us2.includes(utxoid));\n            return this.merge(utxoset, results);\n        };\n        /**\n           * Set difference between this set and a parameter.\n           *\n           * @param utxoset The set to difference\n           *\n           * @returns A new StandardUTXOSet containing the difference\n           */\n        this.difference = (utxoset) => {\n            const us1 = this.getUTXOIDs();\n            const us2 = utxoset.getUTXOIDs();\n            const results = us1.filter((utxoid) => !us2.includes(utxoid));\n            return this.merge(utxoset, results);\n        };\n        /**\n           * Set symmetrical difference between this set and a parameter.\n           *\n           * @param utxoset The set to symmetrical difference\n           *\n           * @returns A new StandardUTXOSet containing the symmetrical difference\n           */\n        this.symDifference = (utxoset) => {\n            const us1 = this.getUTXOIDs();\n            const us2 = utxoset.getUTXOIDs();\n            const results = us1.filter((utxoid) => !us2.includes(utxoid))\n                .concat(us2.filter((utxoid) => !us1.includes(utxoid)));\n            return this.merge(utxoset, results);\n        };\n        /**\n           * Set union between this set and a parameter.\n           *\n           * @param utxoset The set to union\n           *\n           * @returns A new StandardUTXOSet containing the union\n           */\n        this.union = (utxoset) => this.merge(utxoset);\n        /**\n           * Merges a set by the rule provided.\n           *\n           * @param utxoset The set to merge by the MergeRule\n           * @param mergeRule The [[MergeRule]] to apply\n           *\n           * @returns A new StandardUTXOSet containing the merged data\n           *\n           * @remarks\n           * The merge rules are as follows:\n           *   * \"intersection\" - the intersection of the set\n           *   * \"differenceSelf\" - the difference between the existing data and new set\n           *   * \"differenceNew\" - the difference between the new data and the existing set\n           *   * \"symDifference\" - the union of the differences between both sets of data\n           *   * \"union\" - the unique set of all elements contained in both sets\n           *   * \"unionMinusNew\" - the unique set of all elements contained in both sets, excluding values only found in the new set\n           *   * \"unionMinusSelf\" - the unique set of all elements contained in both sets, excluding values only found in the existing set\n           */\n        this.mergeByRule = (utxoset, mergeRule) => {\n            let uSet;\n            switch (mergeRule) {\n                case 'intersection':\n                    return this.intersection(utxoset);\n                case 'differenceSelf':\n                    return this.difference(utxoset);\n                case 'differenceNew':\n                    return utxoset.difference(this);\n                case 'symDifference':\n                    return this.symDifference(utxoset);\n                case 'union':\n                    return this.union(utxoset);\n                case 'unionMinusNew':\n                    uSet = this.union(utxoset);\n                    return uSet.difference(utxoset);\n                case 'unionMinusSelf':\n                    uSet = this.union(utxoset);\n                    return uSet.difference(this);\n                default:\n                    throw new Error(`Error - StandardUTXOSet.mergeByRule: bad MergeRule - ${mergeRule}`);\n            }\n        };\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        let utxos = {};\n        for (let utxoid in this.utxos) {\n            let utxoidCleaned = serializer.encoder(utxoid, encoding, \"base58\", \"base58\");\n            utxos[utxoidCleaned] = this.utxos[utxoid].serialize(encoding);\n        }\n        let addressUTXOs = {};\n        for (let address in this.addressUTXOs) {\n            let addressCleaned = serializer.encoder(address, encoding, \"hex\", \"cb58\");\n            let utxobalance = {};\n            for (let utxoid in this.addressUTXOs[address]) {\n                let utxoidCleaned = serializer.encoder(utxoid, encoding, \"base58\", \"base58\");\n                utxobalance[utxoidCleaned] = serializer.encoder(this.addressUTXOs[address][utxoid], encoding, \"BN\", \"decimalString\");\n            }\n            addressUTXOs[addressCleaned] = utxobalance;\n        }\n        return Object.assign(Object.assign({}, fields), { utxos,\n            addressUTXOs });\n    }\n    ;\n    /**\n       * Adds a [[StandardUTXO]] to the StandardUTXOSet.\n       *\n       * @param utxo Either a [[StandardUTXO]] an cb58 serialized string representing a StandardUTXO\n       * @param overwrite If true, if the UTXOID already exists, overwrite it... default false\n       *\n       * @returns A [[StandardUTXO]] if one was added and undefined if nothing was added.\n       */\n    add(utxo, overwrite = false) {\n        let utxovar = undefined;\n        try {\n            utxovar = this.parseUTXO(utxo);\n        }\n        catch (e) {\n            if (e instanceof Error) {\n                console.log(e.message);\n            }\n            else {\n                console.log(e);\n            }\n            return undefined;\n        }\n        const utxoid = utxovar.getUTXOID();\n        if (!(utxoid in this.utxos) || overwrite === true) {\n            this.utxos[utxoid] = utxovar;\n            const addresses = utxovar.getOutput().getAddresses();\n            const locktime = utxovar.getOutput().getLocktime();\n            for (let i = 0; i < addresses.length; i++) {\n                const address = addresses[i].toString('hex');\n                if (!(address in this.addressUTXOs)) {\n                    this.addressUTXOs[address] = {};\n                }\n                this.addressUTXOs[address][utxoid] = locktime;\n            }\n            return utxovar;\n        }\n        return undefined;\n    }\n    ;\n    /**\n       * Adds an array of [[StandardUTXO]]s to the [[StandardUTXOSet]].\n       *\n       * @param utxo Either a [[StandardUTXO]] an cb58 serialized string representing a StandardUTXO\n       * @param overwrite If true, if the UTXOID already exists, overwrite it... default false\n       *\n       * @returns An array of StandardUTXOs which were added.\n       */\n    addArray(utxos, overwrite = false) {\n        const added = [];\n        for (let i = 0; i < utxos.length; i++) {\n            let result = this.add(utxos[i], overwrite);\n            if (typeof result !== 'undefined') {\n                added.push(result);\n            }\n        }\n        return added;\n    }\n    ;\n    filter(args, lambda) {\n        let newset = this.clone();\n        let utxos = this.getAllUTXOs();\n        for (let i = 0; i < utxos.length; i++) {\n            if (lambda(utxos[i], ...args) === false) {\n                newset.remove(utxos[i]);\n            }\n        }\n        return newset;\n    }\n}\nexports.StandardUTXOSet = StandardUTXOSet;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./api\"), exports);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpcy9rZXlzdG9yZS9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQSx3Q0FBc0IiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tICcuL2FwaSc7XG4iXX0=","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./api\"), exports);\n__exportStar(require(\"./basetx\"), exports);\n__exportStar(require(\"./constants\"), exports);\n__exportStar(require(\"./createsubnettx\"), exports);\n__exportStar(require(\"./credentials\"), exports);\n__exportStar(require(\"./exporttx\"), exports);\n__exportStar(require(\"./importtx\"), exports);\n__exportStar(require(\"./inputs\"), exports);\n__exportStar(require(\"./keychain\"), exports);\n__exportStar(require(\"./outputs\"), exports);\n__exportStar(require(\"./tx\"), exports);\n__exportStar(require(\"./utxos\"), exports);\n__exportStar(require(\"./validationtx\"), exports);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpcy9wbGF0Zm9ybXZtL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBLHdDQUFzQjtBQUN0QiwyQ0FBeUI7QUFDekIsOENBQTRCO0FBQzVCLG1EQUFpQztBQUNqQyxnREFBOEI7QUFDOUIsNkNBQTJCO0FBQzNCLDZDQUEyQjtBQUMzQiwyQ0FBeUI7QUFDekIsNkNBQTJCO0FBQzNCLDRDQUEwQjtBQUMxQix1Q0FBcUI7QUFDckIsMENBQXdCO0FBQ3hCLGlEQUErQiIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gJy4vYXBpJztcbmV4cG9ydCAqIGZyb20gJy4vYmFzZXR4JztcbmV4cG9ydCAqIGZyb20gJy4vY29uc3RhbnRzJztcbmV4cG9ydCAqIGZyb20gJy4vY3JlYXRlc3VibmV0dHgnO1xuZXhwb3J0ICogZnJvbSAnLi9jcmVkZW50aWFscyc7XG5leHBvcnQgKiBmcm9tICcuL2V4cG9ydHR4JztcbmV4cG9ydCAqIGZyb20gJy4vaW1wb3J0dHgnO1xuZXhwb3J0ICogZnJvbSAnLi9pbnB1dHMnO1xuZXhwb3J0ICogZnJvbSAnLi9rZXljaGFpbic7XG5leHBvcnQgKiBmcm9tICcuL291dHB1dHMnO1xuZXhwb3J0ICogZnJvbSAnLi90eCc7XG5leHBvcnQgKiBmcm9tICcuL3V0eG9zJztcbmV4cG9ydCAqIGZyb20gJy4vdmFsaWRhdGlvbnR4JztcbiJdfQ==","\"use strict\";\n/**\n * @packageDocumentation\n * @module Common-Interfaces\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZXJmYWNlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tb24vaW50ZXJmYWNlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7OztHQUdHIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAcGFja2FnZURvY3VtZW50YXRpb25cbiAqIEBtb2R1bGUgQ29tbW9uLUludGVyZmFjZXNcbiAqL1xuXG5pbXBvcnQgeyBCdWZmZXIgfSBmcm9tICdidWZmZXIvJztcblxuZXhwb3J0IGludGVyZmFjZSBJbmRleCB7XG4gIGFkZHJlc3M6IHN0cmluZ1xuICB1dHhvOiBzdHJpbmdcbn1cblxuZXhwb3J0IGludGVyZmFjZSBVVFhPUmVzcG9uc2Uge1xuICBudW1GZXRjaGVkOiBudW1iZXJcbiAgdXR4b3M6IGFueVxuICBlbmRJbmRleDogSW5kZXhcbn1cblxuZXhwb3J0IGludGVyZmFjZSBBc3NldCB7XG4gIG5hbWU6IHN0cmluZ1xuICBzeW1ib2w6IHN0cmluZ1xuICBhc3NldElEOiBCdWZmZXJcbiAgZGVub21pbmF0aW9uOiBudW1iZXJcbn1cbiJdfQ==","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MetricsAPI = void 0;\nconst restapi_1 = require(\"../../common/restapi\");\n/**\n * Class for interacting with a node API that is using the node's MetricsApi.\n *\n * @category RPCAPIs\n *\n * @remarks This extends the [[RESTAPI]] class. This class should not be directly called. Instead, use the [[Avalanche.addAPI]] function to register this interface with Avalanche.\n */\nclass MetricsAPI extends restapi_1.RESTAPI {\n    /**\n       * This class should not be instantiated directly. Instead use the [[Avalanche.addAPI]] method.\n       *\n       * @param core A reference to the Avalanche class\n       * @param baseurl Defaults to the string \"/ext/metrics\" as the path to blockchain's baseurl\n       */\n    constructor(core, baseurl = '/ext/metrics') {\n        super(core, baseurl);\n        this.axConf = () => {\n            return {\n                baseURL: `${this.core.getProtocol()}://${this.core.getIP()}:${this.core.getPort()}`,\n                responseType: 'text',\n            };\n        };\n        /**\n           *\n           * @returns Promise for an object containing the metrics response\n           */\n        this.getMetrics = () => __awaiter(this, void 0, void 0, function* () {\n            return this.post('')\n                .then((response) => response.data);\n        });\n    }\n}\nexports.MetricsAPI = MetricsAPI;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2FwaXMvbWV0cmljcy9hcGkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBS0Esa0RBQStDO0FBSy9DOzs7Ozs7R0FNRztBQUNILE1BQWEsVUFBVyxTQUFRLGlCQUFPO0lBZ0JyQzs7Ozs7U0FLSztJQUNMLFlBQVksSUFBa0IsRUFBRSxVQUFpQixjQUFjO1FBQUksS0FBSyxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztRQXJCOUUsV0FBTSxHQUFHLEdBQXNCLEVBQUU7WUFDekMsT0FBUTtnQkFDTixPQUFPLEVBQUUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsRUFBRTtnQkFDbkYsWUFBWSxFQUFFLE1BQU07YUFDckIsQ0FBQztRQUVKLENBQUMsQ0FBQTtRQUVEOzs7YUFHSztRQUNMLGVBQVUsR0FBRyxHQUF5QixFQUFFO1lBQUMsT0FBQSxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQztpQkFDbkQsSUFBSSxDQUFDLENBQUMsUUFBNEIsRUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDLElBQWMsQ0FBQyxDQUFBO1VBQUEsQ0FBQztJQVFzQixDQUFDO0NBQzNGO0FBdkJELGdDQXVCQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHBhY2thZ2VEb2N1bWVudGF0aW9uXG4gKiBAbW9kdWxlIEFQSS1NZXRyaWNzXG4gKi9cbmltcG9ydCBBdmFsYW5jaGVDb3JlIGZyb20gJy4uLy4uL2F2YWxhbmNoZSc7XG5pbXBvcnQgeyBSRVNUQVBJIH0gZnJvbSAnLi4vLi4vY29tbW9uL3Jlc3RhcGknO1xuaW1wb3J0IHsgUmVxdWVzdFJlc3BvbnNlRGF0YSB9IGZyb20gJy4uLy4uL2NvbW1vbi9hcGliYXNlJztcbmltcG9ydCB7IEF4aW9zUmVxdWVzdENvbmZpZyB9IGZyb20gJ2F4aW9zJztcblxuXG4vKipcbiAqIENsYXNzIGZvciBpbnRlcmFjdGluZyB3aXRoIGEgbm9kZSBBUEkgdGhhdCBpcyB1c2luZyB0aGUgbm9kZSdzIE1ldHJpY3NBcGkuXG4gKlxuICogQGNhdGVnb3J5IFJQQ0FQSXNcbiAqXG4gKiBAcmVtYXJrcyBUaGlzIGV4dGVuZHMgdGhlIFtbUkVTVEFQSV1dIGNsYXNzLiBUaGlzIGNsYXNzIHNob3VsZCBub3QgYmUgZGlyZWN0bHkgY2FsbGVkLiBJbnN0ZWFkLCB1c2UgdGhlIFtbQXZhbGFuY2hlLmFkZEFQSV1dIGZ1bmN0aW9uIHRvIHJlZ2lzdGVyIHRoaXMgaW50ZXJmYWNlIHdpdGggQXZhbGFuY2hlLlxuICovXG5leHBvcnQgY2xhc3MgTWV0cmljc0FQSSBleHRlbmRzIFJFU1RBUEkge1xuICBwcm90ZWN0ZWQgYXhDb25mID0gKCk6QXhpb3NSZXF1ZXN0Q29uZmlnID0+IHtcbiAgICByZXR1cm4gIHtcbiAgICAgIGJhc2VVUkw6IGAke3RoaXMuY29yZS5nZXRQcm90b2NvbCgpfTovLyR7dGhpcy5jb3JlLmdldElQKCl9OiR7dGhpcy5jb3JlLmdldFBvcnQoKX1gLFxuICAgICAgcmVzcG9uc2VUeXBlOiAndGV4dCcsXG4gICAgfTtcblxuICB9XG5cbiAgLyoqXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBQcm9taXNlIGZvciBhbiBvYmplY3QgY29udGFpbmluZyB0aGUgbWV0cmljcyByZXNwb25zZVxuICAgICAqL1xuICBnZXRNZXRyaWNzID0gYXN5bmMgKCk6UHJvbWlzZTxzdHJpbmc+ID0+IHRoaXMucG9zdCgnJylcbiAgICAudGhlbigocmVzcG9uc2U6UmVxdWVzdFJlc3BvbnNlRGF0YSkgPT4gcmVzcG9uc2UuZGF0YSBhcyBzdHJpbmcpO1xuXG4gIC8qKlxuICAgICAqIFRoaXMgY2xhc3Mgc2hvdWxkIG5vdCBiZSBpbnN0YW50aWF0ZWQgZGlyZWN0bHkuIEluc3RlYWQgdXNlIHRoZSBbW0F2YWxhbmNoZS5hZGRBUEldXSBtZXRob2QuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY29yZSBBIHJlZmVyZW5jZSB0byB0aGUgQXZhbGFuY2hlIGNsYXNzXG4gICAgICogQHBhcmFtIGJhc2V1cmwgRGVmYXVsdHMgdG8gdGhlIHN0cmluZyBcIi9leHQvbWV0cmljc1wiIGFzIHRoZSBwYXRoIHRvIGJsb2NrY2hhaW4ncyBiYXNldXJsXG4gICAgICovXG4gIGNvbnN0cnVjdG9yKGNvcmU6QXZhbGFuY2hlQ29yZSwgYmFzZXVybDpzdHJpbmcgPSAnL2V4dC9tZXRyaWNzJykgeyBzdXBlcihjb3JlLCBiYXNldXJsKTsgfVxufVxuXG4iXX0=","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PlatformVMAPI = void 0;\n/**\n * @packageDocumentation\n * @module API-PlatformVM\n */\nconst buffer_1 = require(\"buffer/\");\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst jrpcapi_1 = require(\"../../common/jrpcapi\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst keychain_1 = require(\"./keychain\");\nconst constants_1 = require(\"../../utils/constants\");\nconst constants_2 = require(\"./constants\");\nconst tx_1 = require(\"./tx\");\nconst payload_1 = require(\"../../utils/payload\");\nconst helperfunctions_1 = require(\"../../utils/helperfunctions\");\nconst utxos_1 = require(\"../platformvm/utxos\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\n/**\n * Class for interacting with a node's PlatformVMAPI\n *\n * @category RPCAPIs\n *\n * @remarks This extends the [[JRPCAPI]] class. This class should not be directly called. Instead, use the [[Avalanche.addAPI]] function to register this interface with Avalanche.\n */\nclass PlatformVMAPI extends jrpcapi_1.JRPCAPI {\n    /**\n     * This class should not be instantiated directly.\n     * Instead use the [[Avalanche.addAPI]] method.\n     *\n     * @param core A reference to the Avalanche class\n     * @param baseurl Defaults to the string \"/ext/P\" as the path to blockchain's baseurl\n     */\n    constructor(core, baseurl = '/ext/bc/P') {\n        super(core, baseurl);\n        /**\n         * @ignore\n         */\n        this.keychain = new keychain_1.KeyChain('', '');\n        this.blockchainID = constants_1.PlatformChainID;\n        this.blockchainAlias = undefined;\n        this.AVAXAssetID = undefined;\n        this.txFee = undefined;\n        this.creationTxFee = undefined;\n        this.minValidatorStake = undefined;\n        this.minDelegatorStake = undefined;\n        /**\n         * Gets the alias for the blockchainID if it exists, otherwise returns `undefined`.\n         *\n         * @returns The alias for the blockchainID\n         */\n        this.getBlockchainAlias = () => {\n            if (typeof this.blockchainAlias === \"undefined\") {\n                const netid = this.core.getNetworkID();\n                if (netid in constants_1.Defaults.network && this.blockchainID in constants_1.Defaults.network[netid]) {\n                    this.blockchainAlias = constants_1.Defaults.network[netid][this.blockchainID].alias;\n                    return this.blockchainAlias;\n                }\n                else {\n                    /* istanbul ignore next */\n                    return undefined;\n                }\n            }\n            return this.blockchainAlias;\n        };\n        /**\n         * Sets the alias for the blockchainID.\n         *\n         * @param alias The alias for the blockchainID.\n         *\n         */\n        this.setBlockchainAlias = (alias) => {\n            this.blockchainAlias = alias;\n            /* istanbul ignore next */\n            return undefined;\n        };\n        /**\n         * Gets the blockchainID and returns it.\n         *\n         * @returns The blockchainID\n         */\n        this.getBlockchainID = () => this.blockchainID;\n        /**\n         * Refresh blockchainID, and if a blockchainID is passed in, use that.\n         *\n         * @param Optional. BlockchainID to assign, if none, uses the default based on networkID.\n         *\n         * @returns The blockchainID\n         */\n        this.refreshBlockchainID = (blockchainID = undefined) => {\n            const netid = this.core.getNetworkID();\n            if (typeof blockchainID === 'undefined' && typeof constants_1.Defaults.network[netid] !== \"undefined\") {\n                this.blockchainID = constants_1.PlatformChainID; //default to P-Chain\n                return true;\n            }\n            if (typeof blockchainID === 'string') {\n                this.blockchainID = blockchainID;\n                return true;\n            }\n            return false;\n        };\n        /**\n         * Takes an address string and returns its {@link https://github.com/feross/buffer|Buffer} representation if valid.\n         *\n         * @returns A {@link https://github.com/feross/buffer|Buffer} for the address if valid, undefined if not valid.\n         */\n        this.parseAddress = (addr) => {\n            const alias = this.getBlockchainAlias();\n            const blockchainID = this.getBlockchainID();\n            return bintools.parseAddress(addr, blockchainID, alias, constants_2.PlatformVMConstants.ADDRESSLENGTH);\n        };\n        this.addressFromBuffer = (address) => {\n            const chainid = this.getBlockchainAlias() ? this.getBlockchainAlias() : this.getBlockchainID();\n            return bintools.addressToString(this.core.getHRP(), chainid, address);\n        };\n        /**\n         * Fetches the AVAX AssetID and returns it in a Promise.\n         *\n         * @param refresh This function caches the response. Refresh = true will bust the cache.\n         *\n         * @returns The the provided string representing the AVAX AssetID\n         */\n        this.getAVAXAssetID = (refresh = false) => __awaiter(this, void 0, void 0, function* () {\n            if (typeof this.AVAXAssetID === 'undefined' || refresh) {\n                const assetID = yield this.getStakingAssetID();\n                this.AVAXAssetID = bintools.cb58Decode(assetID);\n            }\n            return this.AVAXAssetID;\n        });\n        /**\n         * Overrides the defaults and sets the cache to a specific AVAX AssetID\n         *\n         * @param avaxAssetID A cb58 string or Buffer representing the AVAX AssetID\n         *\n         * @returns The the provided string representing the AVAX AssetID\n         */\n        this.setAVAXAssetID = (avaxAssetID) => {\n            if (typeof avaxAssetID === \"string\") {\n                avaxAssetID = bintools.cb58Decode(avaxAssetID);\n            }\n            this.AVAXAssetID = avaxAssetID;\n        };\n        /**\n         * Gets the default tx fee for this chain.\n         *\n         * @returns The default tx fee as a {@link https://github.com/indutny/bn.js/|BN}\n         */\n        this.getDefaultTxFee = () => {\n            return this.core.getNetworkID() in constants_1.Defaults.network ? new bn_js_1.default(constants_1.Defaults.network[this.core.getNetworkID()][\"P\"][\"txFee\"]) : new bn_js_1.default(0);\n        };\n        /**\n         * Gets the tx fee for this chain.\n         *\n         * @returns The tx fee as a {@link https://github.com/indutny/bn.js/|BN}\n         */\n        this.getTxFee = () => {\n            if (typeof this.txFee === \"undefined\") {\n                this.txFee = this.getDefaultTxFee();\n            }\n            return this.txFee;\n        };\n        /**\n         * Sets the tx fee for this chain.\n         *\n         * @param fee The tx fee amount to set as {@link https://github.com/indutny/bn.js/|BN}\n         */\n        this.setTxFee = (fee) => {\n            this.txFee = fee;\n        };\n        /**\n         * Gets the default creation fee for this chain.\n         *\n         * @returns The default creation fee as a {@link https://github.com/indutny/bn.js/|BN}\n         */\n        this.getDefaultCreationTxFee = () => {\n            return this.core.getNetworkID() in constants_1.Defaults.network ? new bn_js_1.default(constants_1.Defaults.network[this.core.getNetworkID()][\"P\"][\"creationTxFee\"]) : new bn_js_1.default(0);\n        };\n        /**\n         * Gets the creation fee for this chain.\n         *\n         * @returns The creation fee as a {@link https://github.com/indutny/bn.js/|BN}\n         */\n        this.getCreationTxFee = () => {\n            if (typeof this.creationTxFee === \"undefined\") {\n                this.creationTxFee = this.getDefaultCreationTxFee();\n            }\n            return this.creationTxFee;\n        };\n        /**\n         * Sets the creation fee for this chain.\n         *\n         * @param fee The creation fee amount to set as {@link https://github.com/indutny/bn.js/|BN}\n         */\n        this.setCreationTxFee = (fee) => {\n            this.creationTxFee = fee;\n        };\n        /**\n         * Gets a reference to the keychain for this class.\n         *\n         * @returns The instance of [[]] for this class\n         */\n        this.keyChain = () => this.keychain;\n        /**\n         * @ignore\n         */\n        this.newKeyChain = () => {\n            // warning, overwrites the old keychain\n            const alias = this.getBlockchainAlias();\n            if (alias) {\n                this.keychain = new keychain_1.KeyChain(this.core.getHRP(), alias);\n            }\n            else {\n                this.keychain = new keychain_1.KeyChain(this.core.getHRP(), this.blockchainID);\n            }\n            return this.keychain;\n        };\n        /**\n         * Helper function which determines if a tx is a goose egg transaction.\n         *\n         * @param utx An UnsignedTx\n         *\n         * @returns boolean true if passes goose egg test and false if fails.\n         *\n         * @remarks\n         * A \"Goose Egg Transaction\" is when the fee far exceeds a reasonable amount\n         */\n        this.checkGooseEgg = (utx, outTotal = new bn_js_1.default(0)) => __awaiter(this, void 0, void 0, function* () {\n            const avaxAssetID = yield this.getAVAXAssetID();\n            let outputTotal = outTotal.gt(new bn_js_1.default(0)) ? outTotal : utx.getOutputTotal(avaxAssetID);\n            const fee = utx.getBurn(avaxAssetID);\n            if (fee.lte(constants_1.ONEAVAX.mul(new bn_js_1.default(10))) || fee.lte(outputTotal)) {\n                return true;\n            }\n            else {\n                return false;\n            }\n        });\n        /**\n         * Retrieves an assetID for a subnet's staking assset.\n         *\n         * @returns Returns a Promise<string> with cb58 encoded value of the assetID.\n         */\n        this.getStakingAssetID = () => __awaiter(this, void 0, void 0, function* () {\n            const params = {};\n            return this.callMethod('platform.getStakingAssetID', params).then((response) => (response.data.result.assetID));\n        });\n        /**\n         * Creates a new blockchain.\n         *\n         * @param username The username of the Keystore user that controls the new account\n         * @param password The password of the Keystore user that controls the new account\n         * @param subnetID Optional. Either a {@link https://github.com/feross/buffer|Buffer} or an cb58 serialized string for the SubnetID or its alias.\n         * @param vmID The ID of the Virtual Machine the blockchain runs. Can also be an alias of the Virtual Machine.\n         * @param FXIDs The ids of the FXs the VM is running.\n         * @param name A human-readable name for the new blockchain\n         * @param genesis The base 58 (with checksum) representation of the genesis state of the new blockchain. Virtual Machines should have a static API method named buildGenesis that can be used to generate genesisData.\n         *\n         * @returns Promise for the unsigned transaction to create this blockchain. Must be signed by a sufficient number of the Subnet’s control keys and by the account paying the transaction fee.\n         */\n        this.createBlockchain = (username, password, subnetID = undefined, vmID, fxIDs, name, genesis) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password,\n                fxIDs,\n                vmID,\n                name,\n                genesisData: genesis,\n            };\n            if (typeof subnetID === 'string') {\n                params.subnetID = subnetID;\n            }\n            else if (typeof subnetID !== 'undefined') {\n                params.subnetID = bintools.cb58Encode(subnetID);\n            }\n            return this.callMethod('platform.createBlockchain', params)\n                .then((response) => response.data.result.txID);\n        });\n        /**\n         * Gets the status of a blockchain.\n         *\n         * @param blockchainID The blockchainID requesting a status update\n         *\n         * @returns Promise for a string of one of: \"Validating\", \"Created\", \"Preferred\", \"Unknown\".\n         */\n        this.getBlockchainStatus = (blockchainID) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                blockchainID,\n            };\n            return this.callMethod('platform.getBlockchainStatus', params)\n                .then((response) => response.data.result.status);\n        });\n        /**\n         * Create an address in the node's keystore.\n         *\n         * @param username The username of the Keystore user that controls the new account\n         * @param password The password of the Keystore user that controls the new account\n         *\n         * @returns Promise for a string of the newly created account address.\n         */\n        this.createAddress = (username, password) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password,\n            };\n            return this.callMethod('platform.createAddress', params)\n                .then((response) => response.data.result.address);\n        });\n        /**\n         * Gets the balance of a particular asset.\n         *\n         * @param address The address to pull the asset balance from\n         *\n         * @returns Promise with the balance as a {@link https://github.com/indutny/bn.js/|BN} on the provided address.\n         */\n        this.getBalance = (address) => __awaiter(this, void 0, void 0, function* () {\n            if (typeof this.parseAddress(address) === 'undefined') {\n                /* istanbul ignore next */\n                throw new Error(`Error - PlatformVMAPI.getBalance: Invalid address format ${address}`);\n            }\n            const params = {\n                address\n            };\n            return this.callMethod('platform.getBalance', params).then((response) => response.data.result);\n        });\n        /**\n         * List the addresses controlled by the user.\n         *\n         * @param username The username of the Keystore user\n         * @param password The password of the Keystore user\n         *\n         * @returns Promise for an array of addresses.\n         */\n        this.listAddresses = (username, password) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password,\n            };\n            return this.callMethod('platform.listAddresses', params)\n                .then((response) => response.data.result.addresses);\n        });\n        /**\n         * Lists the set of current validators.\n         *\n         * @param subnetID Optional. Either a {@link https://github.com/feross/buffer|Buffer} or an\n         * cb58 serialized string for the SubnetID or its alias.\n         *\n         * @returns Promise for an array of validators that are currently staking, see: {@link https://docs.avax.network/v1.0/en/api/platform/#platformgetcurrentvalidators|platform.getCurrentValidators documentation}.\n         *\n         */\n        this.getCurrentValidators = (subnetID = undefined) => __awaiter(this, void 0, void 0, function* () {\n            const params = {};\n            if (typeof subnetID === 'string') {\n                params.subnetID = subnetID;\n            }\n            else if (typeof subnetID !== 'undefined') {\n                params.subnetID = bintools.cb58Encode(subnetID);\n            }\n            return this.callMethod('platform.getCurrentValidators', params)\n                .then((response) => response.data.result);\n        });\n        /**\n         * Lists the set of pending validators.\n         *\n         * @param subnetID Optional. Either a {@link https://github.com/feross/buffer|Buffer}\n         * or a cb58 serialized string for the SubnetID or its alias.\n         *\n         * @returns Promise for an array of validators that are pending staking, see: {@link https://docs.avax.network/v1.0/en/api/platform/#platformgetpendingvalidators|platform.getPendingValidators documentation}.\n         *\n         */\n        this.getPendingValidators = (subnetID = undefined) => __awaiter(this, void 0, void 0, function* () {\n            const params = {};\n            if (typeof subnetID === 'string') {\n                params.subnetID = subnetID;\n            }\n            else if (typeof subnetID !== 'undefined') {\n                params.subnetID = bintools.cb58Encode(subnetID);\n            }\n            return this.callMethod('platform.getPendingValidators', params)\n                .then((response) => response.data.result);\n        });\n        /**\n         * Samples `Size` validators from the current validator set.\n         *\n         * @param sampleSize Of the total universe of validators, select this many at random\n         * @param subnetID Optional. Either a {@link https://github.com/feross/buffer|Buffer} or an\n         * cb58 serialized string for the SubnetID or its alias.\n         *\n         * @returns Promise for an array of validator's stakingIDs.\n         */\n        this.sampleValidators = (sampleSize, subnetID = undefined) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                size: sampleSize.toString(),\n            };\n            if (typeof subnetID === 'string') {\n                params.subnetID = subnetID;\n            }\n            else if (typeof subnetID !== 'undefined') {\n                params.subnetID = bintools.cb58Encode(subnetID);\n            }\n            return this.callMethod('platform.sampleValidators', params)\n                .then((response) => response.data.result.validators);\n        });\n        /**\n         * Add a validator to the Primary Network.\n         *\n         * @param username The username of the Keystore user\n         * @param password The password of the Keystore user\n         * @param nodeID The node ID of the validator\n         * @param startTime Javascript Date object for the start time to validate\n         * @param endTime Javascript Date object for the end time to validate\n         * @param stakeAmount The amount of nAVAX the validator is staking as\n         * a {@link https://github.com/indutny/bn.js/|BN}\n         * @param rewardAddress The address the validator reward will go to, if there is one.\n         * @param delegationFeeRate Optional. A {@link https://github.com/indutny/bn.js/|BN} for the percent fee this validator\n         * charges when others delegate stake to them. Up to 4 decimal places allowed; additional decimal places are ignored.\n         * Must be between 0 and 100, inclusive. For example, if delegationFeeRate is 1.2345 and someone delegates to this\n         * validator, then when the delegation period is over, 1.2345% of the reward goes to the validator and the rest goes\n         * to the delegator.\n         *\n         * @returns Promise for a base58 string of the unsigned transaction.\n         */\n        this.addValidator = (username, password, nodeID, startTime, endTime, stakeAmount, rewardAddress, delegationFeeRate = undefined) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password,\n                nodeID,\n                startTime: startTime.getTime() / 1000,\n                endTime: endTime.getTime() / 1000,\n                stakeAmount: stakeAmount.toString(10),\n                rewardAddress,\n            };\n            if (typeof delegationFeeRate !== 'undefined') {\n                params.delegationFeeRate = delegationFeeRate.toString(10);\n            }\n            return this.callMethod('platform.addValidator', params)\n                .then((response) => response.data.result.txID);\n        });\n        /**\n         * Add a validator to a Subnet other than the Primary Network. The validator must validate the Primary Network for the entire duration they validate this Subnet.\n         *\n         * @param username The username of the Keystore user\n         * @param password The password of the Keystore user\n         * @param nodeID The node ID of the validator\n         * @param subnetID Either a {@link https://github.com/feross/buffer|Buffer} or a cb58 serialized string for the SubnetID or its alias.\n         * @param startTime Javascript Date object for the start time to validate\n         * @param endTime Javascript Date object for the end time to validate\n         * @param weight The validator’s weight used for sampling\n         *\n         * @returns Promise for the unsigned transaction. It must be signed (using sign) by the proper number of the Subnet’s control keys and by the key of the account paying the transaction fee before it can be issued.\n         */\n        this.addSubnetValidator = (username, password, nodeID, subnetID, startTime, endTime, weight) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password,\n                nodeID,\n                startTime: startTime.getTime() / 1000,\n                endTime: endTime.getTime() / 1000,\n                weight\n            };\n            if (typeof subnetID === 'string') {\n                params.subnetID = subnetID;\n            }\n            else if (typeof subnetID !== 'undefined') {\n                params.subnetID = bintools.cb58Encode(subnetID);\n            }\n            return this.callMethod('platform.addSubnetValidator', params)\n                .then((response) => response.data.result.txID);\n        });\n        /**\n         * Add a delegator to the Primary Network.\n         *\n         * @param username The username of the Keystore user\n         * @param password The password of the Keystore user\n         * @param nodeID The node ID of the delegatee\n         * @param startTime Javascript Date object for when the delegator starts delegating\n         * @param endTime Javascript Date object for when the delegator starts delegating\n         * @param stakeAmount The amount of nAVAX the delegator is staking as\n         * a {@link https://github.com/indutny/bn.js/|BN}\n         * @param rewardAddress The address of the account the staked AVAX and validation reward\n         * (if applicable) are sent to at endTime\n         *\n         * @returns Promise for an array of validator's stakingIDs.\n         */\n        this.addDelegator = (username, password, nodeID, startTime, endTime, stakeAmount, rewardAddress) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password,\n                nodeID,\n                startTime: startTime.getTime() / 1000,\n                endTime: endTime.getTime() / 1000,\n                stakeAmount: stakeAmount.toString(10),\n                rewardAddress,\n            };\n            return this.callMethod('platform.addDelegator', params)\n                .then((response) => response.data.result.txID);\n        });\n        /**\n         * Create an unsigned transaction to create a new Subnet. The unsigned transaction must be\n         * signed with the key of the account paying the transaction fee. The Subnet’s ID is the ID of the transaction that creates it (ie the response from issueTx when issuing the signed transaction).\n         *\n         * @param username The username of the Keystore user\n         * @param password The password of the Keystore user\n         * @param controlKeys Array of platform addresses as strings\n         * @param threshold To add a validator to this Subnet, a transaction must have threshold\n         * signatures, where each signature is from a key whose address is an element of `controlKeys`\n         *\n         * @returns Promise for a string with the unsigned transaction encoded as base58.\n         */\n        this.createSubnet = (username, password, controlKeys, threshold) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password,\n                controlKeys,\n                threshold\n            };\n            return this.callMethod('platform.createSubnet', params)\n                .then((response) => response.data.result.txID);\n        });\n        /**\n         * Get the Subnet that validates a given blockchain.\n         *\n         * @param blockchainID Either a {@link https://github.com/feross/buffer|Buffer} or a cb58\n         * encoded string for the blockchainID or its alias.\n         *\n         * @returns Promise for a string of the subnetID that validates the blockchain.\n         */\n        this.validatedBy = (blockchainID) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                blockchainID,\n            };\n            return this.callMethod('platform.validatedBy', params)\n                .then((response) => response.data.result.subnetID);\n        });\n        /**\n         * Get the IDs of the blockchains a Subnet validates.\n         *\n         * @param subnetID Either a {@link https://github.com/feross/buffer|Buffer} or an AVAX\n         * serialized string for the SubnetID or its alias.\n         *\n         * @returns Promise for an array of blockchainIDs the subnet validates.\n         */\n        this.validates = (subnetID) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                subnetID,\n            };\n            if (typeof subnetID === 'string') {\n                params.subnetID = subnetID;\n            }\n            else if (typeof subnetID !== 'undefined') {\n                params.subnetID = bintools.cb58Encode(subnetID);\n            }\n            return this.callMethod('platform.validates', params)\n                .then((response) => response.data.result.blockchainIDs);\n        });\n        /**\n         * Get all the blockchains that exist (excluding the P-Chain).\n         *\n         * @returns Promise for an array of objects containing fields \"id\", \"subnetID\", and \"vmID\".\n         */\n        this.getBlockchains = () => __awaiter(this, void 0, void 0, function* () {\n            const params = {};\n            return this.callMethod('platform.getBlockchains', params)\n                .then((response) => response.data.result.blockchains);\n        });\n        /**\n         * Send AVAX from an account on the P-Chain to an address on the X-Chain. This transaction\n         * must be signed with the key of the account that the AVAX is sent from and which pays the\n         * transaction fee. After issuing this transaction, you must call the X-Chain’s importAVAX\n         * method to complete the transfer.\n         *\n         * @param username The Keystore user that controls the account specified in `to`\n         * @param password The password of the Keystore user\n         * @param to The address on the X-Chain to send the AVAX to. Do not include X- in the address\n         * @param amount Amount of AVAX to export as a {@link https://github.com/indutny/bn.js/|BN}\n         *\n         * @returns Promise for an unsigned transaction to be signed by the account the the AVAX is\n         * sent from and pays the transaction fee.\n         */\n        this.exportAVAX = (username, password, amount, to) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password,\n                to,\n                amount: amount.toString(10)\n            };\n            return this.callMethod('platform.exportAVAX', params)\n                .then((response) => response.data.result.txID);\n        });\n        /**\n         * Send AVAX from an account on the P-Chain to an address on the X-Chain. This transaction\n         * must be signed with the key of the account that the AVAX is sent from and which pays\n         * the transaction fee. After issuing this transaction, you must call the X-Chain’s\n         * importAVAX method to complete the transfer.\n         *\n         * @param username The Keystore user that controls the account specified in `to`\n         * @param password The password of the Keystore user\n         * @param to The ID of the account the AVAX is sent to. This must be the same as the to\n         * argument in the corresponding call to the X-Chain’s exportAVAX\n         * @param sourceChain The chainID where the funds are coming from.\n         *\n         * @returns Promise for a string for the transaction, which should be sent to the network\n         * by calling issueTx.\n         */\n        this.importAVAX = (username, password, to, sourceChain) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                to,\n                sourceChain,\n                username,\n                password,\n            };\n            return this.callMethod('platform.importAVAX', params)\n                .then((response) => response.data.result.txID);\n        });\n        /**\n         * Calls the node's issueTx method from the API and returns the resulting transaction ID as a string.\n         *\n         * @param tx A string, {@link https://github.com/feross/buffer|Buffer}, or [[Tx]] representing a transaction\n         *\n         * @returns A Promise<string> representing the transaction ID of the posted transaction.\n         */\n        this.issueTx = (tx) => __awaiter(this, void 0, void 0, function* () {\n            let Transaction = '';\n            if (typeof tx === 'string') {\n                Transaction = tx;\n            }\n            else if (tx instanceof buffer_1.Buffer) {\n                const txobj = new tx_1.Tx();\n                txobj.fromBuffer(tx);\n                Transaction = txobj.toString();\n            }\n            else if (tx instanceof tx_1.Tx) {\n                Transaction = tx.toString();\n            }\n            else {\n                /* istanbul ignore next */\n                throw new Error('Error - platform.issueTx: provided tx is not expected type of string, Buffer, or Tx');\n            }\n            const params = {\n                tx: Transaction.toString(),\n            };\n            return this.callMethod('platform.issueTx', params).then((response) => response.data.result.txID);\n        });\n        /**\n         * Returns an upper bound on the amount of tokens that exist. Not monotonically increasing because this number can go down if a staker's reward is denied.\n         */\n        this.getCurrentSupply = () => __awaiter(this, void 0, void 0, function* () {\n            const params = {};\n            return this.callMethod('platform.getCurrentSupply', params)\n                .then((response) => new bn_js_1.default(response.data.result.supply, 10));\n        });\n        /**\n         * Returns the height of the platform chain.\n         */\n        this.getHeight = () => __awaiter(this, void 0, void 0, function* () {\n            const params = {};\n            return this.callMethod('platform.getHeight', params)\n                .then((response) => new bn_js_1.default(response.data.result.height, 10));\n        });\n        /**\n         * Gets the minimum staking amount.\n         *\n         * @param refresh A boolean to bypass the local cached value of Minimum Stake Amount, polling the node instead.\n         */\n        this.getMinStake = (refresh = false) => __awaiter(this, void 0, void 0, function* () {\n            if (refresh !== true && typeof this.minValidatorStake !== \"undefined\" && typeof this.minDelegatorStake !== \"undefined\") {\n                return {\n                    minValidatorStake: this.minValidatorStake,\n                    minDelegatorStake: this.minDelegatorStake\n                };\n            }\n            const params = {};\n            return this.callMethod('platform.getMinStake', params)\n                .then((response) => {\n                this.minValidatorStake = new bn_js_1.default(response.data.result.minValidatorStake, 10);\n                this.minDelegatorStake = new bn_js_1.default(response.data.result.minDelegatorStake, 10);\n                return {\n                    minValidatorStake: this.minValidatorStake,\n                    minDelegatorStake: this.minDelegatorStake\n                };\n            });\n        });\n        /**\n         * Sets the minimum stake cached in this class.\n         * @param minValidatorStake A {@link https://github.com/indutny/bn.js/|BN} to set the minimum stake amount cached in this class.\n         * @param minDelegatorStake A {@link https://github.com/indutny/bn.js/|BN} to set the minimum delegation amount cached in this class.\n         */\n        this.setMinStake = (minValidatorStake = undefined, minDelegatorStake = undefined) => {\n            if (typeof minValidatorStake !== \"undefined\") {\n                this.minValidatorStake = minValidatorStake;\n            }\n            if (typeof minDelegatorStake !== \"undefined\") {\n                this.minDelegatorStake = minDelegatorStake;\n            }\n        };\n        /**\n         * Gets the total amount staked for an array of addresses.\n         */\n        this.getStake = (addresses) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                addresses\n            };\n            return this.callMethod('platform.getStake', params)\n                .then((response) => new bn_js_1.default(response.data.result.staked, 10));\n        });\n        /**\n         * Get all the subnets that exist.\n         *\n         * @param ids IDs of the subnets to retrieve information about. If omitted, gets all subnets\n         *\n         * @returns Promise for an array of objects containing fields \"id\",\n         * \"controlKeys\", and \"threshold\".\n         */\n        this.getSubnets = (ids = undefined) => __awaiter(this, void 0, void 0, function* () {\n            const params = {};\n            if (typeof ids !== undefined) {\n                params.ids = ids;\n            }\n            return this.callMethod('platform.getSubnets', params)\n                .then((response) => response.data.result.subnets);\n        });\n        /**\n         * Exports the private key for an address.\n         *\n         * @param username The name of the user with the private key\n         * @param password The password used to decrypt the private key\n         * @param address The address whose private key should be exported\n         *\n         * @returns Promise with the decrypted private key as store in the database\n         */\n        this.exportKey = (username, password, address) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password,\n                address,\n            };\n            return this.callMethod('platform.exportKey', params)\n                .then((response) => response.data.result.privateKey);\n        });\n        /**\n         * Give a user control over an address by providing the private key that controls the address.\n         *\n         * @param username The name of the user to store the private key\n         * @param password The password that unlocks the user\n         * @param privateKey A string representing the private key in the vm's format\n         *\n         * @returns The address for the imported private key.\n         */\n        this.importKey = (username, password, privateKey) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password,\n                privateKey,\n            };\n            return this.callMethod('platform.importKey', params)\n                .then((response) => response.data.result.address);\n        });\n        /**\n         * Returns the treansaction data of a provided transaction ID by calling the node's `getTx` method.\n         *\n         * @param txid The string representation of the transaction ID\n         *\n         * @returns Returns a Promise<string> containing the bytes retrieved from the node\n         */\n        this.getTx = (txid) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                txID: txid,\n            };\n            return this.callMethod('platform.getTx', params).then((response) => response.data.result.tx);\n        });\n        /**\n         * Returns the status of a provided transaction ID by calling the node's `getTxStatus` method.\n         *\n         * @param txid The string representation of the transaction ID\n         * @param includeReason Return the reason tx was dropped, if applicable. Defaults to true\n         *\n         * @returns Returns a Promise<string> containing the status retrieved from the node and the reason a tx was dropped, if applicable.\n         */\n        this.getTxStatus = (txid, includeReason = true) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                txID: txid,\n                includeReason: includeReason\n            };\n            return this.callMethod('platform.getTxStatus', params).then((response) => response.data.result);\n        });\n        /**\n         * Retrieves the UTXOs related to the addresses provided from the node's `getUTXOs` method.\n         *\n         * @param addresses An array of addresses as cb58 strings or addresses as {@link https://github.com/feross/buffer|Buffer}s\n         * @param sourceChain A string for the chain to look for the UTXO's. Default is to use this chain, but if exported UTXOs exist from other chains, this can used to pull them instead.\n         * @param limit Optional. Returns at most [limit] addresses. If [limit] == 0 or > [maxUTXOsToFetch], fetches up to [maxUTXOsToFetch].\n         * @param startIndex Optional. [StartIndex] defines where to start fetching UTXOs (for pagination.)\n         * UTXOs fetched are from addresses equal to or greater than [StartIndex.Address]\n         * For address [StartIndex.Address], only UTXOs with IDs greater than [StartIndex.Utxo] will be returned.\n         * @param persistOpts Options available to persist these UTXOs in local storage\n         *\n         * @remarks\n         * persistOpts is optional and must be of type [[PersistanceOptions]]\n         *\n         */\n        this.getUTXOs = (addresses, sourceChain = undefined, limit = 0, startIndex = undefined, persistOpts = undefined) => __awaiter(this, void 0, void 0, function* () {\n            if (typeof addresses === \"string\") {\n                addresses = [addresses];\n            }\n            const params = {\n                addresses: addresses,\n                limit\n            };\n            if (typeof startIndex !== \"undefined\" && startIndex) {\n                params.startIndex = startIndex;\n            }\n            if (typeof sourceChain !== \"undefined\") {\n                params.sourceChain = sourceChain;\n            }\n            return this.callMethod('platform.getUTXOs', params).then((response) => {\n                const utxos = new utxos_1.UTXOSet();\n                let data = response.data.result.utxos;\n                if (persistOpts && typeof persistOpts === 'object') {\n                    if (this.db.has(persistOpts.getName())) {\n                        const selfArray = this.db.get(persistOpts.getName());\n                        if (Array.isArray(selfArray)) {\n                            utxos.addArray(data);\n                            const self = new utxos_1.UTXOSet();\n                            self.addArray(selfArray);\n                            self.mergeByRule(utxos, persistOpts.getMergeRule());\n                            data = self.getAllUTXOStrings();\n                        }\n                    }\n                    this.db.set(persistOpts.getName(), data, persistOpts.getOverwrite());\n                }\n                utxos.addArray(data, false);\n                response.data.result.utxos = utxos;\n                return response.data.result;\n            });\n        });\n        /**\n         * Helper function which creates an unsigned Import Tx. For more granular control, you may create your own\n         * [[UnsignedTx]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s, and [[TransferOperation]]s).\n         *\n         * @param utxoset A set of UTXOs that the transaction is built on\n         * @param ownerAddresses The addresses being used to import\n         * @param sourceChain The chainid for where the import is coming from.\n         * @param toAddresses The addresses to send the funds\n         * @param fromAddresses The addresses being used to send the funds from the UTXOs provided\n         * @param changeAddresses The addresses that can spend the change remaining from the spent UTXOs\n         * @param memo Optional contains arbitrary bytes, up to 256 bytes\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         * @param locktime Optional. The locktime field created in the resulting outputs\n         * @param threshold Optional. The number of signatures required to spend the funds in the resultant UTXO\n         *\n         * @returns An unsigned transaction ([[UnsignedTx]]) which contains a [[ImportTx]].\n         *\n         * @remarks\n         * This helper exists because the endpoint API should be the primary point of entry for most functionality.\n         */\n        this.buildImportTx = (utxoset, ownerAddresses, sourceChain, toAddresses, fromAddresses, changeAddresses = undefined, memo = undefined, asOf = helperfunctions_1.UnixNow(), locktime = new bn_js_1.default(0), threshold = 1) => __awaiter(this, void 0, void 0, function* () {\n            const to = this._cleanAddressArray(toAddresses, 'buildBaseTx').map((a) => bintools.stringToAddress(a));\n            const from = this._cleanAddressArray(fromAddresses, 'buildBaseTx').map((a) => bintools.stringToAddress(a));\n            const change = this._cleanAddressArray(changeAddresses, 'buildBaseTx').map((a) => bintools.stringToAddress(a));\n            let srcChain = undefined;\n            if (typeof sourceChain === \"undefined\") {\n                throw new Error(\"Error - PlatformVMAPI.buildImportTx: Source ChainID is undefined.\");\n            }\n            else if (typeof sourceChain === \"string\") {\n                srcChain = sourceChain;\n                sourceChain = bintools.cb58Decode(sourceChain);\n            }\n            else if (!(sourceChain instanceof buffer_1.Buffer)) {\n                srcChain = bintools.cb58Encode(sourceChain);\n                throw new Error(\"Error - PlatformVMAPI.buildImportTx: Invalid destinationChain type: \" + (typeof sourceChain));\n            }\n            const atomicUTXOs = yield (yield this.getUTXOs(ownerAddresses, srcChain, 0, undefined)).utxos;\n            const avaxAssetID = yield this.getAVAXAssetID();\n            if (memo instanceof payload_1.PayloadBase) {\n                memo = memo.getPayload();\n            }\n            const atomics = atomicUTXOs.getAllUTXOs();\n            const builtUnsignedTx = utxoset.buildImportTx(this.core.getNetworkID(), bintools.cb58Decode(this.blockchainID), to, from, change, atomics, sourceChain, this.getTxFee(), avaxAssetID, memo, asOf, locktime, threshold);\n            if (!(yield this.checkGooseEgg(builtUnsignedTx))) {\n                /* istanbul ignore next */\n                throw new Error(\"Failed Goose Egg Check\");\n            }\n            return builtUnsignedTx;\n        });\n        /**\n         * Helper function which creates an unsigned Export Tx. For more granular control, you may create your own\n         * [[UnsignedTx]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s, and [[TransferOperation]]s).\n         *\n         * @param utxoset A set of UTXOs that the transaction is built on\n         * @param amount The amount being exported as a {@link https://github.com/indutny/bn.js/|BN}\n         * @param destinationChain The chainid for where the assets will be sent.\n         * @param toAddresses The addresses to send the funds\n         * @param fromAddresses The addresses being used to send the funds from the UTXOs provided\n         * @param changeAddresses The addresses that can spend the change remaining from the spent UTXOs\n         * @param memo Optional contains arbitrary bytes, up to 256 bytes\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         * @param locktime Optional. The locktime field created in the resulting outputs\n         * @param threshold Optional. The number of signatures required to spend the funds in the resultant UTXO\n         *\n         * @returns An unsigned transaction ([[UnsignedTx]]) which contains an [[ExportTx]].\n         */\n        this.buildExportTx = (utxoset, amount, destinationChain, toAddresses, fromAddresses, changeAddresses = undefined, memo = undefined, asOf = helperfunctions_1.UnixNow(), locktime = new bn_js_1.default(0), threshold = 1) => __awaiter(this, void 0, void 0, function* () {\n            let prefixes = {};\n            toAddresses.map((a) => {\n                prefixes[a.split(\"-\")[0]] = true;\n            });\n            if (Object.keys(prefixes).length !== 1) {\n                throw new Error(\"Error - PlatformVMAPI.buildExportTx: To addresses must have the same chainID prefix.\");\n            }\n            if (typeof destinationChain === \"undefined\") {\n                throw new Error(\"Error - PlatformVMAPI.buildExportTx: Destination ChainID is undefined.\");\n            }\n            else if (typeof destinationChain === \"string\") {\n                destinationChain = bintools.cb58Decode(destinationChain); //\n            }\n            else if (!(destinationChain instanceof buffer_1.Buffer)) {\n                throw new Error(\"Error - PlatformVMAPI.buildExportTx: Invalid destinationChain type: \" + (typeof destinationChain));\n            }\n            if (destinationChain.length !== 32) {\n                throw new Error(\"Error - PlatformVMAPI.buildExportTx: Destination ChainID must be 32 bytes in length.\");\n            }\n            /*\n            if(bintools.cb58Encode(destinationChain) !== Defaults.network[this.core.getNetworkID()].X[\"blockchainID\"]) {\n              throw new Error(\"Error - PlatformVMAPI.buildExportTx: Destination ChainID must The X-Chain ID in the current version of AvalancheJS.\");\n            }*/\n            let to = [];\n            toAddresses.map((a) => {\n                to.push(bintools.stringToAddress(a));\n            });\n            const from = this._cleanAddressArray(fromAddresses, 'buildExportTx').map((a) => bintools.stringToAddress(a));\n            const change = this._cleanAddressArray(changeAddresses, 'buildExportTx').map((a) => bintools.stringToAddress(a));\n            if (memo instanceof payload_1.PayloadBase) {\n                memo = memo.getPayload();\n            }\n            const avaxAssetID = yield this.getAVAXAssetID();\n            const builtUnsignedTx = utxoset.buildExportTx(this.core.getNetworkID(), bintools.cb58Decode(this.blockchainID), amount, avaxAssetID, to, from, change, destinationChain, this.getTxFee(), avaxAssetID, memo, asOf, locktime, threshold);\n            if (!(yield this.checkGooseEgg(builtUnsignedTx))) {\n                /* istanbul ignore next */\n                throw new Error(\"Failed Goose Egg Check\");\n            }\n            return builtUnsignedTx;\n        });\n        /**\n        * Helper function which creates an unsigned [[AddSubnetValidatorTx]]. For more granular control, you may create your own\n        * [[UnsignedTx]] manually and import the [[AddSubnetValidatorTx]] class directly.\n        *\n        * @param utxoset A set of UTXOs that the transaction is built on.\n        * @param fromAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who pays the fees in AVAX\n        * @param changeAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who gets the change leftover from the fee payment\n        * @param nodeID The node ID of the validator being added.\n        * @param startTime The Unix time when the validator starts validating the Primary Network.\n        * @param endTime The Unix time when the validator stops validating the Primary Network (and staked AVAX is returned).\n        * @param weight The amount of weight for this subnet validator.\n        * @param memo Optional contains arbitrary bytes, up to 256 bytes\n        * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n        *\n        * @returns An unsigned transaction created from the passed in parameters.\n        */\n        /* Re-implement when subnetValidator signing process is clearer\n        buildAddSubnetValidatorTx = async (\n          utxoset:UTXOSet,\n          fromAddresses:Array<string>,\n          changeAddresses:Array<string>,\n          nodeID:string,\n          startTime:BN,\n          endTime:BN,\n          weight:BN,\n          memo:PayloadBase|Buffer = undefined,\n          asOf:BN = UnixNow()\n        ):Promise<UnsignedTx> => {\n          const from:Array<Buffer> = this._cleanAddressArray(fromAddresses, 'buildAddSubnetValidatorTx').map((a) => bintools.stringToAddress(a));\n          const change:Array<Buffer> = this._cleanAddressArray(changeAddresses, 'buildAddSubnetValidatorTx').map((a) => bintools.stringToAddress(a));\n      \n          if( memo instanceof PayloadBase) {\n            memo = memo.getPayload();\n          }\n      \n          const avaxAssetID:Buffer = await this.getAVAXAssetID();\n          \n          const now:BN = UnixNow();\n          if (startTime.lt(now) || endTime.lte(startTime)) {\n            throw new Error(\"PlatformVMAPI.buildAddSubnetValidatorTx -- startTime must be in the future and endTime must come after startTime\");\n          }\n      \n          const builtUnsignedTx:UnsignedTx = utxoset.buildAddSubnetValidatorTx(\n            this.core.getNetworkID(),\n            bintools.cb58Decode(this.blockchainID),\n            from,\n            change,\n            NodeIDStringToBuffer(nodeID),\n            startTime, endTime,\n            weight,\n            this.getFee(),\n            avaxAssetID,\n            memo, asOf\n          );\n      \n          if(! await this.checkGooseEgg(builtUnsignedTx)) {\n            /* istanbul ignore next */ /*\n        throw new Error(\"Failed Goose Egg Check\");\n      }\n  \n      return builtUnsignedTx;\n    }\n  \n    */\n        /**\n        * Helper function which creates an unsigned [[AddDelegatorTx]]. For more granular control, you may create your own\n        * [[UnsignedTx]] manually and import the [[AddDelegatorTx]] class directly.\n        *\n        * @param utxoset A set of UTXOs that the transaction is built on\n        * @param toAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who recieved the staked tokens at the end of the staking period\n        * @param fromAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who own the staking UTXOs the fees in AVAX\n        * @param changeAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who gets the change leftover from the fee payment\n        * @param nodeID The node ID of the validator being added.\n        * @param startTime The Unix time when the validator starts validating the Primary Network.\n        * @param endTime The Unix time when the validator stops validating the Primary Network (and staked AVAX is returned).\n        * @param stakeAmount The amount being delegated as a {@link https://github.com/indutny/bn.js/|BN}\n        * @param rewardAddresses The addresses which will recieve the rewards from the delegated stake.\n        * @param rewardLocktime Optional. The locktime field created in the resulting reward outputs\n        * @param rewardThreshold Opional. The number of signatures required to spend the funds in the resultant reward UTXO. Default 1.\n        * @param memo Optional contains arbitrary bytes, up to 256 bytes\n        * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n        *\n        * @returns An unsigned transaction created from the passed in parameters.\n        */\n        this.buildAddDelegatorTx = (utxoset, toAddresses, fromAddresses, changeAddresses, nodeID, startTime, endTime, stakeAmount, rewardAddresses, rewardLocktime = new bn_js_1.default(0), rewardThreshold = 1, memo = undefined, asOf = helperfunctions_1.UnixNow()) => __awaiter(this, void 0, void 0, function* () {\n            const to = this._cleanAddressArray(toAddresses, 'buildAddDelegatorTx').map((a) => bintools.stringToAddress(a));\n            const from = this._cleanAddressArray(fromAddresses, 'buildAddDelegatorTx').map((a) => bintools.stringToAddress(a));\n            const change = this._cleanAddressArray(changeAddresses, 'buildAddDelegatorTx').map((a) => bintools.stringToAddress(a));\n            const rewards = this._cleanAddressArray(rewardAddresses, 'buildAddValidatorTx').map((a) => bintools.stringToAddress(a));\n            if (memo instanceof payload_1.PayloadBase) {\n                memo = memo.getPayload();\n            }\n            const minStake = (yield this.getMinStake())[\"minDelegatorStake\"];\n            if (stakeAmount.lt(minStake)) {\n                throw new Error(\"PlatformVMAPI.buildAddDelegatorTx -- stake amount must be at least \" + minStake.toString(10));\n            }\n            const avaxAssetID = yield this.getAVAXAssetID();\n            const now = helperfunctions_1.UnixNow();\n            if (startTime.lt(now) || endTime.lte(startTime)) {\n                throw new Error(\"PlatformVMAPI.buildAddDelegatorTx -- startTime must be in the future and endTime must come after startTime\");\n            }\n            const builtUnsignedTx = utxoset.buildAddDelegatorTx(this.core.getNetworkID(), bintools.cb58Decode(this.blockchainID), avaxAssetID, to, from, change, helperfunctions_1.NodeIDStringToBuffer(nodeID), startTime, endTime, stakeAmount, rewardLocktime, rewardThreshold, rewards, new bn_js_1.default(0), avaxAssetID, memo, asOf);\n            if (!(yield this.checkGooseEgg(builtUnsignedTx))) {\n                /* istanbul ignore next */\n                throw new Error(\"Failed Goose Egg Check\");\n            }\n            return builtUnsignedTx;\n        });\n        /**\n        * Helper function which creates an unsigned [[AddValidatorTx]]. For more granular control, you may create your own\n        * [[UnsignedTx]] manually and import the [[AddValidatorTx]] class directly.\n        *\n        * @param utxoset A set of UTXOs that the transaction is built on\n        * @param toAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who recieved the staked tokens at the end of the staking period\n        * @param fromAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who own the staking UTXOs the fees in AVAX\n        * @param changeAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who gets the change leftover from the fee payment\n        * @param nodeID The node ID of the validator being added.\n        * @param startTime The Unix time when the validator starts validating the Primary Network.\n        * @param endTime The Unix time when the validator stops validating the Primary Network (and staked AVAX is returned).\n        * @param stakeAmount The amount being delegated as a {@link https://github.com/indutny/bn.js/|BN}\n        * @param rewardAddresses The addresses which will recieve the rewards from the delegated stake.\n        * @param delegationFee A number for the percentage of reward to be given to the validator when someone delegates to them. Must be between 0 and 100.\n        * @param rewardLocktime Optional. The locktime field created in the resulting reward outputs\n        * @param rewardThreshold Opional. The number of signatures required to spend the funds in the resultant reward UTXO. Default 1.\n        * @param memo Optional contains arbitrary bytes, up to 256 bytes\n        * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n        *\n        * @returns An unsigned transaction created from the passed in parameters.\n        */\n        this.buildAddValidatorTx = (utxoset, toAddresses, fromAddresses, changeAddresses, nodeID, startTime, endTime, stakeAmount, rewardAddresses, delegationFee, rewardLocktime = new bn_js_1.default(0), rewardThreshold = 1, memo = undefined, asOf = helperfunctions_1.UnixNow()) => __awaiter(this, void 0, void 0, function* () {\n            const to = this._cleanAddressArray(toAddresses, 'buildAddValidatorTx').map((a) => bintools.stringToAddress(a));\n            const from = this._cleanAddressArray(fromAddresses, 'buildAddValidatorTx').map((a) => bintools.stringToAddress(a));\n            const change = this._cleanAddressArray(changeAddresses, 'buildAddValidatorTx').map((a) => bintools.stringToAddress(a));\n            const rewards = this._cleanAddressArray(rewardAddresses, 'buildAddValidatorTx').map((a) => bintools.stringToAddress(a));\n            if (memo instanceof payload_1.PayloadBase) {\n                memo = memo.getPayload();\n            }\n            const minStake = (yield this.getMinStake())[\"minValidatorStake\"];\n            if (stakeAmount.lt(minStake)) {\n                throw new Error(\"PlatformVMAPI.buildAddValidatorTx -- stake amount must be at least \" + minStake.toString(10));\n            }\n            if (typeof delegationFee !== \"number\" || delegationFee > 100 || delegationFee < 0) {\n                throw new Error(\"PlatformVMAPI.buildAddValidatorTx -- delegationFee must be a number between 0 and 100\");\n            }\n            const avaxAssetID = yield this.getAVAXAssetID();\n            const now = helperfunctions_1.UnixNow();\n            if (startTime.lt(now) || endTime.lte(startTime)) {\n                throw new Error(\"PlatformVMAPI.buildAddValidatorTx -- startTime must be in the future and endTime must come after startTime\");\n            }\n            const builtUnsignedTx = utxoset.buildAddValidatorTx(this.core.getNetworkID(), bintools.cb58Decode(this.blockchainID), avaxAssetID, to, from, change, helperfunctions_1.NodeIDStringToBuffer(nodeID), startTime, endTime, stakeAmount, rewardLocktime, rewardThreshold, rewards, delegationFee, new bn_js_1.default(0), avaxAssetID, memo, asOf);\n            if (!(yield this.checkGooseEgg(builtUnsignedTx))) {\n                /* istanbul ignore next */\n                throw new Error(\"Failed Goose Egg Check\");\n            }\n            return builtUnsignedTx;\n        });\n        /**\n          * Class representing an unsigned [[CreateSubnetTx]] transaction.\n          *\n          * @param utxoset A set of UTXOs that the transaction is built on\n          * @param fromAddresses The addresses being used to send the funds from the UTXOs {@link https://github.com/feross/buffer|Buffer}\n          * @param changeAddresses The addresses that can spend the change remaining from the spent UTXOs\n          * @param subnetOwnerAddresses An array of addresses for owners of the new subnet\n          * @param subnetOwnerThreshold A number indicating the amount of signatures required to add validators to a subnet\n          * @param memo Optional contains arbitrary bytes, up to 256 bytes\n          * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n          *\n          * @returns An unsigned transaction created from the passed in parameters.\n          */\n        this.buildCreateSubnetTx = (utxoset, fromAddresses, changeAddresses, subnetOwnerAddresses, subnetOwnerThreshold, memo = undefined, asOf = helperfunctions_1.UnixNow()) => __awaiter(this, void 0, void 0, function* () {\n            const from = this._cleanAddressArray(fromAddresses, 'buildCreateSubnetTx').map((a) => bintools.stringToAddress(a));\n            const change = this._cleanAddressArray(changeAddresses, 'buildCreateSubnetTx').map((a) => bintools.stringToAddress(a));\n            const owners = this._cleanAddressArray(subnetOwnerAddresses, 'buildCreateSubnetTx').map((a) => bintools.stringToAddress(a));\n            if (memo instanceof payload_1.PayloadBase) {\n                memo = memo.getPayload();\n            }\n            const avaxAssetID = yield this.getAVAXAssetID();\n            const builtUnsignedTx = utxoset.buildCreateSubnetTx(this.core.getNetworkID(), bintools.cb58Decode(this.blockchainID), from, change, owners, subnetOwnerThreshold, this.getCreationTxFee(), avaxAssetID, memo, asOf);\n            if (!(yield this.checkGooseEgg(builtUnsignedTx, this.getCreationTxFee()))) {\n                /* istanbul ignore next */\n                throw new Error(\"Failed Goose Egg Check\");\n            }\n            return builtUnsignedTx;\n        });\n        this.blockchainID = constants_1.PlatformChainID;\n        const netid = core.getNetworkID();\n        if (netid in constants_1.Defaults.network && this.blockchainID in constants_1.Defaults.network[netid]) {\n            const { alias } = constants_1.Defaults.network[netid][this.blockchainID];\n            this.keychain = new keychain_1.KeyChain(this.core.getHRP(), alias);\n        }\n        else {\n            this.keychain = new keychain_1.KeyChain(this.core.getHRP(), this.blockchainID);\n        }\n    }\n    /**\n     * @ignore\n     */\n    _cleanAddressArray(addresses, caller) {\n        const addrs = [];\n        const chainid = this.getBlockchainAlias() ? this.getBlockchainAlias() : this.getBlockchainID();\n        if (addresses && addresses.length > 0) {\n            for (let i = 0; i < addresses.length; i++) {\n                if (typeof addresses[i] === 'string') {\n                    if (typeof this.parseAddress(addresses[i]) === 'undefined') {\n                        /* istanbul ignore next */\n                        throw new Error(`Error - PlatformVMAPI.${caller}: Invalid address format ${addresses[i]}`);\n                    }\n                    addrs.push(addresses[i]);\n                }\n                else {\n                    addrs.push(bintools.addressToString(this.core.getHRP(), chainid, addresses[i]));\n                }\n            }\n        }\n        return addrs;\n    }\n}\nexports.PlatformVMAPI = PlatformVMAPI;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\n/**\n * @packageDocumentation\n * @module Common-Transactions\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EVMStandardTx = exports.EVMStandardUnsignedTx = exports.EVMStandardBaseTx = void 0;\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../utils/bintools\"));\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst input_1 = require(\"./input\");\nconst output_1 = require(\"./output\");\nconst constants_1 = require(\"../utils/constants\");\nconst serialization_1 = require(\"../utils/serialization\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serializer = serialization_1.Serialization.getInstance();\n/**\n * Class representing a base for all transactions.\n */\nclass EVMStandardBaseTx extends serialization_1.Serializable {\n    /**\n     * Class representing a StandardBaseTx which is the foundation for all transactions.\n     *\n     * @param networkid Optional networkid, [[DefaultNetworkID]]\n     * @param blockchainid Optional blockchainid, default Buffer.alloc(32, 16)\n     * @param outs Optional array of the [[TransferableOutput]]s\n     * @param ins Optional array of the [[TransferableInput]]s\n     */\n    constructor(networkid = constants_1.DefaultNetworkID, blockchainid = buffer_1.Buffer.alloc(32, 16)) {\n        super();\n        this._typeName = \"EVMStandardBaseTx\";\n        this._typeID = undefined;\n        this.networkid = buffer_1.Buffer.alloc(4);\n        this.blockchainid = buffer_1.Buffer.alloc(32);\n        /**\n         * Returns the NetworkID as a number\n         */\n        this.getNetworkID = () => this.networkid.readUInt32BE(0);\n        /**\n         * Returns the Buffer representation of the BlockchainID\n         */\n        this.getBlockchainID = () => this.blockchainid;\n        this.networkid.writeUInt32BE(networkid, 0);\n        this.blockchainid = blockchainid;\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { \"networkid\": serializer.encoder(this.networkid, encoding, \"Buffer\", \"decimalString\"), \"blockchainid\": serializer.encoder(this.blockchainid, encoding, \"Buffer\", \"cb58\") });\n    }\n    ;\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.networkid = serializer.decoder(fields[\"networkid\"], encoding, \"decimalString\", \"Buffer\", 4);\n        this.blockchainid = serializer.decoder(fields[\"blockchainid\"], encoding, \"cb58\", \"Buffer\", 32);\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[StandardBaseTx]].\n     */\n    toBuffer() {\n        let bsize = this.networkid.length + this.blockchainid.length;\n        const barr = [this.networkid, this.blockchainid];\n        const buff = buffer_1.Buffer.concat(barr, bsize);\n        return buff;\n    }\n    /**\n     * Returns a base-58 representation of the [[StandardBaseTx]].\n     */\n    toString() {\n        return bintools.bufferToB58(this.toBuffer());\n    }\n}\nexports.EVMStandardBaseTx = EVMStandardBaseTx;\n/**\n * Class representing an unsigned transaction.\n */\nclass EVMStandardUnsignedTx extends serialization_1.Serializable {\n    constructor(transaction = undefined, codecid = 0) {\n        super();\n        this._typeName = \"StandardUnsignedTx\";\n        this._typeID = undefined;\n        this.codecid = 0;\n        /**\n         * Returns the CodecID as a number\n         */\n        this.getCodecID = () => this.codecid;\n        /**\n        * Returns the {@link https://github.com/feross/buffer|Buffer} representation of the CodecID\n        */\n        this.getCodecIDBuffer = () => {\n            let codecBuf = buffer_1.Buffer.alloc(2);\n            codecBuf.writeUInt16BE(this.codecid, 0);\n            return codecBuf;\n        };\n        /**\n         * Returns the inputTotal as a BN\n         */\n        this.getInputTotal = (assetID) => {\n            const ins = [];\n            const aIDHex = assetID.toString('hex');\n            let total = new bn_js_1.default(0);\n            ins.forEach((input) => {\n                // only check StandardAmountInputs\n                if (input.getInput() instanceof input_1.StandardAmountInput && aIDHex === input.getAssetID().toString('hex')) {\n                    const i = input.getInput();\n                    total = total.add(i.getAmount());\n                }\n            });\n            return total;\n        };\n        /**\n         * Returns the outputTotal as a BN\n         */\n        this.getOutputTotal = (assetID) => {\n            const outs = [];\n            const aIDHex = assetID.toString('hex');\n            let total = new bn_js_1.default(0);\n            outs.forEach((out) => {\n                // only check StandardAmountOutput\n                if (out.getOutput() instanceof output_1.StandardAmountOutput && aIDHex === out.getAssetID().toString('hex')) {\n                    const output = out.getOutput();\n                    total = total.add(output.getAmount());\n                }\n            });\n            return total;\n        };\n        /**\n         * Returns the number of burned tokens as a BN\n         */\n        this.getBurn = (assetID) => {\n            return this.getInputTotal(assetID).sub(this.getOutputTotal(assetID));\n        };\n        this.codecid = codecid;\n        this.transaction = transaction;\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { \"codecid\": serializer.encoder(this.codecid, encoding, \"number\", \"decimalString\", 2), \"transaction\": this.transaction.serialize(encoding) });\n    }\n    ;\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.codecid = serializer.decoder(fields[\"codecid\"], encoding, \"decimalString\", \"number\");\n    }\n    toBuffer() {\n        const codecid = this.getCodecIDBuffer();\n        const txtype = buffer_1.Buffer.alloc(4);\n        txtype.writeUInt32BE(this.transaction.getTxType(), 0);\n        const basebuff = this.transaction.toBuffer();\n        return buffer_1.Buffer.concat([codecid, txtype, basebuff], codecid.length + txtype.length + basebuff.length);\n    }\n}\nexports.EVMStandardUnsignedTx = EVMStandardUnsignedTx;\n/**\n * Class representing a signed transaction.\n */\nclass EVMStandardTx extends serialization_1.Serializable {\n    /**\n     * Class representing a signed transaction.\n     *\n     * @param unsignedTx Optional [[StandardUnsignedTx]]\n     * @param signatures Optional array of [[Credential]]s\n     */\n    constructor(unsignedTx = undefined, credentials = undefined) {\n        super();\n        this._typeName = \"StandardTx\";\n        this._typeID = undefined;\n        this.unsignedTx = undefined;\n        this.credentials = [];\n        /**\n         * Returns the [[StandardUnsignedTx]]\n         */\n        this.getUnsignedTx = () => {\n            return this.unsignedTx;\n        };\n        if (typeof unsignedTx !== 'undefined') {\n            this.unsignedTx = unsignedTx;\n            if (typeof credentials !== 'undefined') {\n                this.credentials = credentials;\n            }\n        }\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { \"unsignedTx\": this.unsignedTx.serialize(encoding), \"credentials\": this.credentials.map((c) => c.serialize(encoding)) });\n    }\n    ;\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[StandardTx]].\n     */\n    toBuffer() {\n        const txbuff = this.unsignedTx.toBuffer();\n        let bsize = txbuff.length;\n        const credlen = buffer_1.Buffer.alloc(4);\n        credlen.writeUInt32BE(this.credentials.length, 0);\n        const barr = [txbuff, credlen];\n        bsize += credlen.length;\n        this.credentials.forEach((credential) => {\n            const credid = buffer_1.Buffer.alloc(4);\n            credid.writeUInt32BE(credential.getCredentialID(), 0);\n            barr.push(credid);\n            bsize += credid.length;\n            const credbuff = credential.toBuffer();\n            bsize += credbuff.length;\n            barr.push(credbuff);\n        });\n        const buff = buffer_1.Buffer.concat(barr, bsize);\n        return buff;\n    }\n    /**\n     * Takes a base-58 string containing an [[StandardTx]], parses it, populates the class, and returns the length of the Tx in bytes.\n     *\n     * @param serialized A base-58 string containing a raw [[StandardTx]]\n     *\n     * @returns The length of the raw [[StandardTx]]\n     *\n     * @remarks\n     * unlike most fromStrings, it expects the string to be serialized in cb58 format\n     */\n    fromString(serialized) {\n        return this.fromBuffer(bintools.cb58Decode(serialized));\n    }\n    /**\n     * Returns a cb58 representation of the [[StandardTx]].\n     *\n     * @remarks\n     * unlike most toStrings, this returns in cb58 serialization format\n     */\n    toString() {\n        return bintools.cb58Encode(this.toBuffer());\n    }\n}\nexports.EVMStandardTx = EVMStandardTx;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ExportTx = void 0;\n/**\n * @packageDocumentation\n * @module API-PlatformVM-ExportTx\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst outputs_1 = require(\"./outputs\");\nconst basetx_1 = require(\"./basetx\");\nconst constants_2 = require(\"../../utils/constants\");\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst serialization_1 = require(\"../../utils/serialization\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serializer = serialization_1.Serialization.getInstance();\n/**\n * Class representing an unsigned Export transaction.\n */\nclass ExportTx extends basetx_1.BaseTx {\n    /**\n     * Class representing an unsigned Export transaction.\n     *\n     * @param networkid Optional networkid, [[DefaultNetworkID]]\n     * @param blockchainid Optional blockchainid, default Buffer.alloc(32, 16)\n     * @param outs Optional array of the [[TransferableOutput]]s\n     * @param ins Optional array of the [[TransferableInput]]s\n     * @param memo Optional {@link https://github.com/feross/buffer|Buffer} for the memo field\n     * @param destinationChain Optional chainid which identifies where the funds will send to.\n     * @param exportOuts Array of [[TransferableOutputs]]s used in the transaction\n     */\n    constructor(networkid = constants_2.DefaultNetworkID, blockchainid = buffer_1.Buffer.alloc(32, 16), outs = undefined, ins = undefined, memo = undefined, destinationChain = undefined, exportOuts = undefined) {\n        super(networkid, blockchainid, outs, ins, memo);\n        this._typeName = \"ExportTx\";\n        this._typeID = constants_1.PlatformVMConstants.EXPORTTX;\n        this.destinationChain = buffer_1.Buffer.alloc(32);\n        this.numOuts = buffer_1.Buffer.alloc(4);\n        this.exportOuts = [];\n        /**\n         * Returns the id of the [[ExportTx]]\n         */\n        this.getTxType = () => {\n            return constants_1.PlatformVMConstants.EXPORTTX;\n        };\n        this.destinationChain = destinationChain; //do not correct, it should bomb on toBuffer if not provided\n        if (typeof exportOuts !== 'undefined' && Array.isArray(exportOuts)) {\n            for (let i = 0; i < exportOuts.length; i++) {\n                if (!(exportOuts[i] instanceof outputs_1.TransferableOutput)) {\n                    throw new Error(\"Error - ExportTx.constructor: invalid TransferableOutput in array parameter 'exportOuts'\");\n                }\n            }\n            this.exportOuts = exportOuts;\n        }\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { \"destinationChain\": serializer.encoder(this.destinationChain, encoding, \"Buffer\", \"cb58\"), \"exportOuts\": this.exportOuts.map((e) => e.serialize(encoding)) });\n    }\n    ;\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.destinationChain = serializer.decoder(fields[\"destinationChain\"], encoding, \"cb58\", \"Buffer\", 32);\n        this.exportOuts = fields[\"exportOuts\"].map((e) => {\n            let eo = new outputs_1.TransferableOutput();\n            eo.deserialize(e, encoding);\n            return eo;\n        });\n        this.numOuts = buffer_1.Buffer.alloc(4);\n        this.numOuts.writeUInt32BE(this.exportOuts.length, 0);\n    }\n    /**\n     * Returns an array of [[TransferableOutput]]s in this transaction.\n     */\n    getExportOutputs() {\n        return this.exportOuts;\n    }\n    /**\n     * Returns the total exported amount as a {@link https://github.com/indutny/bn.js/|BN}.\n     */\n    getExportTotal() {\n        let val = new bn_js_1.default(0);\n        for (let i = 0; i < this.exportOuts.length; i++) {\n            val = val.add(this.exportOuts[i].getOutput().getAmount());\n        }\n        return val;\n    }\n    getTotalOuts() {\n        return [...this.getOuts(), ...this.getExportOutputs()];\n    }\n    /**\n     * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[ExportTx]], parses it, populates the class, and returns the length of the [[ExportTx]] in bytes.\n     *\n     * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[ExportTx]]\n     *\n     * @returns The length of the raw [[ExportTx]]\n     *\n     * @remarks assume not-checksummed\n     */\n    fromBuffer(bytes, offset = 0) {\n        offset = super.fromBuffer(bytes, offset);\n        this.destinationChain = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        this.numOuts = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const numOuts = this.numOuts.readUInt32BE(0);\n        for (let i = 0; i < numOuts; i++) {\n            const anOut = new outputs_1.TransferableOutput();\n            offset = anOut.fromBuffer(bytes, offset);\n            this.exportOuts.push(anOut);\n        }\n        return offset;\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[ExportTx]].\n     */\n    toBuffer() {\n        if (typeof this.destinationChain === \"undefined\") {\n            throw new Error(\"ExportTx.toBuffer -- this.destinationChain is undefined\");\n        }\n        this.numOuts.writeUInt32BE(this.exportOuts.length, 0);\n        let barr = [super.toBuffer(), this.destinationChain, this.numOuts];\n        this.exportOuts = this.exportOuts.sort(outputs_1.TransferableOutput.comparator());\n        for (let i = 0; i < this.exportOuts.length; i++) {\n            barr.push(this.exportOuts[i].toBuffer());\n        }\n        return buffer_1.Buffer.concat(barr);\n    }\n    clone() {\n        let newbase = new ExportTx();\n        newbase.fromBuffer(this.toBuffer());\n        return newbase;\n    }\n    create(...args) {\n        return new ExportTx(...args);\n    }\n}\nexports.ExportTx = ExportTx;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./api\"), exports);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpcy9tZXRyaWNzL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBLHdDQUFzQiIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gJy4vYXBpJztcbiJdfQ==","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Tx = exports.UnsignedTx = exports.SelectTxClass = void 0;\n/**\n * @packageDocumentation\n * @module API-PlatformVM-Transactions\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst credentials_1 = require(\"./credentials\");\nconst tx_1 = require(\"../../common/tx\");\nconst create_hash_1 = __importDefault(require(\"create-hash\"));\nconst basetx_1 = require(\"./basetx\");\nconst importtx_1 = require(\"./importtx\");\nconst exporttx_1 = require(\"./exporttx\");\nconst serialization_1 = require(\"../../utils/serialization\");\nconst validationtx_1 = require(\"./validationtx\");\nconst createsubnettx_1 = require(\"./createsubnettx\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serializer = serialization_1.Serialization.getInstance();\n/**\n * Takes a buffer representing the output and returns the proper [[BaseTx]] instance.\n *\n * @param txtype The id of the transaction type\n *\n * @returns An instance of an [[BaseTx]]-extended class.\n */\nexports.SelectTxClass = (txtype, ...args) => {\n    if (txtype === constants_1.PlatformVMConstants.BASETX) {\n        return new basetx_1.BaseTx(...args);\n    }\n    else if (txtype === constants_1.PlatformVMConstants.IMPORTTX) {\n        return new importtx_1.ImportTx(...args);\n    }\n    else if (txtype === constants_1.PlatformVMConstants.EXPORTTX) {\n        return new exporttx_1.ExportTx(...args);\n    }\n    else if (txtype === constants_1.PlatformVMConstants.ADDDELEGATORTX) {\n        return new validationtx_1.AddDelegatorTx(...args);\n    }\n    else if (txtype === constants_1.PlatformVMConstants.ADDVALIDATORTX) {\n        return new validationtx_1.AddValidatorTx(...args);\n    }\n    else if (txtype === constants_1.PlatformVMConstants.CREATESUBNETTX) {\n        return new createsubnettx_1.CreateSubnetTx(...args);\n    }\n    /* istanbul ignore next */\n    throw new Error(`Error - SelectTxClass: unknown txtype ${txtype}`);\n};\nclass UnsignedTx extends tx_1.StandardUnsignedTx {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"UnsignedTx\";\n        this._typeID = undefined;\n    }\n    //serialize is inherited\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.transaction = exports.SelectTxClass(fields[\"transaction\"][\"_typeID\"]);\n        this.transaction.deserialize(fields[\"transaction\"], encoding);\n    }\n    getTransaction() {\n        return this.transaction;\n    }\n    fromBuffer(bytes, offset = 0) {\n        this.codecid = bintools.copyFrom(bytes, offset, offset + 2).readUInt16BE(0);\n        offset += 2;\n        const txtype = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);\n        offset += 4;\n        this.transaction = exports.SelectTxClass(txtype);\n        return this.transaction.fromBuffer(bytes, offset);\n    }\n    /**\n     * Signs this [[UnsignedTx]] and returns signed [[StandardTx]]\n     *\n     * @param kc An [[KeyChain]] used in signing\n     *\n     * @returns A signed [[StandardTx]]\n     */\n    sign(kc) {\n        const txbuff = this.toBuffer();\n        const msg = buffer_1.Buffer.from(create_hash_1.default('sha256').update(txbuff).digest());\n        const sigs = this.transaction.sign(msg, kc);\n        return new Tx(this, sigs);\n    }\n}\nexports.UnsignedTx = UnsignedTx;\nclass Tx extends tx_1.StandardTx {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"Tx\";\n        this._typeID = undefined;\n    }\n    //serialize is inherited\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.unsignedTx = new UnsignedTx();\n        this.unsignedTx.deserialize(fields[\"unsignedTx\"], encoding);\n        this.credentials = [];\n        for (let i = 0; i < fields[\"credentials\"].length; i++) {\n            const cred = credentials_1.SelectCredentialClass(fields[\"credentials\"][i][\"_typeID\"]);\n            cred.deserialize(fields[\"credentials\"][i], encoding);\n            this.credentials.push(cred);\n        }\n    }\n    /**\n     * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[Tx]], parses it, populates the class, and returns the length of the Tx in bytes.\n     *\n     * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[Tx]]\n     * @param offset A number representing the starting point of the bytes to begin parsing\n     *\n     * @returns The length of the raw [[Tx]]\n     */\n    fromBuffer(bytes, offset = 0) {\n        this.unsignedTx = new UnsignedTx();\n        offset = this.unsignedTx.fromBuffer(bytes, offset);\n        const numcreds = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);\n        offset += 4;\n        this.credentials = [];\n        for (let i = 0; i < numcreds; i++) {\n            const credid = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);\n            offset += 4;\n            const cred = credentials_1.SelectCredentialClass(credid);\n            offset = cred.fromBuffer(bytes, offset);\n            this.credentials.push(cred);\n        }\n        return offset;\n    }\n}\nexports.Tx = Tx;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\n/**\n * @packageDocumentation\n * @module API-PlatformVM-Constants\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PlatformVMConstants = void 0;\nclass PlatformVMConstants {\n}\nexports.PlatformVMConstants = PlatformVMConstants;\nPlatformVMConstants.LATESTCODEC = 0;\nPlatformVMConstants.SECPFXID = 0;\nPlatformVMConstants.SECPXFEROUTPUTID = 7;\nPlatformVMConstants.SUBNETAUTHID = 10;\nPlatformVMConstants.SECPOWNEROUTPUTID = 11;\nPlatformVMConstants.STAKEABLELOCKOUTID = 22;\nPlatformVMConstants.SECPINPUTID = 5;\nPlatformVMConstants.STAKEABLELOCKINID = 21;\nPlatformVMConstants.LOCKEDSTAKEABLES = [PlatformVMConstants.STAKEABLELOCKINID, PlatformVMConstants.STAKEABLELOCKOUTID];\nPlatformVMConstants.BASETX = 0;\nPlatformVMConstants.ADDVALIDATORTX = 12;\nPlatformVMConstants.ADDSUBNETVALIDATORTX = 13;\nPlatformVMConstants.ADDDELEGATORTX = 14;\nPlatformVMConstants.CREATECHAINTX = 15;\nPlatformVMConstants.CREATESUBNETTX = 16;\nPlatformVMConstants.IMPORTTX = 17;\nPlatformVMConstants.EXPORTTX = 18;\nPlatformVMConstants.ADVANCETIMETX = 19;\nPlatformVMConstants.REWARDVALIDATORTX = 20;\nPlatformVMConstants.SECPCREDENTIAL = 9;\nPlatformVMConstants.ASSETIDLEN = 32;\nPlatformVMConstants.BLOCKCHAINIDLEN = 32;\nPlatformVMConstants.SYMBOLMAXLEN = 4;\nPlatformVMConstants.ASSETNAMELEN = 128;\nPlatformVMConstants.ADDRESSLENGTH = 20;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3RhbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2FwaXMvcGxhdGZvcm12bS9jb25zdGFudHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7R0FHRzs7O0FBRUgsTUFBYSxtQkFBbUI7O0FBQWhDLGtEQWtEQztBQWpEUSwrQkFBVyxHQUFVLENBQUMsQ0FBQztBQUV2Qiw0QkFBUSxHQUFVLENBQUMsQ0FBQztBQUVwQixvQ0FBZ0IsR0FBVSxDQUFDLENBQUM7QUFFNUIsZ0NBQVksR0FBVSxFQUFFLENBQUM7QUFFekIscUNBQWlCLEdBQVUsRUFBRSxDQUFDO0FBRTlCLHNDQUFrQixHQUFVLEVBQUUsQ0FBQztBQUUvQiwrQkFBVyxHQUFVLENBQUMsQ0FBQztBQUV2QixxQ0FBaUIsR0FBVSxFQUFFLENBQUM7QUFFOUIsb0NBQWdCLEdBQWlCLENBQUMsbUJBQW1CLENBQUMsaUJBQWlCLEVBQUUsbUJBQW1CLENBQUMsa0JBQWtCLENBQUMsQ0FBQztBQUVqSCwwQkFBTSxHQUFVLENBQUMsQ0FBQztBQUVsQixrQ0FBYyxHQUFVLEVBQUUsQ0FBQztBQUUzQix3Q0FBb0IsR0FBVSxFQUFFLENBQUM7QUFFakMsa0NBQWMsR0FBVSxFQUFFLENBQUM7QUFFM0IsaUNBQWEsR0FBVSxFQUFFLENBQUM7QUFFMUIsa0NBQWMsR0FBVSxFQUFFLENBQUM7QUFFM0IsNEJBQVEsR0FBVSxFQUFFLENBQUM7QUFFckIsNEJBQVEsR0FBVSxFQUFFLENBQUM7QUFFckIsaUNBQWEsR0FBVSxFQUFFLENBQUM7QUFFMUIscUNBQWlCLEdBQVUsRUFBRSxDQUFDO0FBRTlCLGtDQUFjLEdBQVUsQ0FBQyxDQUFDO0FBRTFCLDhCQUFVLEdBQVUsRUFBRSxDQUFDO0FBRXZCLG1DQUFlLEdBQVUsRUFBRSxDQUFDO0FBRTVCLGdDQUFZLEdBQVUsQ0FBQyxDQUFDO0FBRXhCLGdDQUFZLEdBQVUsR0FBRyxDQUFDO0FBRTFCLGlDQUFhLEdBQVUsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAcGFja2FnZURvY3VtZW50YXRpb25cbiAqIEBtb2R1bGUgQVBJLVBsYXRmb3JtVk0tQ29uc3RhbnRzXG4gKi9cblxuZXhwb3J0IGNsYXNzIFBsYXRmb3JtVk1Db25zdGFudHMge1xuICBzdGF0aWMgTEFURVNUQ09ERUM6bnVtYmVyID0gMDtcblxuICBzdGF0aWMgU0VDUEZYSUQ6bnVtYmVyID0gMDtcblxuICBzdGF0aWMgU0VDUFhGRVJPVVRQVVRJRDpudW1iZXIgPSA3O1xuICBcbiAgc3RhdGljIFNVQk5FVEFVVEhJRDpudW1iZXIgPSAxMDtcblxuICBzdGF0aWMgU0VDUE9XTkVST1VUUFVUSUQ6bnVtYmVyID0gMTE7XG5cbiAgc3RhdGljIFNUQUtFQUJMRUxPQ0tPVVRJRDpudW1iZXIgPSAyMjtcblxuICBzdGF0aWMgU0VDUElOUFVUSUQ6bnVtYmVyID0gNTtcblxuICBzdGF0aWMgU1RBS0VBQkxFTE9DS0lOSUQ6bnVtYmVyID0gMjE7XG5cbiAgc3RhdGljIExPQ0tFRFNUQUtFQUJMRVM6QXJyYXk8bnVtYmVyPiA9IFtQbGF0Zm9ybVZNQ29uc3RhbnRzLlNUQUtFQUJMRUxPQ0tJTklELCBQbGF0Zm9ybVZNQ29uc3RhbnRzLlNUQUtFQUJMRUxPQ0tPVVRJRF07XG5cbiAgc3RhdGljIEJBU0VUWDpudW1iZXIgPSAwO1xuXG4gIHN0YXRpYyBBRERWQUxJREFUT1JUWDpudW1iZXIgPSAxMjtcblxuICBzdGF0aWMgQUREU1VCTkVUVkFMSURBVE9SVFg6bnVtYmVyID0gMTM7XG5cbiAgc3RhdGljIEFERERFTEVHQVRPUlRYOm51bWJlciA9IDE0O1xuXG4gIHN0YXRpYyBDUkVBVEVDSEFJTlRYOm51bWJlciA9IDE1O1xuXG4gIHN0YXRpYyBDUkVBVEVTVUJORVRUWDpudW1iZXIgPSAxNjtcblxuICBzdGF0aWMgSU1QT1JUVFg6bnVtYmVyID0gMTc7XG5cbiAgc3RhdGljIEVYUE9SVFRYOm51bWJlciA9IDE4O1xuXG4gIHN0YXRpYyBBRFZBTkNFVElNRVRYOm51bWJlciA9IDE5O1xuXG4gIHN0YXRpYyBSRVdBUkRWQUxJREFUT1JUWDpudW1iZXIgPSAyMDtcblxuICBzdGF0aWMgU0VDUENSRURFTlRJQUw6bnVtYmVyID0gOTtcblxuICBzdGF0aWMgQVNTRVRJRExFTjpudW1iZXIgPSAzMjtcblxuICBzdGF0aWMgQkxPQ0tDSEFJTklETEVOOm51bWJlciA9IDMyO1xuXG4gIHN0YXRpYyBTWU1CT0xNQVhMRU46bnVtYmVyID0gNDtcblxuICBzdGF0aWMgQVNTRVROQU1FTEVOOm51bWJlciA9IDEyODtcblxuICBzdGF0aWMgQUREUkVTU0xFTkdUSDpudW1iZXIgPSAyMDtcbn1cbiJdfQ==","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.StandardTx = exports.StandardUnsignedTx = exports.StandardBaseTx = void 0;\n/**\n * @packageDocumentation\n * @module Common-Transactions\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../utils/bintools\"));\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst input_1 = require(\"./input\");\nconst output_1 = require(\"./output\");\nconst constants_1 = require(\"../utils/constants\");\nconst serialization_1 = require(\"../utils/serialization\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serializer = serialization_1.Serialization.getInstance();\n/**\n * Class representing a base for all transactions.\n */\nclass StandardBaseTx extends serialization_1.Serializable {\n    /**\n     * Class representing a StandardBaseTx which is the foundation for all transactions.\n     *\n     * @param networkid Optional networkid, [[DefaultNetworkID]]\n     * @param blockchainid Optional blockchainid, default Buffer.alloc(32, 16)\n     * @param outs Optional array of the [[TransferableOutput]]s\n     * @param ins Optional array of the [[TransferableInput]]s\n     * @param memo Optional {@link https://github.com/feross/buffer|Buffer} for the memo field\n     */\n    constructor(networkid = constants_1.DefaultNetworkID, blockchainid = buffer_1.Buffer.alloc(32, 16), outs = undefined, ins = undefined, memo = undefined) {\n        super();\n        this._typeName = \"StandardBaseTx\";\n        this._typeID = undefined;\n        this.networkid = buffer_1.Buffer.alloc(4);\n        this.blockchainid = buffer_1.Buffer.alloc(32);\n        this.numouts = buffer_1.Buffer.alloc(4);\n        this.numins = buffer_1.Buffer.alloc(4);\n        this.memo = buffer_1.Buffer.alloc(4);\n        /**\n         * Returns the NetworkID as a number\n         */\n        this.getNetworkID = () => this.networkid.readUInt32BE(0);\n        /**\n         * Returns the Buffer representation of the BlockchainID\n         */\n        this.getBlockchainID = () => this.blockchainid;\n        /**\n         * Returns the {@link https://github.com/feross/buffer|Buffer} representation of the memo\n         */\n        this.getMemo = () => this.memo;\n        this.networkid.writeUInt32BE(networkid, 0);\n        this.blockchainid = blockchainid;\n        if (typeof memo === \"undefined\") {\n            this.memo = buffer_1.Buffer.alloc(4);\n            this.memo.writeUInt32BE(0, 0);\n        }\n        else {\n            this.memo = memo;\n        }\n        if (typeof ins !== 'undefined' && typeof outs !== 'undefined') {\n            this.numouts.writeUInt32BE(outs.length, 0);\n            this.outs = outs.sort(output_1.StandardTransferableOutput.comparator());\n            this.numins.writeUInt32BE(ins.length, 0);\n            this.ins = ins.sort(input_1.StandardTransferableInput.comparator());\n        }\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { \"networkid\": serializer.encoder(this.networkid, encoding, \"Buffer\", \"decimalString\"), \"blockchainid\": serializer.encoder(this.blockchainid, encoding, \"Buffer\", \"cb58\"), \"outs\": this.outs.map((o) => o.serialize(encoding)), \"ins\": this.ins.map((i) => i.serialize(encoding)), \"memo\": serializer.encoder(this.memo, encoding, \"Buffer\", \"hex\") });\n    }\n    ;\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.networkid = serializer.decoder(fields[\"networkid\"], encoding, \"decimalString\", \"Buffer\", 4);\n        this.blockchainid = serializer.decoder(fields[\"blockchainid\"], encoding, \"cb58\", \"Buffer\", 32);\n        this.memo = serializer.decoder(fields[\"memo\"], encoding, \"hex\", \"Buffer\");\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[StandardBaseTx]].\n     */\n    toBuffer() {\n        this.outs.sort(output_1.StandardTransferableOutput.comparator());\n        this.ins.sort(input_1.StandardTransferableInput.comparator());\n        this.numouts.writeUInt32BE(this.outs.length, 0);\n        this.numins.writeUInt32BE(this.ins.length, 0);\n        let bsize = this.networkid.length + this.blockchainid.length + this.numouts.length;\n        const barr = [this.networkid, this.blockchainid, this.numouts];\n        for (let i = 0; i < this.outs.length; i++) {\n            const b = this.outs[i].toBuffer();\n            barr.push(b);\n            bsize += b.length;\n        }\n        barr.push(this.numins);\n        bsize += this.numins.length;\n        for (let i = 0; i < this.ins.length; i++) {\n            const b = this.ins[i].toBuffer();\n            barr.push(b);\n            bsize += b.length;\n        }\n        let memolen = buffer_1.Buffer.alloc(4);\n        memolen.writeUInt32BE(this.memo.length, 0);\n        barr.push(memolen);\n        bsize += 4;\n        barr.push(this.memo);\n        bsize += this.memo.length;\n        const buff = buffer_1.Buffer.concat(barr, bsize);\n        return buff;\n    }\n    /**\n     * Returns a base-58 representation of the [[StandardBaseTx]].\n     */\n    toString() {\n        return bintools.bufferToB58(this.toBuffer());\n    }\n}\nexports.StandardBaseTx = StandardBaseTx;\n/**\n * Class representing an unsigned transaction.\n */\nclass StandardUnsignedTx extends serialization_1.Serializable {\n    constructor(transaction = undefined, codecid = 0) {\n        super();\n        this._typeName = \"StandardUnsignedTx\";\n        this._typeID = undefined;\n        this.codecid = 0;\n        /**\n         * Returns the CodecID as a number\n         */\n        this.getCodecID = () => this.codecid;\n        /**\n        * Returns the {@link https://github.com/feross/buffer|Buffer} representation of the CodecID\n        */\n        this.getCodecIDBuffer = () => {\n            let codecBuf = buffer_1.Buffer.alloc(2);\n            codecBuf.writeUInt16BE(this.codecid, 0);\n            return codecBuf;\n        };\n        /**\n         * Returns the inputTotal as a BN\n         */\n        this.getInputTotal = (assetID) => {\n            const ins = this.getTransaction().getIns();\n            const aIDHex = assetID.toString('hex');\n            let total = new bn_js_1.default(0);\n            for (let i = 0; i < ins.length; i++) {\n                // only check StandardAmountInputs\n                if (ins[i].getInput() instanceof input_1.StandardAmountInput && aIDHex === ins[i].getAssetID().toString('hex')) {\n                    const input = ins[i].getInput();\n                    total = total.add(input.getAmount());\n                }\n            }\n            return total;\n        };\n        /**\n         * Returns the outputTotal as a BN\n         */\n        this.getOutputTotal = (assetID) => {\n            const outs = this.getTransaction().getTotalOuts();\n            const aIDHex = assetID.toString('hex');\n            let total = new bn_js_1.default(0);\n            for (let i = 0; i < outs.length; i++) {\n                // only check StandardAmountOutput\n                if (outs[i].getOutput() instanceof output_1.StandardAmountOutput && aIDHex === outs[i].getAssetID().toString('hex')) {\n                    const output = outs[i].getOutput();\n                    total = total.add(output.getAmount());\n                }\n            }\n            return total;\n        };\n        /**\n         * Returns the number of burned tokens as a BN\n         */\n        this.getBurn = (assetID) => {\n            return this.getInputTotal(assetID).sub(this.getOutputTotal(assetID));\n        };\n        this.codecid = codecid;\n        this.transaction = transaction;\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { \"codecid\": serializer.encoder(this.codecid, encoding, \"number\", \"decimalString\", 2), \"transaction\": this.transaction.serialize(encoding) });\n    }\n    ;\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.codecid = serializer.decoder(fields[\"codecid\"], encoding, \"decimalString\", \"number\");\n    }\n    toBuffer() {\n        const codecid = this.getCodecIDBuffer();\n        const txtype = buffer_1.Buffer.alloc(4);\n        txtype.writeUInt32BE(this.transaction.getTxType(), 0);\n        const basebuff = this.transaction.toBuffer();\n        return buffer_1.Buffer.concat([codecid, txtype, basebuff], codecid.length + txtype.length + basebuff.length);\n    }\n}\nexports.StandardUnsignedTx = StandardUnsignedTx;\n/**\n * Class representing a signed transaction.\n */\nclass StandardTx extends serialization_1.Serializable {\n    /**\n     * Class representing a signed transaction.\n     *\n     * @param unsignedTx Optional [[StandardUnsignedTx]]\n     * @param signatures Optional array of [[Credential]]s\n     */\n    constructor(unsignedTx = undefined, credentials = undefined) {\n        super();\n        this._typeName = \"StandardTx\";\n        this._typeID = undefined;\n        this.unsignedTx = undefined;\n        this.credentials = [];\n        /**\n         * Returns the [[StandardUnsignedTx]]\n         */\n        this.getUnsignedTx = () => {\n            return this.unsignedTx;\n        };\n        if (typeof unsignedTx !== 'undefined') {\n            this.unsignedTx = unsignedTx;\n            if (typeof credentials !== 'undefined') {\n                this.credentials = credentials;\n            }\n        }\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { \"unsignedTx\": this.unsignedTx.serialize(encoding), \"credentials\": this.credentials.map((c) => c.serialize(encoding)) });\n    }\n    ;\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[StandardTx]].\n     */\n    toBuffer() {\n        const txbuff = this.unsignedTx.toBuffer();\n        let bsize = txbuff.length;\n        const credlen = buffer_1.Buffer.alloc(4);\n        credlen.writeUInt32BE(this.credentials.length, 0);\n        const barr = [txbuff, credlen];\n        bsize += credlen.length;\n        for (let i = 0; i < this.credentials.length; i++) {\n            const credid = buffer_1.Buffer.alloc(4);\n            credid.writeUInt32BE(this.credentials[i].getCredentialID(), 0);\n            barr.push(credid);\n            bsize += credid.length;\n            const credbuff = this.credentials[i].toBuffer();\n            bsize += credbuff.length;\n            barr.push(credbuff);\n        }\n        const buff = buffer_1.Buffer.concat(barr, bsize);\n        return buff;\n    }\n    /**\n     * Takes a base-58 string containing an [[StandardTx]], parses it, populates the class, and returns the length of the Tx in bytes.\n     *\n     * @param serialized A base-58 string containing a raw [[StandardTx]]\n     *\n     * @returns The length of the raw [[StandardTx]]\n     *\n     * @remarks\n     * unlike most fromStrings, it expects the string to be serialized in cb58 format\n     */\n    fromString(serialized) {\n        return this.fromBuffer(bintools.cb58Decode(serialized));\n    }\n    /**\n     * Returns a cb58 representation of the [[StandardTx]].\n     *\n     * @remarks\n     * unlike most toStrings, this returns in cb58 serialization format\n     */\n    toString() {\n        return bintools.cb58Encode(this.toBuffer());\n    }\n}\nexports.StandardTx = StandardTx;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Credential = exports.Signature = exports.SigIdx = void 0;\n/**\n * @packageDocumentation\n * @module Common-Signature\n */\nconst nbytes_1 = require(\"./nbytes\");\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../utils/bintools\"));\nconst serialization_1 = require(\"../utils/serialization\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serializer = serialization_1.Serialization.getInstance();\n/**\n * Type representing a [[Signature]] index used in [[Input]]\n */\nclass SigIdx extends nbytes_1.NBytes {\n    /**\n     * Type representing a [[Signature]] index used in [[Input]]\n     */\n    constructor() {\n        super();\n        this._typeName = \"SigIdx\";\n        this._typeID = undefined;\n        this.source = buffer_1.Buffer.alloc(20);\n        this.bytes = buffer_1.Buffer.alloc(4);\n        this.bsize = 4;\n        /**\n         * Sets the source address for the signature\n         */\n        this.setSource = (address) => {\n            this.source = address;\n        };\n        /**\n         * Retrieves the source address for the signature\n         */\n        this.getSource = () => this.source;\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { \"source\": serializer.encoder(this.source, encoding, \"Buffer\", \"hex\") });\n    }\n    ;\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.source = serializer.decoder(fields[\"source\"], encoding, \"hex\", \"Buffer\");\n    }\n    clone() {\n        let newbase = new SigIdx();\n        newbase.fromBuffer(this.toBuffer());\n        return newbase;\n    }\n    create(...args) {\n        return new SigIdx();\n    }\n}\nexports.SigIdx = SigIdx;\n/**\n * Signature for a [[Tx]]\n */\nclass Signature extends nbytes_1.NBytes {\n    /**\n     * Signature for a [[Tx]]\n     */\n    constructor() {\n        super();\n        this._typeName = \"Signature\";\n        this._typeID = undefined;\n        //serialize and deserialize both are inherited\n        this.bytes = buffer_1.Buffer.alloc(65);\n        this.bsize = 65;\n    }\n    clone() {\n        let newbase = new Signature();\n        newbase.fromBuffer(this.toBuffer());\n        return newbase;\n    }\n    create(...args) {\n        return new Signature();\n    }\n}\nexports.Signature = Signature;\nclass Credential extends serialization_1.Serializable {\n    constructor(sigarray = undefined) {\n        super();\n        this._typeName = \"Credential\";\n        this._typeID = undefined;\n        this.sigArray = [];\n        /**\n           * Adds a signature to the credentials and returns the index off the added signature.\n           */\n        this.addSignature = (sig) => {\n            this.sigArray.push(sig);\n            return this.sigArray.length - 1;\n        };\n        if (typeof sigarray !== 'undefined') {\n            /* istanbul ignore next */\n            this.sigArray = sigarray;\n        }\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { \"sigArray\": this.sigArray.map((s) => s.serialize(encoding)) });\n    }\n    ;\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.sigArray = fields[\"sigArray\"].map((s) => {\n            let sig = new Signature();\n            sig.deserialize(s, encoding);\n            return sig;\n        });\n    }\n    fromBuffer(bytes, offset = 0) {\n        const siglen = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);\n        offset += 4;\n        this.sigArray = [];\n        for (let i = 0; i < siglen; i++) {\n            const sig = new Signature();\n            offset = sig.fromBuffer(bytes, offset);\n            this.sigArray.push(sig);\n        }\n        return offset;\n    }\n    toBuffer() {\n        const siglen = buffer_1.Buffer.alloc(4);\n        siglen.writeInt32BE(this.sigArray.length, 0);\n        const barr = [siglen];\n        let bsize = siglen.length;\n        for (let i = 0; i < this.sigArray.length; i++) {\n            const sigbuff = this.sigArray[i].toBuffer();\n            bsize += sigbuff.length;\n            barr.push(sigbuff);\n        }\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n}\nexports.Credential = Credential;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\n/**\n * @packageDocumentation\n * @module API-PlatformVM-Credentials\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SECPCredential = exports.SelectCredentialClass = void 0;\nconst constants_1 = require(\"./constants\");\nconst credentials_1 = require(\"../../common/credentials\");\n/**\n * Takes a buffer representing the credential and returns the proper [[Credential]] instance.\n *\n * @param credid A number representing the credential ID parsed prior to the bytes passed in\n *\n * @returns An instance of an [[Credential]]-extended class.\n */\nexports.SelectCredentialClass = (credid, ...args) => {\n    if (credid === constants_1.PlatformVMConstants.SECPCREDENTIAL) {\n        return new SECPCredential(...args);\n    }\n    /* istanbul ignore next */\n    throw new Error(`Error - SelectCredentialClass: unknown credid ${credid}`);\n};\nclass SECPCredential extends credentials_1.Credential {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"SECPCredential\";\n        this._typeID = constants_1.PlatformVMConstants.SECPCREDENTIAL;\n    }\n    //serialize and deserialize both are inherited\n    getCredentialID() {\n        return this._typeID;\n    }\n    clone() {\n        let newbase = new SECPCredential();\n        newbase.fromBuffer(this.toBuffer());\n        return newbase;\n    }\n    create(...args) {\n        return new SECPCredential(...args);\n    }\n    select(id, ...args) {\n        let newbasetx = exports.SelectCredentialClass(id, ...args);\n        return newbasetx;\n    }\n}\nexports.SECPCredential = SECPCredential;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlZGVudGlhbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpcy9wbGF0Zm9ybXZtL2NyZWRlbnRpYWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7O0dBR0c7OztBQUVILDJDQUFrRDtBQUNsRCwwREFBc0Q7QUFFdEQ7Ozs7OztHQU1HO0FBQ1UsUUFBQSxxQkFBcUIsR0FBRyxDQUFDLE1BQWEsRUFBRSxHQUFHLElBQWUsRUFBYSxFQUFFO0lBQ3BGLElBQUksTUFBTSxLQUFLLCtCQUFtQixDQUFDLGNBQWMsRUFBRTtRQUNqRCxPQUFPLElBQUksY0FBYyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUM7S0FDcEM7SUFDRCwwQkFBMEI7SUFDMUIsTUFBTSxJQUFJLEtBQUssQ0FBQyxpREFBaUQsTUFBTSxFQUFFLENBQUMsQ0FBQztBQUM3RSxDQUFDLENBQUM7QUFFRixNQUFhLGNBQWUsU0FBUSx3QkFBVTtJQUE5Qzs7UUFDWSxjQUFTLEdBQUcsZ0JBQWdCLENBQUM7UUFDN0IsWUFBTyxHQUFHLCtCQUFtQixDQUFDLGNBQWMsQ0FBQztJQXVCekQsQ0FBQztJQXJCQyw4Q0FBOEM7SUFFOUMsZUFBZTtRQUNiLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUN0QixDQUFDO0lBR0QsS0FBSztRQUNILElBQUksT0FBTyxHQUFrQixJQUFJLGNBQWMsRUFBRSxDQUFDO1FBQ2xELE9BQU8sQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7UUFDcEMsT0FBTyxPQUFlLENBQUM7SUFDekIsQ0FBQztJQUVELE1BQU0sQ0FBQyxHQUFHLElBQVU7UUFDbEIsT0FBTyxJQUFJLGNBQWMsQ0FBQyxHQUFHLElBQUksQ0FBUyxDQUFDO0lBQzdDLENBQUM7SUFFRCxNQUFNLENBQUMsRUFBUyxFQUFFLEdBQUcsSUFBVTtRQUM3QixJQUFJLFNBQVMsR0FBYyw2QkFBcUIsQ0FBQyxFQUFFLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQztRQUM5RCxPQUFPLFNBQVMsQ0FBQztJQUNuQixDQUFDO0NBQ0Y7QUF6QkQsd0NBeUJDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAcGFja2FnZURvY3VtZW50YXRpb25cbiAqIEBtb2R1bGUgQVBJLVBsYXRmb3JtVk0tQ3JlZGVudGlhbHNcbiAqL1xuXG5pbXBvcnQgeyBQbGF0Zm9ybVZNQ29uc3RhbnRzIH0gZnJvbSAnLi9jb25zdGFudHMnO1xuaW1wb3J0IHsgQ3JlZGVudGlhbCB9IGZyb20gJy4uLy4uL2NvbW1vbi9jcmVkZW50aWFscyc7XG5cbi8qKlxuICogVGFrZXMgYSBidWZmZXIgcmVwcmVzZW50aW5nIHRoZSBjcmVkZW50aWFsIGFuZCByZXR1cm5zIHRoZSBwcm9wZXIgW1tDcmVkZW50aWFsXV0gaW5zdGFuY2UuXG4gKlxuICogQHBhcmFtIGNyZWRpZCBBIG51bWJlciByZXByZXNlbnRpbmcgdGhlIGNyZWRlbnRpYWwgSUQgcGFyc2VkIHByaW9yIHRvIHRoZSBieXRlcyBwYXNzZWQgaW5cbiAqXG4gKiBAcmV0dXJucyBBbiBpbnN0YW5jZSBvZiBhbiBbW0NyZWRlbnRpYWxdXS1leHRlbmRlZCBjbGFzcy5cbiAqL1xuZXhwb3J0IGNvbnN0IFNlbGVjdENyZWRlbnRpYWxDbGFzcyA9IChjcmVkaWQ6bnVtYmVyLCAuLi5hcmdzOkFycmF5PGFueT4pOkNyZWRlbnRpYWwgPT4ge1xuICBpZiAoY3JlZGlkID09PSBQbGF0Zm9ybVZNQ29uc3RhbnRzLlNFQ1BDUkVERU5USUFMKSB7XG4gICAgcmV0dXJuIG5ldyBTRUNQQ3JlZGVudGlhbCguLi5hcmdzKTtcbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICB0aHJvdyBuZXcgRXJyb3IoYEVycm9yIC0gU2VsZWN0Q3JlZGVudGlhbENsYXNzOiB1bmtub3duIGNyZWRpZCAke2NyZWRpZH1gKTtcbn07XG5cbmV4cG9ydCBjbGFzcyBTRUNQQ3JlZGVudGlhbCBleHRlbmRzIENyZWRlbnRpYWwge1xuICBwcm90ZWN0ZWQgX3R5cGVOYW1lID0gXCJTRUNQQ3JlZGVudGlhbFwiO1xuICBwcm90ZWN0ZWQgX3R5cGVJRCA9IFBsYXRmb3JtVk1Db25zdGFudHMuU0VDUENSRURFTlRJQUw7XG5cbiAgLy9zZXJpYWxpemUgYW5kIGRlc2VyaWFsaXplIGJvdGggYXJlIGluaGVyaXRlZFxuXG4gIGdldENyZWRlbnRpYWxJRCgpOm51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX3R5cGVJRDtcbiAgfVxuXG5cbiAgY2xvbmUoKTp0aGlzIHtcbiAgICBsZXQgbmV3YmFzZTpTRUNQQ3JlZGVudGlhbCA9IG5ldyBTRUNQQ3JlZGVudGlhbCgpO1xuICAgIG5ld2Jhc2UuZnJvbUJ1ZmZlcih0aGlzLnRvQnVmZmVyKCkpO1xuICAgIHJldHVybiBuZXdiYXNlIGFzIHRoaXM7XG4gIH1cblxuICBjcmVhdGUoLi4uYXJnczphbnlbXSk6dGhpcyB7XG4gICAgcmV0dXJuIG5ldyBTRUNQQ3JlZGVudGlhbCguLi5hcmdzKSBhcyB0aGlzO1xuICB9XG5cbiAgc2VsZWN0KGlkOm51bWJlciwgLi4uYXJnczphbnlbXSk6Q3JlZGVudGlhbCB7XG4gICAgbGV0IG5ld2Jhc2V0eDpDcmVkZW50aWFsID0gU2VsZWN0Q3JlZGVudGlhbENsYXNzKGlkLCAuLi5hcmdzKTtcbiAgICByZXR1cm4gbmV3YmFzZXR4O1xuICB9XG59XG5cbiJdfQ==","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BaseTx = void 0;\n/**\n * @packageDocumentation\n * @module API-PlatformVM-BaseTx\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst outputs_1 = require(\"./outputs\");\nconst inputs_1 = require(\"./inputs\");\nconst credentials_1 = require(\"./credentials\");\nconst tx_1 = require(\"../../common/tx\");\nconst credentials_2 = require(\"../../common/credentials\");\nconst constants_2 = require(\"../../utils/constants\");\nconst tx_2 = require(\"../platformvm/tx\");\nconst serialization_1 = require(\"../../utils/serialization\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serializer = serialization_1.Serialization.getInstance();\n/**\n * Class representing a base for all transactions.\n */\nclass BaseTx extends tx_1.StandardBaseTx {\n    /**\n     * Class representing a BaseTx which is the foundation for all transactions.\n     *\n     * @param networkid Optional networkid, [[DefaultNetworkID]]\n     * @param blockchainid Optional blockchainid, default Buffer.alloc(32, 16)\n     * @param outs Optional array of the [[TransferableOutput]]s\n     * @param ins Optional array of the [[TransferableInput]]s\n     * @param memo Optional {@link https://github.com/feross/buffer|Buffer} for the memo field\n     */\n    constructor(networkid = constants_2.DefaultNetworkID, blockchainid = buffer_1.Buffer.alloc(32, 16), outs = undefined, ins = undefined, memo = undefined) {\n        super(networkid, blockchainid, outs, ins, memo);\n        this._typeName = \"BaseTx\";\n        this._typeID = constants_1.PlatformVMConstants.CREATESUBNETTX;\n        /**\n         * Returns the id of the [[BaseTx]]\n         */\n        this.getTxType = () => {\n            return constants_1.PlatformVMConstants.BASETX;\n        };\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.outs = fields[\"outs\"].map((o) => {\n            let newOut = new outputs_1.TransferableOutput();\n            newOut.deserialize(o, encoding);\n            return newOut;\n        });\n        this.ins = fields[\"ins\"].map((i) => {\n            let newIn = new inputs_1.TransferableInput();\n            newIn.deserialize(i, encoding);\n            return newIn;\n        });\n        this.numouts = buffer_1.Buffer.alloc(4);\n        this.numouts.writeUInt32BE(this.outs.length, 0);\n        this.numins = buffer_1.Buffer.alloc(4);\n        this.numins.writeUInt32BE(this.ins.length, 0);\n    }\n    getOuts() {\n        return this.outs;\n    }\n    getIns() {\n        return this.ins;\n    }\n    getTotalOuts() {\n        return this.getOuts();\n    }\n    /**\n     * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[BaseTx]], parses it, populates the class, and returns the length of the BaseTx in bytes.\n     *\n     * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[BaseTx]]\n     *\n     * @returns The length of the raw [[BaseTx]]\n     *\n     * @remarks assume not-checksummed\n     */\n    fromBuffer(bytes, offset = 0) {\n        this.networkid = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        this.blockchainid = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        this.numouts = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const outcount = this.numouts.readUInt32BE(0);\n        this.outs = [];\n        for (let i = 0; i < outcount; i++) {\n            const xferout = new outputs_1.TransferableOutput();\n            offset = xferout.fromBuffer(bytes, offset);\n            this.outs.push(xferout);\n        }\n        this.numins = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const incount = this.numins.readUInt32BE(0);\n        this.ins = [];\n        for (let i = 0; i < incount; i++) {\n            const xferin = new inputs_1.TransferableInput();\n            offset = xferin.fromBuffer(bytes, offset);\n            this.ins.push(xferin);\n        }\n        let memolen = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);\n        offset += 4;\n        this.memo = bintools.copyFrom(bytes, offset, offset + memolen);\n        offset += memolen;\n        return offset;\n    }\n    /**\n     * Takes the bytes of an [[UnsignedTx]] and returns an array of [[Credential]]s\n     *\n     * @param msg A Buffer for the [[UnsignedTx]]\n     * @param kc An [[KeyChain]] used in signing\n     *\n     * @returns An array of [[Credential]]s\n     */\n    sign(msg, kc) {\n        const sigs = [];\n        for (let i = 0; i < this.ins.length; i++) {\n            const cred = credentials_1.SelectCredentialClass(this.ins[i].getInput().getCredentialID());\n            const sigidxs = this.ins[i].getInput().getSigIdxs();\n            for (let j = 0; j < sigidxs.length; j++) {\n                const keypair = kc.getKey(sigidxs[j].getSource());\n                const signval = keypair.sign(msg);\n                const sig = new credentials_2.Signature();\n                sig.fromBuffer(signval);\n                cred.addSignature(sig);\n            }\n            sigs.push(cred);\n        }\n        return sigs;\n    }\n    clone() {\n        let newbase = new BaseTx();\n        newbase.fromBuffer(this.toBuffer());\n        return newbase;\n    }\n    create(...args) {\n        return new BaseTx(...args);\n    }\n    select(id, ...args) {\n        let newbasetx = tx_2.SelectTxClass(id, ...args);\n        return newbasetx;\n    }\n}\nexports.BaseTx = BaseTx;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\n/**\n * @packageDocumentation\n * @module Common-RESTAPI\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RESTAPI = void 0;\nconst bintools_1 = __importDefault(require(\"../utils/bintools\"));\nconst apibase_1 = require(\"./apibase\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nclass RESTAPI extends apibase_1.APIBase {\n    /**\n       *\n       * @param core Reference to the Avalanche instance using this endpoint\n       * @param baseurl Path of the APIs baseurl - ex: \"/ext/bc/avm\"\n       * @param contentType Optional Determines the type of the entity attached to the\n       * incoming request\n       * @param acceptType Optional Determines the type of representation which is\n       * desired on the client side\n       */\n    constructor(core, baseurl, contentType = 'application/json;charset=UTF-8', acceptType = undefined) {\n        super(core, baseurl);\n        this.prepHeaders = (contentType, acceptType) => {\n            const headers = {};\n            if (contentType !== undefined) {\n                headers['Content-Type'] = contentType;\n            }\n            else {\n                headers['Content-Type'] = this.contentType;\n            }\n            if (acceptType !== undefined) {\n                headers[\"Accept\"] = acceptType;\n            }\n            else if (this.acceptType !== undefined) {\n                headers[\"Accept\"] = this.acceptType;\n            }\n            return headers;\n        };\n        this.axConf = () => {\n            return {\n                baseURL: `${this.core.getProtocol()}://${this.core.getIP()}:${this.core.getPort()}`,\n                responseType: 'json',\n            };\n        };\n        this.get = (baseurl, contentType, acceptType) => __awaiter(this, void 0, void 0, function* () {\n            const ep = baseurl || this.baseurl;\n            let headers = this.prepHeaders(contentType, acceptType);\n            return this.core.get(ep, {}, headers, this.axConf()).then((resp) => resp);\n        });\n        this.post = (method, params, baseurl, contentType, acceptType) => __awaiter(this, void 0, void 0, function* () {\n            const ep = baseurl || this.baseurl;\n            const rpc = {};\n            rpc.method = method;\n            // Set parameters if exists\n            if (params) {\n                rpc.params = params;\n            }\n            const headers = this.prepHeaders(contentType, acceptType);\n            return this.core.post(ep, {}, JSON.stringify(rpc), headers, this.axConf())\n                .then((resp) => resp);\n        });\n        this.put = (method, params, baseurl, contentType, acceptType) => __awaiter(this, void 0, void 0, function* () {\n            const ep = baseurl || this.baseurl;\n            const rpc = {};\n            rpc.method = method;\n            // Set parameters if exists\n            if (params) {\n                rpc.params = params;\n            }\n            const headers = this.prepHeaders(contentType, acceptType);\n            return this.core.put(ep, {}, JSON.stringify(rpc), headers, this.axConf())\n                .then((resp) => resp);\n        });\n        this.delete = (method, params, baseurl, contentType, acceptType) => __awaiter(this, void 0, void 0, function* () {\n            const ep = baseurl || this.baseurl;\n            const rpc = {};\n            rpc.method = method;\n            // Set parameters if exists\n            if (params) {\n                rpc.params = params;\n            }\n            const headers = this.prepHeaders(contentType, acceptType);\n            return this.core.delete(ep, {}, headers, this.axConf()).then((resp) => resp);\n        });\n        this.patch = (method, params, baseurl, contentType, acceptType) => __awaiter(this, void 0, void 0, function* () {\n            const ep = baseurl || this.baseurl;\n            const rpc = {};\n            rpc.method = method;\n            // Set parameters if exists\n            if (params) {\n                rpc.params = params;\n            }\n            const headers = this.prepHeaders(contentType, acceptType);\n            return this.core.patch(ep, {}, JSON.stringify(rpc), headers, this.axConf())\n                .then((resp) => resp);\n        });\n        /**\n           * Returns the type of the entity attached to the incoming request\n           */\n        this.getContentType = () => this.contentType;\n        /**\n           * Returns what type of representation is desired at the client side\n           */\n        this.getAcceptType = () => this.acceptType;\n        this.contentType = contentType;\n        this.acceptType = acceptType;\n    }\n}\nexports.RESTAPI = RESTAPI;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.KeystoreAPI = void 0;\nconst jrpcapi_1 = require(\"../../common/jrpcapi\");\n/**\n * Class for interacting with a node API that is using the node's KeystoreAPI.\n *\n * **WARNING**: The KeystoreAPI is to be used by the node-owner as the data is stored locally on the node. Do not trust the root user. If you are not the node-owner, do not use this as your wallet.\n *\n * @category RPCAPIs\n *\n * @remarks This extends the [[JRPCAPI]] class. This class should not be directly called. Instead, use the [[Avalanche.addAPI]] function to register this interface with Avalanche.\n */\nclass KeystoreAPI extends jrpcapi_1.JRPCAPI {\n    /**\n       * This class should not be instantiated directly. Instead use the [[Avalanche.addAPI]] method.\n       *\n       * @param core A reference to the Avalanche class\n       * @param baseurl Defaults to the string \"/ext/keystore\" as the path to blockchain's baseurl\n       */\n    constructor(core, baseurl = '/ext/keystore') {\n        super(core, baseurl);\n        /**\n           * Creates a user in the node's database.\n           *\n           * @param username Name of the user to create\n           * @param password Password for the user\n           *\n           * @returns Promise for a boolean with true on success\n           */\n        this.createUser = (username, password) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password,\n            };\n            return this.callMethod('keystore.createUser', params)\n                .then((response) => response.data.result.success);\n        });\n        /**\n           * Exports a user. The user can be imported to another node with keystore.importUser .\n           *\n           * @param username The name of the user to export\n           * @param password The password of the user to export\n           *\n           * @returns Promise with a string importable using importUser\n           */\n        this.exportUser = (username, password) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password,\n            };\n            return this.callMethod('keystore.exportUser', params)\n                .then((response) => response.data.result.user);\n        });\n        /**\n           * Imports a user file into the node's user database and assigns it to a username.\n           *\n           * @param username The name the user file should be imported into\n           * @param user cb58 serialized string represetning a user's data\n           * @param password The user's password\n           *\n           * @returns A promise with a true-value on success.\n           */\n        this.importUser = (username, user, password) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                user,\n                password,\n            };\n            return this.callMethod('keystore.importUser', params)\n                .then((response) => response.data.result.success);\n        });\n        /**\n           * Lists the names of all users on the node.\n           *\n           * @returns Promise of an array with all user names.\n           */\n        this.listUsers = () => __awaiter(this, void 0, void 0, function* () {\n            return this.callMethod('keystore.listUsers')\n                .then((response) => response.data.result.users);\n        });\n        /**\n           * Deletes a user in the node's database.\n           *\n           * @param username Name of the user to delete\n           * @param password Password for the user\n           *\n           * @returns Promise for a boolean with true on success\n           */\n        this.deleteUser = (username, password) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password,\n            };\n            return this.callMethod('keystore.deleteUser', params)\n                .then((response) => response.data.result.success);\n        });\n    }\n}\nexports.KeystoreAPI = KeystoreAPI;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2FwaXMva2V5c3RvcmUvYXBpLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUtBLGtEQUErQztBQUcvQzs7Ozs7Ozs7R0FRRztBQUNILE1BQWEsV0FBWSxTQUFRLGlCQUFPO0lBK0V0Qzs7Ozs7U0FLSztJQUNMLFlBQVksSUFBa0IsRUFBRSxVQUFpQixlQUFlO1FBQUksS0FBSyxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztRQXBGekY7Ozs7Ozs7YUFPSztRQUNMLGVBQVUsR0FBRyxDQUFPLFFBQWUsRUFBRSxRQUFlLEVBQW1CLEVBQUU7WUFDdkUsTUFBTSxNQUFNLEdBQU87Z0JBQ2pCLFFBQVE7Z0JBQ1IsUUFBUTthQUNULENBQUM7WUFDRixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMscUJBQXFCLEVBQUUsTUFBTSxDQUFDO2lCQUNsRCxJQUFJLENBQUMsQ0FBQyxRQUE0QixFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMxRSxDQUFDLENBQUEsQ0FBQztRQUVGOzs7Ozs7O2FBT0s7UUFDTCxlQUFVLEdBQUcsQ0FBTyxRQUFlLEVBQUUsUUFBZSxFQUFrQixFQUFFO1lBQ3RFLE1BQU0sTUFBTSxHQUFPO2dCQUNqQixRQUFRO2dCQUNSLFFBQVE7YUFDVCxDQUFDO1lBQ0YsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLHFCQUFxQixFQUFFLE1BQU0sQ0FBQztpQkFDbEQsSUFBSSxDQUFDLENBQUMsUUFBNEIsRUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDdkUsQ0FBQyxDQUFBLENBQUM7UUFFRjs7Ozs7Ozs7YUFRSztRQUNMLGVBQVUsR0FBRyxDQUFPLFFBQWUsRUFBRSxJQUFXLEVBQUUsUUFBZSxFQUFtQixFQUFFO1lBQ3BGLE1BQU0sTUFBTSxHQUFPO2dCQUNqQixRQUFRO2dCQUNSLElBQUk7Z0JBQ0osUUFBUTthQUNULENBQUM7WUFDRixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMscUJBQXFCLEVBQUUsTUFBTSxDQUFDO2lCQUNsRCxJQUFJLENBQUMsQ0FBQyxRQUE0QixFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMxRSxDQUFDLENBQUEsQ0FBQztRQUVGOzs7O2FBSUs7UUFDTCxjQUFTLEdBQUcsR0FBZ0MsRUFBRTtZQUFDLE9BQUEsSUFBSSxDQUFDLFVBQVUsQ0FBQyxvQkFBb0IsQ0FBQztpQkFDakYsSUFBSSxDQUFDLENBQUMsUUFBNEIsRUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUE7VUFBQSxDQUFDO1FBRXRFOzs7Ozs7O2FBT0s7UUFDTCxlQUFVLEdBQUcsQ0FBTyxRQUFlLEVBQUUsUUFBZSxFQUFtQixFQUFFO1lBQ3ZFLE1BQU0sTUFBTSxHQUFPO2dCQUNqQixRQUFRO2dCQUNSLFFBQVE7YUFDVCxDQUFDO1lBQ0YsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLHFCQUFxQixFQUFFLE1BQU0sQ0FBQztpQkFDbEQsSUFBSSxDQUFDLENBQUMsUUFBNEIsRUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDMUUsQ0FBQyxDQUFBLENBQUM7SUFRd0YsQ0FBQztDQUM1RjtBQXRGRCxrQ0FzRkMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBwYWNrYWdlRG9jdW1lbnRhdGlvblxuICogQG1vZHVsZSBBUEktS2V5c3RvcmVcbiAqL1xuaW1wb3J0IEF2YWxhbmNoZUNvcmUgZnJvbSAnLi4vLi4vYXZhbGFuY2hlJztcbmltcG9ydCB7IEpSUENBUEkgfSBmcm9tICcuLi8uLi9jb21tb24vanJwY2FwaSc7XG5pbXBvcnQgeyBSZXF1ZXN0UmVzcG9uc2VEYXRhIH0gZnJvbSAnLi4vLi4vY29tbW9uL2FwaWJhc2UnO1xuXG4vKipcbiAqIENsYXNzIGZvciBpbnRlcmFjdGluZyB3aXRoIGEgbm9kZSBBUEkgdGhhdCBpcyB1c2luZyB0aGUgbm9kZSdzIEtleXN0b3JlQVBJLlxuICpcbiAqICoqV0FSTklORyoqOiBUaGUgS2V5c3RvcmVBUEkgaXMgdG8gYmUgdXNlZCBieSB0aGUgbm9kZS1vd25lciBhcyB0aGUgZGF0YSBpcyBzdG9yZWQgbG9jYWxseSBvbiB0aGUgbm9kZS4gRG8gbm90IHRydXN0IHRoZSByb290IHVzZXIuIElmIHlvdSBhcmUgbm90IHRoZSBub2RlLW93bmVyLCBkbyBub3QgdXNlIHRoaXMgYXMgeW91ciB3YWxsZXQuXG4gKlxuICogQGNhdGVnb3J5IFJQQ0FQSXNcbiAqXG4gKiBAcmVtYXJrcyBUaGlzIGV4dGVuZHMgdGhlIFtbSlJQQ0FQSV1dIGNsYXNzLiBUaGlzIGNsYXNzIHNob3VsZCBub3QgYmUgZGlyZWN0bHkgY2FsbGVkLiBJbnN0ZWFkLCB1c2UgdGhlIFtbQXZhbGFuY2hlLmFkZEFQSV1dIGZ1bmN0aW9uIHRvIHJlZ2lzdGVyIHRoaXMgaW50ZXJmYWNlIHdpdGggQXZhbGFuY2hlLlxuICovXG5leHBvcnQgY2xhc3MgS2V5c3RvcmVBUEkgZXh0ZW5kcyBKUlBDQVBJIHtcbiAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHVzZXIgaW4gdGhlIG5vZGUncyBkYXRhYmFzZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB1c2VybmFtZSBOYW1lIG9mIHRoZSB1c2VyIHRvIGNyZWF0ZVxuICAgICAqIEBwYXJhbSBwYXNzd29yZCBQYXNzd29yZCBmb3IgdGhlIHVzZXJcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIFByb21pc2UgZm9yIGEgYm9vbGVhbiB3aXRoIHRydWUgb24gc3VjY2Vzc1xuICAgICAqL1xuICBjcmVhdGVVc2VyID0gYXN5bmMgKHVzZXJuYW1lOnN0cmluZywgcGFzc3dvcmQ6c3RyaW5nKTpQcm9taXNlPGJvb2xlYW4+ID0+IHtcbiAgICBjb25zdCBwYXJhbXM6YW55ID0ge1xuICAgICAgdXNlcm5hbWUsXG4gICAgICBwYXNzd29yZCxcbiAgICB9O1xuICAgIHJldHVybiB0aGlzLmNhbGxNZXRob2QoJ2tleXN0b3JlLmNyZWF0ZVVzZXInLCBwYXJhbXMpXG4gICAgICAudGhlbigocmVzcG9uc2U6UmVxdWVzdFJlc3BvbnNlRGF0YSkgPT4gcmVzcG9uc2UuZGF0YS5yZXN1bHQuc3VjY2Vzcyk7XG4gIH07XG5cbiAgLyoqXG4gICAgICogRXhwb3J0cyBhIHVzZXIuIFRoZSB1c2VyIGNhbiBiZSBpbXBvcnRlZCB0byBhbm90aGVyIG5vZGUgd2l0aCBrZXlzdG9yZS5pbXBvcnRVc2VyIC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB1c2VybmFtZSBUaGUgbmFtZSBvZiB0aGUgdXNlciB0byBleHBvcnRcbiAgICAgKiBAcGFyYW0gcGFzc3dvcmQgVGhlIHBhc3N3b3JkIG9mIHRoZSB1c2VyIHRvIGV4cG9ydFxuICAgICAqXG4gICAgICogQHJldHVybnMgUHJvbWlzZSB3aXRoIGEgc3RyaW5nIGltcG9ydGFibGUgdXNpbmcgaW1wb3J0VXNlclxuICAgICAqL1xuICBleHBvcnRVc2VyID0gYXN5bmMgKHVzZXJuYW1lOnN0cmluZywgcGFzc3dvcmQ6c3RyaW5nKTpQcm9taXNlPHN0cmluZz4gPT4ge1xuICAgIGNvbnN0IHBhcmFtczphbnkgPSB7XG4gICAgICB1c2VybmFtZSxcbiAgICAgIHBhc3N3b3JkLFxuICAgIH07XG4gICAgcmV0dXJuIHRoaXMuY2FsbE1ldGhvZCgna2V5c3RvcmUuZXhwb3J0VXNlcicsIHBhcmFtcylcbiAgICAgIC50aGVuKChyZXNwb25zZTpSZXF1ZXN0UmVzcG9uc2VEYXRhKSA9PiByZXNwb25zZS5kYXRhLnJlc3VsdC51c2VyKTtcbiAgfTtcblxuICAvKipcbiAgICAgKiBJbXBvcnRzIGEgdXNlciBmaWxlIGludG8gdGhlIG5vZGUncyB1c2VyIGRhdGFiYXNlIGFuZCBhc3NpZ25zIGl0IHRvIGEgdXNlcm5hbWUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdXNlcm5hbWUgVGhlIG5hbWUgdGhlIHVzZXIgZmlsZSBzaG91bGQgYmUgaW1wb3J0ZWQgaW50b1xuICAgICAqIEBwYXJhbSB1c2VyIGNiNTggc2VyaWFsaXplZCBzdHJpbmcgcmVwcmVzZXRuaW5nIGEgdXNlcidzIGRhdGFcbiAgICAgKiBAcGFyYW0gcGFzc3dvcmQgVGhlIHVzZXIncyBwYXNzd29yZFxuICAgICAqXG4gICAgICogQHJldHVybnMgQSBwcm9taXNlIHdpdGggYSB0cnVlLXZhbHVlIG9uIHN1Y2Nlc3MuXG4gICAgICovXG4gIGltcG9ydFVzZXIgPSBhc3luYyAodXNlcm5hbWU6c3RyaW5nLCB1c2VyOnN0cmluZywgcGFzc3dvcmQ6c3RyaW5nKTpQcm9taXNlPGJvb2xlYW4+ID0+IHtcbiAgICBjb25zdCBwYXJhbXM6YW55ID0ge1xuICAgICAgdXNlcm5hbWUsXG4gICAgICB1c2VyLFxuICAgICAgcGFzc3dvcmQsXG4gICAgfTtcbiAgICByZXR1cm4gdGhpcy5jYWxsTWV0aG9kKCdrZXlzdG9yZS5pbXBvcnRVc2VyJywgcGFyYW1zKVxuICAgICAgLnRoZW4oKHJlc3BvbnNlOlJlcXVlc3RSZXNwb25zZURhdGEpID0+IHJlc3BvbnNlLmRhdGEucmVzdWx0LnN1Y2Nlc3MpO1xuICB9O1xuXG4gIC8qKlxuICAgICAqIExpc3RzIHRoZSBuYW1lcyBvZiBhbGwgdXNlcnMgb24gdGhlIG5vZGUuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBQcm9taXNlIG9mIGFuIGFycmF5IHdpdGggYWxsIHVzZXIgbmFtZXMuXG4gICAgICovXG4gIGxpc3RVc2VycyA9IGFzeW5jICgpOlByb21pc2U8QXJyYXk8c3RyaW5nPj4gPT4gdGhpcy5jYWxsTWV0aG9kKCdrZXlzdG9yZS5saXN0VXNlcnMnKVxuICAgIC50aGVuKChyZXNwb25zZTpSZXF1ZXN0UmVzcG9uc2VEYXRhKSA9PiByZXNwb25zZS5kYXRhLnJlc3VsdC51c2Vycyk7XG5cbiAgLyoqXG4gICAgICogRGVsZXRlcyBhIHVzZXIgaW4gdGhlIG5vZGUncyBkYXRhYmFzZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB1c2VybmFtZSBOYW1lIG9mIHRoZSB1c2VyIHRvIGRlbGV0ZVxuICAgICAqIEBwYXJhbSBwYXNzd29yZCBQYXNzd29yZCBmb3IgdGhlIHVzZXJcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIFByb21pc2UgZm9yIGEgYm9vbGVhbiB3aXRoIHRydWUgb24gc3VjY2Vzc1xuICAgICAqL1xuICBkZWxldGVVc2VyID0gYXN5bmMgKHVzZXJuYW1lOnN0cmluZywgcGFzc3dvcmQ6c3RyaW5nKTpQcm9taXNlPGJvb2xlYW4+ID0+IHtcbiAgICBjb25zdCBwYXJhbXM6YW55ID0ge1xuICAgICAgdXNlcm5hbWUsXG4gICAgICBwYXNzd29yZCxcbiAgICB9O1xuICAgIHJldHVybiB0aGlzLmNhbGxNZXRob2QoJ2tleXN0b3JlLmRlbGV0ZVVzZXInLCBwYXJhbXMpXG4gICAgICAudGhlbigocmVzcG9uc2U6UmVxdWVzdFJlc3BvbnNlRGF0YSkgPT4gcmVzcG9uc2UuZGF0YS5yZXN1bHQuc3VjY2Vzcyk7XG4gIH07XG5cbiAgLyoqXG4gICAgICogVGhpcyBjbGFzcyBzaG91bGQgbm90IGJlIGluc3RhbnRpYXRlZCBkaXJlY3RseS4gSW5zdGVhZCB1c2UgdGhlIFtbQXZhbGFuY2hlLmFkZEFQSV1dIG1ldGhvZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBjb3JlIEEgcmVmZXJlbmNlIHRvIHRoZSBBdmFsYW5jaGUgY2xhc3NcbiAgICAgKiBAcGFyYW0gYmFzZXVybCBEZWZhdWx0cyB0byB0aGUgc3RyaW5nIFwiL2V4dC9rZXlzdG9yZVwiIGFzIHRoZSBwYXRoIHRvIGJsb2NrY2hhaW4ncyBiYXNldXJsXG4gICAgICovXG4gIGNvbnN0cnVjdG9yKGNvcmU6QXZhbGFuY2hlQ29yZSwgYmFzZXVybDpzdHJpbmcgPSAnL2V4dC9rZXlzdG9yZScpIHsgc3VwZXIoY29yZSwgYmFzZXVybCk7IH1cbn0iXX0="],"sourceRoot":""}